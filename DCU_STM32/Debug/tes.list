
tes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a808  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000978  0800a998  0800a998  0001a998  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b310  0800b310  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b310  0800b310  0001b310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b318  0800b318  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b318  0800b318  0001b318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b31c  0800b31c  0001b31c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800b320  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f8  2**0
                  CONTENTS
 10 .bss          000044b0  200001f8  200001f8  000201f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200046a8  200046a8  000201f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 14 .debug_info   00020e2f  00000000  00000000  0002026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000043ac  00000000  00000000  0004109a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010a8  00000000  00000000  00045448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000016a9  00000000  00000000  000464f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024734  00000000  00000000  00047b99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002062a  00000000  00000000  0006c2cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d9f7b  00000000  00000000  0008c8f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004e50  00000000  00000000  00166874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000e3f7  00000000  00000000  0016b6c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006d  00000000  00000000  00179abb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a980 	.word	0x0800a980

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800a980 	.word	0x0800a980

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <vApplicationGetIdleTaskMemory+0x14>)
 8000ff2:	6003      	str	r3, [r0, #0]
{
 8000ff4:	b410      	push	{r4}
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ff6:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ff8:	4c03      	ldr	r4, [pc, #12]	; (8001008 <vApplicationGetIdleTaskMemory+0x18>)
 8000ffa:	600c      	str	r4, [r1, #0]
  /* place for user code */
}
 8000ffc:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001000:	6013      	str	r3, [r2, #0]
}
 8001002:	4770      	bx	lr
 8001004:	20000414 	.word	0x20000414
 8001008:	20000214 	.word	0x20000214

0800100c <throttleVotolTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_throttleVotolTask */
void throttleVotolTask(void const * argument)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8001090 <throttleVotolTask+0x84>
 8001012:	4e1b      	ldr	r6, [pc, #108]	; (8001080 <throttleVotolTask+0x74>)
 8001014:	4f1b      	ldr	r7, [pc, #108]	; (8001084 <throttleVotolTask+0x78>)
 8001016:	4c1c      	ldr	r4, [pc, #112]	; (8001088 <throttleVotolTask+0x7c>)
	  else if(targetDAC2<setDAC2)setDAC2--;
//	sprintf(transmitBuffer, "%.2f, %.2f, %.2f, %.2f\n", targetDAC1, targetDAC2, setDAC1, setDAC2);
//	HAL_UART_Transmit_IT(&huart3, transmitBuffer, 80-1);
//	HAL_Delay(10);
//	memset(transmitBuffer, '\0', sizeof(transmitBuffer));
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1,DAC_ALIGN_12B_R, (setDAC1));
 8001018:	4d1c      	ldr	r5, [pc, #112]	; (800108c <throttleVotolTask+0x80>)
	  		setDAC1=4095;
 800101a:	f640 79ff 	movw	r9, #4095	; 0xfff
 800101e:	e014      	b.n	800104a <throttleVotolTask+0x3e>
	  		setDAC2++;
 8001020:	3201      	adds	r2, #1
 8001022:	b292      	uxth	r2, r2
	  		if(setDAC2>4095)
 8001024:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001028:	d323      	bcc.n	8001072 <throttleVotolTask+0x66>
	  			setDAC2=4095;
 800102a:	f8a4 9000 	strh.w	r9, [r4]
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1,DAC_ALIGN_12B_R, (setDAC1));
 800102e:	2200      	movs	r2, #0
 8001030:	4611      	mov	r1, r2
 8001032:	4628      	mov	r0, r5
 8001034:	f001 ff06 	bl	8002e44 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2,DAC_ALIGN_12B_R, (setDAC2));
 8001038:	8823      	ldrh	r3, [r4, #0]
 800103a:	2200      	movs	r2, #0
 800103c:	2110      	movs	r1, #16
 800103e:	4628      	mov	r0, r5
 8001040:	f001 ff00 	bl	8002e44 <HAL_DAC_SetValue>

	//timer_val = __HAL_TIM_GET_COUNTER(&htim2) - timer_val;
    osDelay(1);
 8001044:	2001      	movs	r0, #1
 8001046:	f003 f995 	bl	8004374 <osDelay>
	  if(targetDAC1>setDAC1)
 800104a:	f8b8 2000 	ldrh.w	r2, [r8]
 800104e:	8833      	ldrh	r3, [r6, #0]
 8001050:	429a      	cmp	r2, r3
 8001052:	d910      	bls.n	8001076 <throttleVotolTask+0x6a>
	  	setDAC1++;
 8001054:	3301      	adds	r3, #1
 8001056:	b29b      	uxth	r3, r3
	  	if(setDAC1>4095)
 8001058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800105c:	d30e      	bcc.n	800107c <throttleVotolTask+0x70>
	  		setDAC1=4095;
 800105e:	f8a6 9000 	strh.w	r9, [r6]
 8001062:	f640 73ff 	movw	r3, #4095	; 0xfff
	  	if(targetDAC2>setDAC2)
 8001066:	8839      	ldrh	r1, [r7, #0]
 8001068:	8822      	ldrh	r2, [r4, #0]
 800106a:	4291      	cmp	r1, r2
 800106c:	d8d8      	bhi.n	8001020 <throttleVotolTask+0x14>
	  else if(targetDAC2<setDAC2)setDAC2--;
 800106e:	d2de      	bcs.n	800102e <throttleVotolTask+0x22>
 8001070:	3a01      	subs	r2, #1
 8001072:	8022      	strh	r2, [r4, #0]
 8001074:	e7db      	b.n	800102e <throttleVotolTask+0x22>
	  else if(targetDAC1<setDAC1)setDAC1--;
 8001076:	d2f6      	bcs.n	8001066 <throttleVotolTask+0x5a>
 8001078:	3b01      	subs	r3, #1
 800107a:	b29b      	uxth	r3, r3
 800107c:	8033      	strh	r3, [r6, #0]
 800107e:	e7f2      	b.n	8001066 <throttleVotolTask+0x5a>
 8001080:	20000018 	.word	0x20000018
 8001084:	2000001e 	.word	0x2000001e
 8001088:	2000001a 	.word	0x2000001a
 800108c:	20000690 	.word	0x20000690
 8001090:	2000001c 	.word	0x2000001c

08001094 <parseSetVotol>:
{
 8001094:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t CurrMotorGear = -1;
 8001098:	f04f 0bff 	mov.w	fp, #255	; 0xff
 800109c:	4e3d      	ldr	r6, [pc, #244]	; (8001194 <parseSetVotol+0x100>)
 800109e:	f8df 8100 	ldr.w	r8, [pc, #256]	; 80011a0 <parseSetVotol+0x10c>
		 					HAL_GPIO_WritePin(lowSpeedPin1_GPIO_Port, lowSpeedPin1_Pin, GPIO_PIN_RESET);
 80010a2:	f8df a100 	ldr.w	sl, [pc, #256]	; 80011a4 <parseSetVotol+0x110>
		 					HAL_GPIO_WritePin(lowSpeedPin2_GPIO_Port, lowSpeedPin2_Pin, GPIO_PIN_RESET);
 80010a6:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80011a8 <parseSetVotol+0x114>
  uint8_t CurrMotorMode = -1;
 80010aa:	465f      	mov	r7, fp
 80010ac:	e016      	b.n	80010dc <parseSetVotol+0x48>
		 switch(SetMotorMode)
 80010ae:	b3cd      	cbz	r5, 8001124 <parseSetVotol+0x90>
	 if(SetMotorGear != CurrMotorGear)
 80010b0:	45a3      	cmp	fp, r4
 80010b2:	d006      	beq.n	80010c2 <parseSetVotol+0x2e>
	 		 switch(SetMotorGear)
 80010b4:	2c04      	cmp	r4, #4
 80010b6:	d004      	beq.n	80010c2 <parseSetVotol+0x2e>
 80010b8:	2c08      	cmp	r4, #8
 80010ba:	d002      	beq.n	80010c2 <parseSetVotol+0x2e>
 80010bc:	2c02      	cmp	r4, #2
 80010be:	bf18      	it	ne
 80010c0:	465c      	movne	r4, fp
	memset(transmitBuffer, '\0', sizeof(transmitBuffer));
 80010c2:	2264      	movs	r2, #100	; 0x64
 80010c4:	2100      	movs	r1, #0
 80010c6:	4834      	ldr	r0, [pc, #208]	; (8001198 <parseSetVotol+0x104>)
 80010c8:	f005 ffcb 	bl	8007062 <memset>
	osThreadSuspend(parseVotolTaskHandle);
 80010cc:	f8d8 0000 	ldr.w	r0, [r8]
 80010d0:	f003 f958 	bl	8004384 <osThreadSuspend>
    osDelay(1);
 80010d4:	2001      	movs	r0, #1
 80010d6:	f003 f94d 	bl	8004374 <osDelay>
  {
 80010da:	46a3      	mov	fp, r4
	 SetMotorMode = RxData[0];
 80010dc:	7835      	ldrb	r5, [r6, #0]
	 SetMotorGear = RxData[1];
 80010de:	7874      	ldrb	r4, [r6, #1]
	 if(SetMotorMode != CurrMotorMode)
 80010e0:	42af      	cmp	r7, r5
 80010e2:	d0e5      	beq.n	80010b0 <parseSetVotol+0x1c>
		 switch(SetMotorMode)
 80010e4:	2d01      	cmp	r5, #1
 80010e6:	d039      	beq.n	800115c <parseSetVotol+0xc8>
 80010e8:	2d02      	cmp	r5, #2
 80010ea:	d1e0      	bne.n	80010ae <parseSetVotol+0x1a>
		 					HAL_GPIO_WritePin(lowSpeedPin1_GPIO_Port, lowSpeedPin1_Pin, GPIO_PIN_SET);
 80010ec:	2201      	movs	r2, #1
 80010ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010f2:	4650      	mov	r0, sl
 80010f4:	f002 f89a 	bl	800322c <HAL_GPIO_WritePin>
		 					HAL_GPIO_WritePin(highSpeedPin1_GPIO_Port, highSpeedPin1_Pin, GPIO_PIN_RESET);
 80010f8:	2200      	movs	r2, #0
 80010fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010fe:	4650      	mov	r0, sl
 8001100:	f002 f894 	bl	800322c <HAL_GPIO_WritePin>
		 					HAL_GPIO_WritePin(lowSpeedPin2_GPIO_Port, lowSpeedPin2_Pin, GPIO_PIN_SET);
 8001104:	2201      	movs	r2, #1
 8001106:	2108      	movs	r1, #8
 8001108:	4648      	mov	r0, r9
 800110a:	f002 f88f 	bl	800322c <HAL_GPIO_WritePin>
		 					HAL_GPIO_WritePin(highSpeedPin2_GPIO_Port, highSpeedPin2_Pin, GPIO_PIN_RESET);
 800110e:	2200      	movs	r2, #0
 8001110:	4629      	mov	r1, r5
 8001112:	4648      	mov	r0, r9
 8001114:	f002 f88a 	bl	800322c <HAL_GPIO_WritePin>
		 					RPM_th = RPM_ECO;
 8001118:	4b20      	ldr	r3, [pc, #128]	; (800119c <parseSetVotol+0x108>)
 800111a:	f640 02d6 	movw	r2, #2262	; 0x8d6
 800111e:	601a      	str	r2, [r3, #0]
		 					CurrMotorMode = 0x02;
 8001120:	462f      	mov	r7, r5
		 					break;
 8001122:	e7c5      	b.n	80010b0 <parseSetVotol+0x1c>
		 					HAL_GPIO_WritePin(lowSpeedPin1_GPIO_Port, lowSpeedPin1_Pin, GPIO_PIN_RESET);
 8001124:	462a      	mov	r2, r5
 8001126:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800112a:	4650      	mov	r0, sl
 800112c:	f002 f87e 	bl	800322c <HAL_GPIO_WritePin>
		 					HAL_GPIO_WritePin(highSpeedPin1_GPIO_Port, highSpeedPin1_Pin, GPIO_PIN_SET);
 8001130:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001134:	4650      	mov	r0, sl
 8001136:	2201      	movs	r2, #1
 8001138:	f002 f878 	bl	800322c <HAL_GPIO_WritePin>
		 					HAL_GPIO_WritePin(lowSpeedPin2_GPIO_Port, lowSpeedPin2_Pin, GPIO_PIN_RESET);
 800113c:	462a      	mov	r2, r5
 800113e:	2108      	movs	r1, #8
 8001140:	4648      	mov	r0, r9
 8001142:	f002 f873 	bl	800322c <HAL_GPIO_WritePin>
		 					HAL_GPIO_WritePin(highSpeedPin2_GPIO_Port, highSpeedPin2_Pin, GPIO_PIN_SET);
 8001146:	2201      	movs	r2, #1
 8001148:	2102      	movs	r1, #2
 800114a:	4648      	mov	r0, r9
 800114c:	f002 f86e 	bl	800322c <HAL_GPIO_WritePin>
		 					RPM_th = RPM_SPORT;
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <parseSetVotol+0x108>)
 8001152:	f640 72dc 	movw	r2, #4060	; 0xfdc
 8001156:	601a      	str	r2, [r3, #0]
		 					CurrMotorMode = 0x00;
 8001158:	462f      	mov	r7, r5
		 					break;
 800115a:	e7a9      	b.n	80010b0 <parseSetVotol+0x1c>
		 					HAL_GPIO_WritePin(lowSpeedPin1_GPIO_Port, lowSpeedPin1_Pin, GPIO_PIN_RESET);
 800115c:	2200      	movs	r2, #0
 800115e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001162:	4650      	mov	r0, sl
 8001164:	f002 f862 	bl	800322c <HAL_GPIO_WritePin>
		 					HAL_GPIO_WritePin(highSpeedPin1_GPIO_Port, highSpeedPin1_Pin, GPIO_PIN_RESET);
 8001168:	2200      	movs	r2, #0
 800116a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800116e:	4650      	mov	r0, sl
 8001170:	f002 f85c 	bl	800322c <HAL_GPIO_WritePin>
		 					HAL_GPIO_WritePin(lowSpeedPin2_GPIO_Port, lowSpeedPin2_Pin, GPIO_PIN_RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	2108      	movs	r1, #8
 8001178:	4648      	mov	r0, r9
 800117a:	f002 f857 	bl	800322c <HAL_GPIO_WritePin>
		 					HAL_GPIO_WritePin(highSpeedPin2_GPIO_Port, highSpeedPin2_Pin, GPIO_PIN_RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	2102      	movs	r1, #2
 8001182:	4648      	mov	r0, r9
 8001184:	f002 f852 	bl	800322c <HAL_GPIO_WritePin>
		 					RPM_th = RPM_NORMAL;
 8001188:	4b04      	ldr	r3, [pc, #16]	; (800119c <parseSetVotol+0x108>)
 800118a:	f640 52dc 	movw	r2, #3548	; 0xddc
 800118e:	601a      	str	r2, [r3, #0]
		 					CurrMotorMode = 0x01;
 8001190:	462f      	mov	r7, r5
		 					break;
 8001192:	e78d      	b.n	80010b0 <parseSetVotol+0x1c>
 8001194:	200004e0 	.word	0x200004e0
 8001198:	2000073c 	.word	0x2000073c
 800119c:	20000010 	.word	0x20000010
 80011a0:	20000734 	.word	0x20000734
 80011a4:	40020800 	.word	0x40020800
 80011a8:	40020c00 	.word	0x40020c00

080011ac <can_rcv>:
	osThreadSuspend(parseVotolTaskHandle);
 80011ac:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8001204 <can_rcv+0x58>
 80011b0:	4d0f      	ldr	r5, [pc, #60]	; (80011f0 <can_rcv+0x44>)
 80011b2:	f8d8 0000 	ldr.w	r0, [r8]
		HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 80011b6:	4c0f      	ldr	r4, [pc, #60]	; (80011f4 <can_rcv+0x48>)
		if(RxHeader.ExtId == 0xCFDA3FE)
 80011b8:	4e0f      	ldr	r6, [pc, #60]	; (80011f8 <can_rcv+0x4c>)
{
 80011ba:	b580      	push	{r7, lr}
	osThreadSuspend(parseVotolTaskHandle);
 80011bc:	f003 f8e2 	bl	8004384 <osThreadSuspend>
	osThreadSuspend(ackermanHandle);
 80011c0:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <can_rcv+0x50>)
 80011c2:	4f0f      	ldr	r7, [pc, #60]	; (8001200 <can_rcv+0x54>)
 80011c4:	6818      	ldr	r0, [r3, #0]
 80011c6:	f003 f8dd 	bl	8004384 <osThreadSuspend>
	if (CAN_State == HAL_OK)
 80011ca:	782b      	ldrb	r3, [r5, #0]
		HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 80011cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011d0:	4620      	mov	r0, r4
	if (CAN_State == HAL_OK)
 80011d2:	b943      	cbnz	r3, 80011e6 <can_rcv+0x3a>
		HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 80011d4:	f002 f82e 	bl	8003234 <HAL_GPIO_TogglePin>
		if(RxHeader.ExtId == 0xCFDA3FE)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	42b3      	cmp	r3, r6
 80011dc:	d103      	bne.n	80011e6 <can_rcv+0x3a>
			osThreadResume(parseVotolTaskHandle);
 80011de:	f8d8 0000 	ldr.w	r0, [r8]
 80011e2:	f003 f8d5 	bl	8004390 <osThreadResume>
    osDelay(1);
 80011e6:	2001      	movs	r0, #1
 80011e8:	f003 f8c4 	bl	8004374 <osDelay>
	if (CAN_State == HAL_OK)
 80011ec:	e7ed      	b.n	80011ca <can_rcv+0x1e>
 80011ee:	bf00      	nop
 80011f0:	200004b4 	.word	0x200004b4
 80011f4:	40020c00 	.word	0x40020c00
 80011f8:	0cfda3fe 	.word	0x0cfda3fe
 80011fc:	20000618 	.word	0x20000618
 8001200:	200004f0 	.word	0x200004f0
 8001204:	20000734 	.word	0x20000734

08001208 <parsePXN>:
{
 8001208:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
	  	SteeringWheel = (float)((value*1.0) / 32768) * 135; //conversion to degree
 800120c:	ed9f 8a7e 	vldr	s16, [pc, #504]	; 8001408 <parsePXN+0x200>
 8001210:	f8df b23c 	ldr.w	fp, [pc, #572]	; 8001450 <parsePXN+0x248>
{
 8001214:	b085      	sub	sp, #20
 8001216:	e031      	b.n	800127c <parsePXN+0x74>
	  	value -= 32768; // to range -32768 - 32768
 8001218:	497c      	ldr	r1, [pc, #496]	; (800140c <parsePXN+0x204>)
 800121a:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 800121e:	6008      	str	r0, [r1, #0]
	  	SteeringWheel = (float)((value*1.0) / 32768) * 135; //conversion to degree
 8001220:	f7ff f980 	bl	8000524 <__aeabi_i2d>
 8001224:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001228:	2200      	movs	r2, #0
 800122a:	f7ff f9e5 	bl	80005f8 <__aeabi_dmul>
 800122e:	f7ff fcdb 	bl	8000be8 <__aeabi_d2f>
 8001232:	ee07 0a90 	vmov	s15, r0
 8001236:	4b76      	ldr	r3, [pc, #472]	; (8001410 <parsePXN+0x208>)
 8001238:	ee67 7a88 	vmul.f32	s15, s15, s16
	if(RxDataPXN[2] == 0x3B && RxDataPXN[4] == 0x01)
 800123c:	2c3b      	cmp	r4, #59	; 0x3b
	  	SteeringWheel = (float)((value*1.0) / 32768) * 135; //conversion to degree
 800123e:	edc3 7a00 	vstr	s15, [r3]
	  	SteeringWheelInt = (int)SteeringWheel;
 8001242:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001246:	4b73      	ldr	r3, [pc, #460]	; (8001414 <parsePXN+0x20c>)
 8001248:	edc3 7a00 	vstr	s15, [r3]
	if(RxDataPXN[2] == 0x3B && RxDataPXN[4] == 0x01)
 800124c:	d057      	beq.n	80012fe <parsePXN+0xf6>
	else if(RxDataPXN[2] == 0x3A && RxDataPXN[4] == 0x01)
 800124e:	2c3a      	cmp	r4, #58	; 0x3a
 8001250:	d061      	beq.n	8001316 <parsePXN+0x10e>
	else if(RxDataPXN[2] == 0x33 && RxDataPXN[4] == 0x01)
 8001252:	2c33      	cmp	r4, #51	; 0x33
 8001254:	d06e      	beq.n	8001334 <parsePXN+0x12c>
	else if(RxDataPXN[2] == 0x02 && RxDataPXN[4] == 0xFF)
 8001256:	2c02      	cmp	r4, #2
 8001258:	d07b      	beq.n	8001352 <parsePXN+0x14a>
	else if(RxDataPXN[2] == 0x05 && RxDataPXN[4] == 0xFF)
 800125a:	2c05      	cmp	r4, #5
 800125c:	f040 8084 	bne.w	8001368 <parsePXN+0x160>
 8001260:	2dff      	cmp	r5, #255	; 0xff
 8001262:	f000 808f 	beq.w	8001384 <parsePXN+0x17c>
	osThreadResume(ackermanHandle);
 8001266:	4b6c      	ldr	r3, [pc, #432]	; (8001418 <parsePXN+0x210>)
 8001268:	6818      	ldr	r0, [r3, #0]
 800126a:	f003 f891 	bl	8004390 <osThreadResume>
	osThreadSuspend(parsePXNTaskHandle);
 800126e:	4b6b      	ldr	r3, [pc, #428]	; (800141c <parsePXN+0x214>)
 8001270:	6818      	ldr	r0, [r3, #0]
 8001272:	f003 f887 	bl	8004384 <osThreadSuspend>
    osDelay(1);
 8001276:	2001      	movs	r0, #1
 8001278:	f003 f87c 	bl	8004374 <osDelay>
	FL = bitRead(Byte1, 0);//Byte1 undefined
 800127c:	4b68      	ldr	r3, [pc, #416]	; (8001420 <parsePXN+0x218>)
	code = (RxDataPXN[2] << 8) ^ RxDataPXN[1];
 800127e:	f89b 4002 	ldrb.w	r4, [fp, #2]
	FL = bitRead(Byte1, 0);//Byte1 undefined
 8001282:	f893 a000 	ldrb.w	sl, [r3]
	LB = bitRead(Byte0, 4);//Byte0 undefined
 8001286:	4b67      	ldr	r3, [pc, #412]	; (8001424 <parsePXN+0x21c>)
	code = (RxDataPXN[2] << 8) ^ RxDataPXN[1];
 8001288:	4a67      	ldr	r2, [pc, #412]	; (8001428 <parsePXN+0x220>)
	LB = bitRead(Byte0, 4);//Byte0 undefined
 800128a:	781e      	ldrb	r6, [r3, #0]
	code = (RxDataPXN[2] << 8) ^ RxDataPXN[1];
 800128c:	f89b 3001 	ldrb.w	r3, [fp, #1]
	type = RxDataPXN[0];
 8001290:	4f66      	ldr	r7, [pc, #408]	; (800142c <parsePXN+0x224>)
	value = (RxDataPXN[3] << 8) ^ RxDataPXN[4];
 8001292:	f89b 5004 	ldrb.w	r5, [fp, #4]
 8001296:	f89b 0003 	ldrb.w	r0, [fp, #3]
 800129a:	495c      	ldr	r1, [pc, #368]	; (800140c <parsePXN+0x204>)
	code = (RxDataPXN[2] << 8) ^ RxDataPXN[1];
 800129c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80012a0:	8013      	strh	r3, [r2, #0]
	DL = bitRead(door, 0); //door undefined
 80012a2:	4a63      	ldr	r2, [pc, #396]	; (8001430 <parsePXN+0x228>)
 80012a4:	f892 9000 	ldrb.w	r9, [r2]
	type = RxDataPXN[0];
 80012a8:	f89b 2000 	ldrb.w	r2, [fp]
 80012ac:	803a      	strh	r2, [r7, #0]
	FL = bitRead(Byte1, 0);//Byte1 undefined
 80012ae:	4f61      	ldr	r7, [pc, #388]	; (8001434 <parsePXN+0x22c>)
 80012b0:	f00a 0203 	and.w	r2, sl, #3
 80012b4:	603a      	str	r2, [r7, #0]
	DL = bitRead(door, 0); //door undefined
 80012b6:	9200      	str	r2, [sp, #0]
 80012b8:	4a5f      	ldr	r2, [pc, #380]	; (8001438 <parsePXN+0x230>)
	LB = bitRead(Byte0, 4);//Byte0 undefined
 80012ba:	4f60      	ldr	r7, [pc, #384]	; (800143c <parsePXN+0x234>)
 80012bc:	f009 0803 	and.w	r8, r9, #3
	DL = bitRead(door, 0); //door undefined
 80012c0:	f8c2 8000 	str.w	r8, [r2]
	LB = bitRead(Byte0, 4);//Byte0 undefined
 80012c4:	f3c6 1201 	ubfx	r2, r6, #4, #2
 80012c8:	603a      	str	r2, [r7, #0]
	HB = bitRead(Byte0, 6);//Byte0 undefined
 80012ca:	4f5d      	ldr	r7, [pc, #372]	; (8001440 <parsePXN+0x238>)
 80012cc:	9201      	str	r2, [sp, #4]
 80012ce:	09b2      	lsrs	r2, r6, #6
 80012d0:	603a      	str	r2, [r7, #0]
	value = (RxDataPXN[3] << 8) ^ RxDataPXN[4];
 80012d2:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
	HB = bitRead(Byte0, 6);//Byte0 undefined
 80012d6:	9203      	str	r2, [sp, #12]
	data1 = bitRead(Byte1, 6); //Byte1 undefined
 80012d8:	4a5a      	ldr	r2, [pc, #360]	; (8001444 <parsePXN+0x23c>)
	value = (RxDataPXN[3] << 8) ^ RxDataPXN[4];
 80012da:	6008      	str	r0, [r1, #0]
	data1 = bitRead(Byte1, 6); //Byte1 undefined
 80012dc:	ea4f 179a 	mov.w	r7, sl, lsr #6
	data2 = bitRead(Byte1, 4); //Byte1 undefined
 80012e0:	4959      	ldr	r1, [pc, #356]	; (8001448 <parsePXN+0x240>)
	data1 = bitRead(Byte1, 6); //Byte1 undefined
 80012e2:	6017      	str	r7, [r2, #0]
	data2 = bitRead(Byte1, 4); //Byte1 undefined
 80012e4:	f3ca 1201 	ubfx	r2, sl, #4, #2
 80012e8:	9202      	str	r2, [sp, #8]
 80012ea:	600a      	str	r2, [r1, #0]
	if(code == 0) //steering
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d093      	beq.n	8001218 <parsePXN+0x10>
	else if(code == 1280) //pedal
 80012f0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
	  	Pedal = value;
 80012f4:	bf04      	itt	eq
 80012f6:	4b55      	ldreq	r3, [pc, #340]	; (800144c <parsePXN+0x244>)
 80012f8:	6018      	streq	r0, [r3, #0]
	if(RxDataPXN[2] == 0x3B && RxDataPXN[4] == 0x01)
 80012fa:	2c3b      	cmp	r4, #59	; 0x3b
 80012fc:	d1a7      	bne.n	800124e <parsePXN+0x46>
 80012fe:	2d01      	cmp	r5, #1
 8001300:	d1b1      	bne.n	8001266 <parsePXN+0x5e>
		if (FL == 0x00)
 8001302:	9b00      	ldr	r3, [sp, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d158      	bne.n	80013ba <parsePXN+0x1b2>
			bitSet(Byte1, 1, 0);
 8001308:	4a45      	ldr	r2, [pc, #276]	; (8001420 <parsePXN+0x218>)
 800130a:	f02a 0302 	bic.w	r3, sl, #2
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	7013      	strb	r3, [r2, #0]
 8001314:	e7a7      	b.n	8001266 <parsePXN+0x5e>
	else if(RxDataPXN[2] == 0x3A && RxDataPXN[4] == 0x01)
 8001316:	2d01      	cmp	r5, #1
 8001318:	d1a5      	bne.n	8001266 <parsePXN+0x5e>
		if (DL == 0x02)
 800131a:	f1b8 0f02 	cmp.w	r8, #2
 800131e:	d06e      	beq.n	80013fe <parsePXN+0x1f6>
		else if (DL == 0x00) 
 8001320:	f1b8 0f00 	cmp.w	r8, #0
 8001324:	d19f      	bne.n	8001266 <parsePXN+0x5e>
			bitSet(door, 1, 1);
 8001326:	4a42      	ldr	r2, [pc, #264]	; (8001430 <parsePXN+0x228>)
			bitSet(door, 0, 0);
 8001328:	f029 0301 	bic.w	r3, r9, #1
			bitSet(door, 1, 1);
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	7013      	strb	r3, [r2, #0]
 8001332:	e798      	b.n	8001266 <parsePXN+0x5e>
	else if(RxDataPXN[2] == 0x33 && RxDataPXN[4] == 0x01)
 8001334:	2d01      	cmp	r5, #1
 8001336:	d196      	bne.n	8001266 <parsePXN+0x5e>
		if((LB == 0x01 && HB == 0x00) || (LB == 0x02 && HB == 0x00) || (LB == 0x03 && HB == 0x00))
 8001338:	9b01      	ldr	r3, [sp, #4]
 800133a:	3b01      	subs	r3, #1
 800133c:	2b02      	cmp	r3, #2
 800133e:	d82a      	bhi.n	8001396 <parsePXN+0x18e>
 8001340:	9b03      	ldr	r3, [sp, #12]
 8001342:	bb43      	cbnz	r3, 8001396 <parsePXN+0x18e>
			bitSet(Byte0, 7, 0);
 8001344:	4b37      	ldr	r3, [pc, #220]	; (8001424 <parsePXN+0x21c>)
 8001346:	f006 064f 	and.w	r6, r6, #79	; 0x4f
 800134a:	f046 0640 	orr.w	r6, r6, #64	; 0x40
 800134e:	701e      	strb	r6, [r3, #0]
 8001350:	e789      	b.n	8001266 <parsePXN+0x5e>
	else if(RxDataPXN[2] == 0x02 && RxDataPXN[4] == 0xFF)
 8001352:	2dff      	cmp	r5, #255	; 0xff
 8001354:	d187      	bne.n	8001266 <parsePXN+0x5e>
		if(data1 == 0x00 || (data1 == 0x01  && data2 == 0x01))
 8001356:	2f00      	cmp	r7, #0
 8001358:	d041      	beq.n	80013de <parsePXN+0x1d6>
 800135a:	2f01      	cmp	r7, #1
 800135c:	d03c      	beq.n	80013d8 <parsePXN+0x1d0>
			bitSet(Byte1, 7, 0);
 800135e:	4a30      	ldr	r2, [pc, #192]	; (8001420 <parsePXN+0x218>)
 8001360:	f00a 033f 	and.w	r3, sl, #63	; 0x3f
 8001364:	7013      	strb	r3, [r2, #0]
 8001366:	e77e      	b.n	8001266 <parsePXN+0x5e>
	else if(RxDataPXN[2] == 0x34 && RxDataPXN[4] == 0x01)
 8001368:	2c34      	cmp	r4, #52	; 0x34
 800136a:	f47f af7c 	bne.w	8001266 <parsePXN+0x5e>
 800136e:	2d01      	cmp	r5, #1
 8001370:	f47f af79 	bne.w	8001266 <parsePXN+0x5e>
		if(data1 == 0x00  || data2 == 0x00)
 8001374:	b34f      	cbz	r7, 80013ca <parsePXN+0x1c2>
 8001376:	9b02      	ldr	r3, [sp, #8]
 8001378:	b33b      	cbz	r3, 80013ca <parsePXN+0x1c2>
			bitSet(Byte1, 7, 0);
 800137a:	4a29      	ldr	r2, [pc, #164]	; (8001420 <parsePXN+0x218>)
 800137c:	f00a 030f 	and.w	r3, sl, #15
 8001380:	7013      	strb	r3, [r2, #0]
 8001382:	e770      	b.n	8001266 <parsePXN+0x5e>
		if(data2 == 0x00 || (data1 == 0x01  && data2 == 0x01))
 8001384:	9b02      	ldr	r3, [sp, #8]
 8001386:	b39b      	cbz	r3, 80013f0 <parsePXN+0x1e8>
 8001388:	2f01      	cmp	r7, #1
 800138a:	d02f      	beq.n	80013ec <parsePXN+0x1e4>
			bitSet(Byte1, 5, 0);
 800138c:	4a24      	ldr	r2, [pc, #144]	; (8001420 <parsePXN+0x218>)
 800138e:	f02a 0330 	bic.w	r3, sl, #48	; 0x30
 8001392:	7013      	strb	r3, [r2, #0]
 8001394:	e767      	b.n	8001266 <parsePXN+0x5e>
		else if ((LB == 0x00 && HB == 0x01) || (LB == 0x00 && HB == 0x02) || (LB == 0x00 && HB == 0x03))
 8001396:	9b01      	ldr	r3, [sp, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	f47f af64 	bne.w	8001266 <parsePXN+0x5e>
 800139e:	9b03      	ldr	r3, [sp, #12]
 80013a0:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80013a4:	f1ba 0f02 	cmp.w	sl, #2
 80013a8:	f63f af5d 	bhi.w	8001266 <parsePXN+0x5e>
			bitSet(Byte0, 7, 0);
 80013ac:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <parsePXN+0x21c>)
 80013ae:	f006 061f 	and.w	r6, r6, #31
 80013b2:	f046 0610 	orr.w	r6, r6, #16
 80013b6:	701e      	strb	r6, [r3, #0]
 80013b8:	e755      	b.n	8001266 <parsePXN+0x5e>
		else if (FL == 0x01) 
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	f47f af53 	bne.w	8001266 <parsePXN+0x5e>
			bitSet(Byte1, 1, 0);
 80013c0:	4a17      	ldr	r2, [pc, #92]	; (8001420 <parsePXN+0x218>)
 80013c2:	f02a 0303 	bic.w	r3, sl, #3
 80013c6:	7013      	strb	r3, [r2, #0]
 80013c8:	e74d      	b.n	8001266 <parsePXN+0x5e>
			bitSet(Byte1, 7, 0);
 80013ca:	4a15      	ldr	r2, [pc, #84]	; (8001420 <parsePXN+0x218>)
 80013cc:	f00a 035f 	and.w	r3, sl, #95	; 0x5f
 80013d0:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80013d4:	7013      	strb	r3, [r2, #0]
 80013d6:	e746      	b.n	8001266 <parsePXN+0x5e>
		if(data1 == 0x00 || (data1 == 0x01  && data2 == 0x01))
 80013d8:	9b02      	ldr	r3, [sp, #8]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d1bf      	bne.n	800135e <parsePXN+0x156>
			bitSet(Byte1, 7, 0);
 80013de:	4a10      	ldr	r2, [pc, #64]	; (8001420 <parsePXN+0x218>)
 80013e0:	f00a 034f 	and.w	r3, sl, #79	; 0x4f
 80013e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013e8:	7013      	strb	r3, [r2, #0]
 80013ea:	e73c      	b.n	8001266 <parsePXN+0x5e>
		if(data2 == 0x00 || (data1 == 0x01  && data2 == 0x01))
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d1cd      	bne.n	800138c <parsePXN+0x184>
			bitSet(Byte1, 7, 0);
 80013f0:	4a0b      	ldr	r2, [pc, #44]	; (8001420 <parsePXN+0x218>)
 80013f2:	f00a 031f 	and.w	r3, sl, #31
 80013f6:	f043 0310 	orr.w	r3, r3, #16
 80013fa:	7013      	strb	r3, [r2, #0]
 80013fc:	e733      	b.n	8001266 <parsePXN+0x5e>
			bitSet(door, 1, 0);
 80013fe:	4a0c      	ldr	r2, [pc, #48]	; (8001430 <parsePXN+0x228>)
 8001400:	f029 0303 	bic.w	r3, r9, #3
 8001404:	7013      	strb	r3, [r2, #0]
 8001406:	e72e      	b.n	8001266 <parsePXN+0x5e>
 8001408:	43070000 	.word	0x43070000
 800140c:	200007a8 	.word	0x200007a8
 8001410:	20000528 	.word	0x20000528
 8001414:	2000052c 	.word	0x2000052c
 8001418:	20000618 	.word	0x20000618
 800141c:	20000730 	.word	0x20000730
 8001420:	20000001 	.word	0x20000001
 8001424:	20000000 	.word	0x20000000
 8001428:	20000634 	.word	0x20000634
 800142c:	200007a4 	.word	0x200007a4
 8001430:	20000016 	.word	0x20000016
 8001434:	200004bc 	.word	0x200004bc
 8001438:	200004b8 	.word	0x200004b8
 800143c:	200004c4 	.word	0x200004c4
 8001440:	200004c0 	.word	0x200004c0
 8001444:	20000638 	.word	0x20000638
 8001448:	2000063c 	.word	0x2000063c
 800144c:	200004cc 	.word	0x200004cc
 8001450:	200004e8 	.word	0x200004e8

08001454 <canRcvPXN>:
*/
/* USER CODE END Header_canRcvPXN */
void canRcvPXN(void const * argument)
{
  /* USER CODE BEGIN canRcvPXN */
  osThreadSuspend(parsePXNTaskHandle);
 8001454:	4e0c      	ldr	r6, [pc, #48]	; (8001488 <canRcvPXN+0x34>)
 8001456:	4c0d      	ldr	r4, [pc, #52]	; (800148c <canRcvPXN+0x38>)
 8001458:	6830      	ldr	r0, [r6, #0]
 800145a:	4d0d      	ldr	r5, [pc, #52]	; (8001490 <canRcvPXN+0x3c>)
{
 800145c:	b580      	push	{r7, lr}
  osThreadSuspend(parsePXNTaskHandle);
 800145e:	f002 ff91 	bl	8004384 <osThreadSuspend>
	  if (CAN_State2 == HAL_OK)
	  {
	  		if(RxHeaderPXN.StdId == 0x100)
	  		{
	  			osThreadResume(parsePXNTaskHandle);
	  			HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8001462:	4f0c      	ldr	r7, [pc, #48]	; (8001494 <canRcvPXN+0x40>)
	  if (CAN_State2 == HAL_OK)
 8001464:	7823      	ldrb	r3, [r4, #0]
 8001466:	b95b      	cbnz	r3, 8001480 <canRcvPXN+0x2c>
	  		if(RxHeaderPXN.StdId == 0x100)
 8001468:	682b      	ldr	r3, [r5, #0]
 800146a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800146e:	d107      	bne.n	8001480 <canRcvPXN+0x2c>
	  			osThreadResume(parsePXNTaskHandle);
 8001470:	6830      	ldr	r0, [r6, #0]
 8001472:	f002 ff8d 	bl	8004390 <osThreadResume>
	  			HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8001476:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800147a:	4638      	mov	r0, r7
 800147c:	f001 feda 	bl	8003234 <HAL_GPIO_TogglePin>
	  		}

	  }
    osDelay(1);
 8001480:	2001      	movs	r0, #1
 8001482:	f002 ff77 	bl	8004374 <osDelay>
	  if (CAN_State2 == HAL_OK)
 8001486:	e7ed      	b.n	8001464 <canRcvPXN+0x10>
 8001488:	20000730 	.word	0x20000730
 800148c:	200004b5 	.word	0x200004b5
 8001490:	2000050c 	.word	0x2000050c
 8001494:	40020c00 	.word	0x40020c00

08001498 <ackerman_func>:
{
 8001498:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	  vehicle_speed = (vehicle_speed * (2*3.14))/60; // in rad/s
 800149c:	f20f 2998 	addw	r9, pc, #664	; 0x298
 80014a0:	e9d9 8900 	ldrd	r8, r9, [r9]
{
 80014a4:	ed2d 8b08 	vpush	{d8-d11}
 80014a8:	f8df b294 	ldr.w	fp, [pc, #660]	; 8001740 <ackerman_func+0x2a8>
 80014ac:	f8df a294 	ldr.w	sl, [pc, #660]	; 8001744 <ackerman_func+0x2ac>
	  vehicle_speed = vehicle_speed * wheels_radius; // (m/s)
 80014b0:	ed9f ba89 	vldr	s22, [pc, #548]	; 80016d8 <ackerman_func+0x240>
 80014b4:	e050      	b.n	8001558 <ackerman_func+0xc0>
		  if(SteeringWheelInt == 0)
 80014b6:	4b89      	ldr	r3, [pc, #548]	; (80016dc <ackerman_func+0x244>)
 80014b8:	6818      	ldr	r0, [r3, #0]
 80014ba:	2800      	cmp	r0, #0
 80014bc:	f040 808c 	bne.w	80015d8 <ackerman_func+0x140>
	  angular_speed1 = wheel_speed1 / wheels_radius; //in rad/s
 80014c0:	ee88 9a0b 	vdiv.f32	s18, s16, s22
	  targetDAC1 = (int)(angular_speed1 * 60 / (2*3.14)); //in RPM
 80014c4:	eddf 7a86 	vldr	s15, [pc, #536]	; 80016e0 <ackerman_func+0x248>
 80014c8:	eddf 8a86 	vldr	s17, [pc, #536]	; 80016e4 <ackerman_func+0x24c>
 80014cc:	ee69 7a27 	vmul.f32	s15, s18, s15
 80014d0:	eef0 9a48 	vmov.f32	s19, s16
 80014d4:	ee17 0a90 	vmov	r0, s15
 80014d8:	f7ff f836 	bl	8000548 <__aeabi_f2d>
 80014dc:	4642      	mov	r2, r8
 80014de:	464b      	mov	r3, r9
 80014e0:	f7ff f9b4 	bl	800084c <__aeabi_ddiv>
 80014e4:	f7ff fb38 	bl	8000b58 <__aeabi_d2iz>
 80014e8:	4606      	mov	r6, r0
	  targetDAC1 = (targetDAC1 * 4095 / RPM_th) + 1.35*4095/2.95;
 80014ea:	b280      	uxth	r0, r0
 80014ec:	ebc0 3000 	rsb	r0, r0, r0, lsl #12
 80014f0:	fb90 f0f4 	sdiv	r0, r0, r4
 80014f4:	f7ff f816 	bl	8000524 <__aeabi_i2d>
 80014f8:	a373      	add	r3, pc, #460	; (adr r3, 80016c8 <ackerman_func+0x230>)
 80014fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fe:	f7fe fec5 	bl	800028c <__adddf3>
 8001502:	f7ff fb51 	bl	8000ba8 <__aeabi_d2uiz>
	  targetDAC1 = (int)(angular_speed1 * 60 / (2*3.14)); //in RPM
 8001506:	b2b6      	uxth	r6, r6
	  targetDAC1 = (targetDAC1 * 4095 / RPM_th) + 1.35*4095/2.95;
 8001508:	b287      	uxth	r7, r0
 800150a:	eeb0 aa68 	vmov.f32	s20, s17
 800150e:	eef0 aa49 	vmov.f32	s21, s18
 8001512:	4638      	mov	r0, r7
 8001514:	4635      	mov	r5, r6
	  L_MotorRPM = targetDAC1;
 8001516:	4b74      	ldr	r3, [pc, #464]	; (80016e8 <ackerman_func+0x250>)
 8001518:	801e      	strh	r6, [r3, #0]
	  R_MotorRPM = targetDAC2;
 800151a:	4b74      	ldr	r3, [pc, #464]	; (80016ec <ackerman_func+0x254>)
 800151c:	801d      	strh	r5, [r3, #0]
	  targetDAC1 = (targetDAC1 * 4095 / RPM_th) + 1.35*4095/2.95;
 800151e:	4b74      	ldr	r3, [pc, #464]	; (80016f0 <ackerman_func+0x258>)
 8001520:	801f      	strh	r7, [r3, #0]
	  targetDAC2 = (targetDAC2 * 4095 / RPM_th) + 1.35*4095/2.95;
 8001522:	4b74      	ldr	r3, [pc, #464]	; (80016f4 <ackerman_func+0x25c>)
 8001524:	8018      	strh	r0, [r3, #0]
		  	  angular_speed =0;
 8001526:	4b74      	ldr	r3, [pc, #464]	; (80016f8 <ackerman_func+0x260>)
 8001528:	edc3 8a00 	vstr	s17, [r3]
	  		  turning_radius=0;
 800152c:	4b73      	ldr	r3, [pc, #460]	; (80016fc <ackerman_func+0x264>)
 800152e:	ed83 aa00 	vstr	s20, [r3]
	  		  wheel_speed1 = 0;
 8001532:	4b73      	ldr	r3, [pc, #460]	; (8001700 <ackerman_func+0x268>)
 8001534:	edc3 9a00 	vstr	s19, [r3]
	  		  wheel_speed2 = 0;
 8001538:	4b72      	ldr	r3, [pc, #456]	; (8001704 <ackerman_func+0x26c>)
 800153a:	ed83 8a00 	vstr	s16, [r3]
	  angular_speed1 = wheel_speed1 / wheels_radius; //in rad/s
 800153e:	4b72      	ldr	r3, [pc, #456]	; (8001708 <ackerman_func+0x270>)
 8001540:	ed83 9a00 	vstr	s18, [r3]
	  angular_speed2 = wheel_speed2 / wheels_radius; //in rad/s
 8001544:	4b71      	ldr	r3, [pc, #452]	; (800170c <ackerman_func+0x274>)
 8001546:	edc3 aa00 	vstr	s21, [r3]
	  osThreadSuspend(ackermanHandle);
 800154a:	4b71      	ldr	r3, [pc, #452]	; (8001710 <ackerman_func+0x278>)
 800154c:	6818      	ldr	r0, [r3, #0]
 800154e:	f002 ff19 	bl	8004384 <osThreadSuspend>
    osDelay(1);
 8001552:	2001      	movs	r0, #1
 8001554:	f002 ff0e 	bl	8004374 <osDelay>
	  vehicle_speed = (Pedal * RPM_th / 255); //in RPM
 8001558:	f8db 4000 	ldr.w	r4, [fp]
 800155c:	f8da 3000 	ldr.w	r3, [sl]
 8001560:	4a6c      	ldr	r2, [pc, #432]	; (8001714 <ackerman_func+0x27c>)
 8001562:	fb04 f303 	mul.w	r3, r4, r3
 8001566:	fb82 1203 	smull	r1, r2, r2, r3
 800156a:	441a      	add	r2, r3
 800156c:	17db      	asrs	r3, r3, #31
 800156e:	ebc3 10e2 	rsb	r0, r3, r2, asr #7
	  vehicle_speed = (vehicle_speed * (2*3.14))/60; // in rad/s
 8001572:	ee07 0a90 	vmov	s15, r0
 8001576:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800157a:	ee17 0a90 	vmov	r0, s15
 800157e:	f7fe ffe3 	bl	8000548 <__aeabi_f2d>
 8001582:	4642      	mov	r2, r8
 8001584:	464b      	mov	r3, r9
 8001586:	f7ff f837 	bl	80005f8 <__aeabi_dmul>
 800158a:	4b63      	ldr	r3, [pc, #396]	; (8001718 <ackerman_func+0x280>)
 800158c:	2200      	movs	r2, #0
 800158e:	f7ff f95d 	bl	800084c <__aeabi_ddiv>
 8001592:	f7ff fb29 	bl	8000be8 <__aeabi_d2f>
	  vehicle_speed = vehicle_speed * wheels_radius; // (m/s)
 8001596:	ee07 0a90 	vmov	s15, r0
 800159a:	ee27 8a8b 	vmul.f32	s16, s15, s22
 800159e:	4b5f      	ldr	r3, [pc, #380]	; (800171c <ackerman_func+0x284>)
	  vehicle_speedInt = (int) vehicle_speed;
 80015a0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
	  vehicle_speed = vehicle_speed * wheels_radius; // (m/s)
 80015a4:	ed83 8a00 	vstr	s16, [r3]
	  vehicle_speedInt = (int) vehicle_speed;
 80015a8:	ee17 5a90 	vmov	r5, s15
	  Vehicle_Speed = vehicle_speedInt;
 80015ac:	4b5c      	ldr	r3, [pc, #368]	; (8001720 <ackerman_func+0x288>)
 80015ae:	701d      	strb	r5, [r3, #0]
	  if(vehicle_speedInt == 0)
 80015b0:	2d00      	cmp	r5, #0
 80015b2:	d180      	bne.n	80014b6 <ackerman_func+0x1e>
 80015b4:	eddf 8a4b 	vldr	s17, [pc, #300]	; 80016e4 <ackerman_func+0x24c>
 80015b8:	f240 7051 	movw	r0, #1873	; 0x751
 80015bc:	ee17 6a90 	vmov	r6, s15
 80015c0:	eeb0 aa68 	vmov.f32	s20, s17
 80015c4:	eef0 9a68 	vmov.f32	s19, s17
 80015c8:	eeb0 8a68 	vmov.f32	s16, s17
 80015cc:	eef0 aa68 	vmov.f32	s21, s17
 80015d0:	eeb0 9a68 	vmov.f32	s18, s17
 80015d4:	4607      	mov	r7, r0
 80015d6:	e79e      	b.n	8001516 <ackerman_func+0x7e>
		  		if(SteeringWheelInt < -45)
 80015d8:	f110 0f2d 	cmn.w	r0, #45	; 0x2d
 80015dc:	da58      	bge.n	8001690 <ackerman_func+0x1f8>
		  			SteeringWheelInt = -45;
 80015de:	4a3f      	ldr	r2, [pc, #252]	; (80016dc <ackerman_func+0x244>)
 80015e0:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8001724 <ackerman_func+0x28c>
 80015e4:	f06f 032c 	mvn.w	r3, #44	; 0x2c
 80015e8:	6013      	str	r3, [r2, #0]
		  		angular_speed = vehicle_speed * tanf(SteeringWheelInt*3.14/180)/L;
 80015ea:	ee28 0a00 	vmul.f32	s0, s16, s0
 80015ee:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001728 <ackerman_func+0x290>
		  		wheel_speed1 = angular_speed * (turning_radius+(d/2));
 80015f2:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800172c <ackerman_func+0x294>
	  targetDAC1 = (int)(angular_speed1 * 60 / (2*3.14)); //in RPM
 80015f6:	eddf ba3a 	vldr	s23, [pc, #232]	; 80016e0 <ackerman_func+0x248>
		  		angular_speed = vehicle_speed * tanf(SteeringWheelInt*3.14/180)/L;
 80015fa:	eec0 8a07 	vdiv.f32	s17, s0, s14
		  		turning_radius = vehicle_speed/angular_speed;
 80015fe:	ee88 aa28 	vdiv.f32	s20, s16, s17
		  		wheel_speed1 = angular_speed * (turning_radius+(d/2));
 8001602:	ee7a 9a27 	vadd.f32	s19, s20, s15
		  		wheel_speed2 = angular_speed * (turning_radius-(d/2));
 8001606:	ee7a 7a67 	vsub.f32	s15, s20, s15
		  		wheel_speed1 = angular_speed * (turning_radius+(d/2));
 800160a:	ee69 9aa8 	vmul.f32	s19, s19, s17
		  		wheel_speed2 = angular_speed * (turning_radius-(d/2));
 800160e:	ee27 8aa8 	vmul.f32	s16, s15, s17
	  angular_speed1 = wheel_speed1 / wheels_radius; //in rad/s
 8001612:	ee89 9a8b 	vdiv.f32	s18, s19, s22
	  angular_speed2 = wheel_speed2 / wheels_radius; //in rad/s
 8001616:	eec8 aa0b 	vdiv.f32	s21, s16, s22
	  targetDAC1 = (int)(angular_speed1 * 60 / (2*3.14)); //in RPM
 800161a:	ee69 7a2b 	vmul.f32	s15, s18, s23
 800161e:	ee17 0a90 	vmov	r0, s15
 8001622:	f7fe ff91 	bl	8000548 <__aeabi_f2d>
 8001626:	4642      	mov	r2, r8
 8001628:	464b      	mov	r3, r9
 800162a:	f7ff f90f 	bl	800084c <__aeabi_ddiv>
 800162e:	f7ff fa93 	bl	8000b58 <__aeabi_d2iz>
	  targetDAC2 = (int)(angular_speed2 * 60 / (2*3.14)); //in RPM
 8001632:	ee6a 7aab 	vmul.f32	s15, s21, s23
	  targetDAC1 = (int)(angular_speed1 * 60 / (2*3.14)); //in RPM
 8001636:	4606      	mov	r6, r0
	  targetDAC2 = (int)(angular_speed2 * 60 / (2*3.14)); //in RPM
 8001638:	ee17 0a90 	vmov	r0, s15
 800163c:	f7fe ff84 	bl	8000548 <__aeabi_f2d>
 8001640:	4642      	mov	r2, r8
 8001642:	464b      	mov	r3, r9
 8001644:	f7ff f902 	bl	800084c <__aeabi_ddiv>
 8001648:	f7ff fa86 	bl	8000b58 <__aeabi_d2iz>
 800164c:	4605      	mov	r5, r0
	  targetDAC1 = (targetDAC1 * 4095 / RPM_th) + 1.35*4095/2.95;
 800164e:	b2b0      	uxth	r0, r6
 8001650:	ebc0 3000 	rsb	r0, r0, r0, lsl #12
 8001654:	fb90 f0f4 	sdiv	r0, r0, r4
 8001658:	f7fe ff64 	bl	8000524 <__aeabi_i2d>
 800165c:	a31a      	add	r3, pc, #104	; (adr r3, 80016c8 <ackerman_func+0x230>)
 800165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001662:	f7fe fe13 	bl	800028c <__adddf3>
 8001666:	f7ff fa9f 	bl	8000ba8 <__aeabi_d2uiz>
 800166a:	b287      	uxth	r7, r0
	  targetDAC2 = (targetDAC2 * 4095 / RPM_th) + 1.35*4095/2.95;
 800166c:	b2a8      	uxth	r0, r5
 800166e:	ebc0 3000 	rsb	r0, r0, r0, lsl #12
 8001672:	fb90 f0f4 	sdiv	r0, r0, r4
 8001676:	f7fe ff55 	bl	8000524 <__aeabi_i2d>
 800167a:	a313      	add	r3, pc, #76	; (adr r3, 80016c8 <ackerman_func+0x230>)
 800167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001680:	f7fe fe04 	bl	800028c <__adddf3>
 8001684:	f7ff fa90 	bl	8000ba8 <__aeabi_d2uiz>
	  targetDAC1 = (int)(angular_speed1 * 60 / (2*3.14)); //in RPM
 8001688:	b2b6      	uxth	r6, r6
	  targetDAC2 = (int)(angular_speed2 * 60 / (2*3.14)); //in RPM
 800168a:	b2ad      	uxth	r5, r5
	  targetDAC2 = (targetDAC2 * 4095 / RPM_th) + 1.35*4095/2.95;
 800168c:	b280      	uxth	r0, r0
 800168e:	e742      	b.n	8001516 <ackerman_func+0x7e>
		  		else if(SteeringWheelInt > 45)
 8001690:	282d      	cmp	r0, #45	; 0x2d
 8001692:	dc11      	bgt.n	80016b8 <ackerman_func+0x220>
		  		angular_speed = vehicle_speed * tanf(SteeringWheelInt*3.14/180)/L;
 8001694:	f7fe ff46 	bl	8000524 <__aeabi_i2d>
 8001698:	a30d      	add	r3, pc, #52	; (adr r3, 80016d0 <ackerman_func+0x238>)
 800169a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169e:	f7fe ffab 	bl	80005f8 <__aeabi_dmul>
 80016a2:	4b23      	ldr	r3, [pc, #140]	; (8001730 <ackerman_func+0x298>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	f7ff f8d1 	bl	800084c <__aeabi_ddiv>
 80016aa:	f7ff fa9d 	bl	8000be8 <__aeabi_d2f>
 80016ae:	ee00 0a10 	vmov	s0, r0
 80016b2:	f003 ffe1 	bl	8005678 <tanf>
 80016b6:	e798      	b.n	80015ea <ackerman_func+0x152>
		  			SteeringWheelInt = 45;
 80016b8:	4a08      	ldr	r2, [pc, #32]	; (80016dc <ackerman_func+0x244>)
 80016ba:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8001734 <ackerman_func+0x29c>
 80016be:	232d      	movs	r3, #45	; 0x2d
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	e792      	b.n	80015ea <ackerman_func+0x152>
 80016c4:	f3af 8000 	nop.w
 80016c8:	a4e1a08a 	.word	0xa4e1a08a
 80016cc:	409d47ee 	.word	0x409d47ee
 80016d0:	51eb851f 	.word	0x51eb851f
 80016d4:	40091eb8 	.word	0x40091eb8
 80016d8:	3cf5c28f 	.word	0x3cf5c28f
 80016dc:	2000052c 	.word	0x2000052c
 80016e0:	42700000 	.word	0x42700000
 80016e4:	00000000 	.word	0x00000000
 80016e8:	200004c8 	.word	0x200004c8
 80016ec:	20000014 	.word	0x20000014
 80016f0:	2000001c 	.word	0x2000001c
 80016f4:	2000001e 	.word	0x2000001e
 80016f8:	2000061c 	.word	0x2000061c
 80016fc:	200007a0 	.word	0x200007a0
 8001700:	200007b0 	.word	0x200007b0
 8001704:	200007b4 	.word	0x200007b4
 8001708:	20000620 	.word	0x20000620
 800170c:	20000624 	.word	0x20000624
 8001710:	20000618 	.word	0x20000618
 8001714:	80808081 	.word	0x80808081
 8001718:	404e0000 	.word	0x404e0000
 800171c:	200007ac 	.word	0x200007ac
 8001720:	20000614 	.word	0x20000614
 8001724:	bf7fcbd6 	.word	0xbf7fcbd6
 8001728:	40133333 	.word	0x40133333
 800172c:	3f3ae148 	.word	0x3f3ae148
 8001730:	40668000 	.word	0x40668000
 8001734:	3f7fcbd6 	.word	0x3f7fcbd6
 8001738:	51eb851f 	.word	0x51eb851f
 800173c:	40191eb8 	.word	0x40191eb8
 8001740:	20000010 	.word	0x20000010
 8001744:	200004cc 	.word	0x200004cc

08001748 <SystemClock_Config>:
{
 8001748:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800174a:	2300      	movs	r3, #0
{
 800174c:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800174e:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 8001752:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001756:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800175a:	e9cd 3305 	strd	r3, r3, [sp, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175e:	4921      	ldr	r1, [pc, #132]	; (80017e4 <SystemClock_Config+0x9c>)
 8001760:	9301      	str	r3, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001762:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001764:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001766:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001768:	4a1f      	ldr	r2, [pc, #124]	; (80017e8 <SystemClock_Config+0xa0>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800176a:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800176e:	6408      	str	r0, [r1, #64]	; 0x40
 8001770:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001772:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8001776:	9101      	str	r1, [sp, #4]
 8001778:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800177a:	9302      	str	r3, [sp, #8]
 800177c:	6811      	ldr	r1, [r2, #0]
 800177e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001782:	6011      	str	r1, [r2, #0]
 8001784:	6812      	ldr	r2, [r2, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001786:	930f      	str	r3, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001788:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800178c:	2310      	movs	r3, #16
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800178e:	2101      	movs	r1, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001790:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001792:	e9cd 130b 	strd	r1, r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001796:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001798:	23a8      	movs	r3, #168	; 0xa8
 800179a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800179e:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017a0:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017a2:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017a4:	2202      	movs	r2, #2
 80017a6:	2304      	movs	r3, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017a8:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017aa:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ae:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017b0:	f001 fd4a 	bl	8003248 <HAL_RCC_OscConfig>
 80017b4:	b108      	cbz	r0, 80017ba <SystemClock_Config+0x72>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <SystemClock_Config+0x70>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ba:	220f      	movs	r2, #15
 80017bc:	4603      	mov	r3, r0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017be:	e9cd 2403 	strd	r2, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017c2:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017ca:	a803      	add	r0, sp, #12
 80017cc:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017ce:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017d2:	9207      	str	r2, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017d4:	f001 ff50 	bl	8003678 <HAL_RCC_ClockConfig>
 80017d8:	b108      	cbz	r0, 80017de <SystemClock_Config+0x96>
 80017da:	b672      	cpsid	i
  while (1)
 80017dc:	e7fe      	b.n	80017dc <SystemClock_Config+0x94>
}
 80017de:	b015      	add	sp, #84	; 0x54
 80017e0:	bd30      	pop	{r4, r5, pc}
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40007000 	.word	0x40007000

080017ec <main>:
{
 80017ec:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ee:	2400      	movs	r4, #0
{
 80017f0:	b0ba      	sub	sp, #232	; 0xe8
  HAL_Init();
 80017f2:	f000 fec1 	bl	8002578 <HAL_Init>
  SystemClock_Config();
 80017f6:	f7ff ffa7 	bl	8001748 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fa:	e9cd 4430 	strd	r4, r4, [sp, #192]	; 0xc0
 80017fe:	e9cd 4432 	strd	r4, r4, [sp, #200]	; 0xc8
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001802:	4ba7      	ldr	r3, [pc, #668]	; (8001aa0 <main+0x2b4>)
 8001804:	9401      	str	r4, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001806:	9434      	str	r4, [sp, #208]	; 0xd0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001808:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin|cruisePin1_Pin|highSpeedPin2_Pin
 800180a:	48a6      	ldr	r0, [pc, #664]	; (8001aa4 <main+0x2b8>)
  hcan1.Instance = CAN1;
 800180c:	4da6      	ldr	r5, [pc, #664]	; (8001aa8 <main+0x2bc>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800180e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001812:	631a      	str	r2, [r3, #48]	; 0x30
 8001814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001816:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800181a:	9201      	str	r2, [sp, #4]
 800181c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800181e:	9402      	str	r4, [sp, #8]
 8001820:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001822:	f042 0201 	orr.w	r2, r2, #1
 8001826:	631a      	str	r2, [r3, #48]	; 0x30
 8001828:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800182a:	f002 0201 	and.w	r2, r2, #1
 800182e:	9202      	str	r2, [sp, #8]
 8001830:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001832:	9403      	str	r4, [sp, #12]
 8001834:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001836:	f042 0202 	orr.w	r2, r2, #2
 800183a:	631a      	str	r2, [r3, #48]	; 0x30
 800183c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800183e:	f002 0202 	and.w	r2, r2, #2
 8001842:	9203      	str	r2, [sp, #12]
 8001844:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001846:	9404      	str	r4, [sp, #16]
 8001848:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800184a:	f042 0208 	orr.w	r2, r2, #8
 800184e:	631a      	str	r2, [r3, #48]	; 0x30
 8001850:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001852:	f002 0208 	and.w	r2, r2, #8
 8001856:	9204      	str	r2, [sp, #16]
 8001858:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800185a:	9405      	str	r4, [sp, #20]
 800185c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800185e:	f042 0204 	orr.w	r2, r2, #4
 8001862:	631a      	str	r2, [r3, #48]	; 0x30
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0304 	and.w	r3, r3, #4
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin|cruisePin1_Pin|highSpeedPin2_Pin
 800186a:	f24a 011f 	movw	r1, #40991	; 0xa01f
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800186e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin|cruisePin1_Pin|highSpeedPin2_Pin
 8001870:	4622      	mov	r2, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001872:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin|cruisePin1_Pin|highSpeedPin2_Pin
 8001874:	f001 fcda 	bl	800322c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, highSpeedPin1_Pin|reversePin1_Pin|lowSpeedPin1_Pin, GPIO_PIN_RESET);
 8001878:	4622      	mov	r2, r4
 800187a:	488c      	ldr	r0, [pc, #560]	; (8001aac <main+0x2c0>)
 800187c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001880:	f001 fcd4 	bl	800322c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001884:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|cruisePin1_Pin|highSpeedPin2_Pin
 8001886:	f24a 031f 	movw	r3, #40991	; 0xa01f
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800188a:	4886      	ldr	r0, [pc, #536]	; (8001aa4 <main+0x2b8>)
 800188c:	a930      	add	r1, sp, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188e:	e9cd 3630 	strd	r3, r6, [sp, #192]	; 0xc0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001892:	e9cd 4432 	strd	r4, r4, [sp, #200]	; 0xc8
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001896:	f001 fba7 	bl	8002fe8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = highSpeedPin1_Pin|reversePin1_Pin|lowSpeedPin1_Pin;
 800189a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800189e:	4883      	ldr	r0, [pc, #524]	; (8001aac <main+0x2c0>)
 80018a0:	a930      	add	r1, sp, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a2:	e9cd 3630 	strd	r3, r6, [sp, #192]	; 0xc0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	e9cd 4432 	strd	r4, r4, [sp, #200]	; 0xc8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018aa:	f001 fb9d 	bl	8002fe8 <HAL_GPIO_Init>
  hcan1.Init.Prescaler = 12;
 80018ae:	4b80      	ldr	r3, [pc, #512]	; (8001ab0 <main+0x2c4>)
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80018b0:	61ac      	str	r4, [r5, #24]
  hcan1.Init.Prescaler = 12;
 80018b2:	270c      	movs	r7, #12
 80018b4:	e9c5 3700 	strd	r3, r7, [r5]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80018b8:	f44f 2c20 	mov.w	ip, #655360	; 0xa0000
 80018bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80018c0:	83ac      	strh	r4, [r5, #28]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80018c2:	4628      	mov	r0, r5
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80018c4:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80018c8:	e9c5 c304 	strd	ip, r3, [r5, #16]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80018cc:	f000 fe92 	bl	80025f4 <HAL_CAN_Init>
 80018d0:	b108      	cbz	r0, 80018d6 <main+0xea>
 80018d2:	b672      	cpsid	i
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <main+0xe8>
  canfilterconfig.FilterIdLow = 0x0000;
 80018d6:	e9cd 0030 	strd	r0, r0, [sp, #192]	; 0xc0
  canfilterconfig.FilterMaskIdLow = 0x0000;
 80018da:	e9cd 0032 	strd	r0, r0, [sp, #200]	; 0xc8
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80018de:	9036      	str	r0, [sp, #216]	; 0xd8
  canfilterconfig.SlaveStartFilterBank = 0;
 80018e0:	9039      	str	r0, [sp, #228]	; 0xe4
  canfilterconfig.FilterBank = 10;
 80018e2:	230a      	movs	r3, #10
  if(HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig) != HAL_OK)
 80018e4:	a930      	add	r1, sp, #192	; 0xc0
 80018e6:	4628      	mov	r0, r5
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80018e8:	9638      	str	r6, [sp, #224]	; 0xe0
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 80018ea:	9634      	str	r6, [sp, #208]	; 0xd0
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80018ec:	9637      	str	r6, [sp, #220]	; 0xdc
  canfilterconfig.FilterBank = 10;
 80018ee:	9335      	str	r3, [sp, #212]	; 0xd4
  if(HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig) != HAL_OK)
 80018f0:	f000 ff00 	bl	80026f4 <HAL_CAN_ConfigFilter>
 80018f4:	b108      	cbz	r0, 80018fa <main+0x10e>
 80018f6:	b672      	cpsid	i
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <main+0x10c>
  if(HAL_CAN_Start(&hcan1) != HAL_OK)
 80018fa:	4628      	mov	r0, r5
 80018fc:	f000 ff8a 	bl	8002814 <HAL_CAN_Start>
 8001900:	b108      	cbz	r0, 8001906 <main+0x11a>
 8001902:	b672      	cpsid	i
  while (1)
 8001904:	e7fe      	b.n	8001904 <main+0x118>
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 8001906:	2110      	movs	r1, #16
 8001908:	4628      	mov	r0, r5
 800190a:	f001 f8a3 	bl	8002a54 <HAL_CAN_ActivateNotification>
 800190e:	4603      	mov	r3, r0
 8001910:	b108      	cbz	r0, 8001916 <main+0x12a>
 8001912:	b672      	cpsid	i
  while (1)
 8001914:	e7fe      	b.n	8001914 <main+0x128>
  TxHeader2.IDE = CAN_ID_EXT;
 8001916:	f8df e1d8 	ldr.w	lr, [pc, #472]	; 8001af0 <main+0x304>
  TxHeader3.IDE = CAN_ID_EXT;
 800191a:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8001af4 <main+0x308>
  TxHeader6.IDE = CAN_ID_EXT;
 800191e:	4c65      	ldr	r4, [pc, #404]	; (8001ab4 <main+0x2c8>)
  TxHeader7.IDE = CAN_ID_EXT;
 8001920:	4965      	ldr	r1, [pc, #404]	; (8001ab8 <main+0x2cc>)
  TxHeader1.IDE = CAN_ID_EXT;
 8001922:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 8001af8 <main+0x30c>
  TxHeader4.IDE = CAN_ID_EXT;
 8001926:	4e65      	ldr	r6, [pc, #404]	; (8001abc <main+0x2d0>)
  TxHeader5.IDE = CAN_ID_EXT;
 8001928:	4d65      	ldr	r5, [pc, #404]	; (8001ac0 <main+0x2d4>)
  TxHeader1.IDE = CAN_ID_EXT;
 800192a:	2204      	movs	r2, #4
  TxHeader6.RTR = CAN_RTR_DATA;
 800192c:	e9c4 2302 	strd	r2, r3, [r4, #8]
  TxHeader2.RTR = CAN_RTR_DATA;
 8001930:	e9ce 2302 	strd	r2, r3, [lr, #8]
  TxHeader3.RTR = CAN_RTR_DATA;
 8001934:	e9cc 2302 	strd	r2, r3, [ip, #8]
  TxHeader4.RTR = CAN_RTR_DATA;
 8001938:	e9c6 2302 	strd	r2, r3, [r6, #8]
  TxHeader5.RTR = CAN_RTR_DATA;
 800193c:	e9c5 2302 	strd	r2, r3, [r5, #8]
  TxHeader7.RTR = CAN_RTR_DATA;
 8001940:	e9c1 2302 	strd	r2, r3, [r1, #8]
  TxHeader1.RTR = CAN_RTR_DATA;
 8001944:	e9c8 2002 	strd	r2, r0, [r8, #8]
  TxHeader1.DLC = 8;
 8001948:	2208      	movs	r2, #8
  TxHeader2.DLC = 8;
 800194a:	f8ce 2010 	str.w	r2, [lr, #16]
  TxHeader3.DLC = 8;
 800194e:	f8cc 2010 	str.w	r2, [ip, #16]
  TxHeader6.DLC = 8;
 8001952:	6122      	str	r2, [r4, #16]
  TxHeader7.DLC = 8;
 8001954:	610a      	str	r2, [r1, #16]
  TxHeader1.DLC = 8;
 8001956:	f8c8 2010 	str.w	r2, [r8, #16]
  TxHeader4.DLC = 8;
 800195a:	6132      	str	r2, [r6, #16]
  TxHeader5.DLC = 8;
 800195c:	612a      	str	r2, [r5, #16]
  TxHeader1.ExtId = 0xCF003FE; //Left Motor Voltage 1
 800195e:	4a59      	ldr	r2, [pc, #356]	; (8001ac4 <main+0x2d8>)
 8001960:	f8c8 2004 	str.w	r2, [r8, #4]
  TxHeader2.ExtId = 0xCF004FE; //Left Motor Voltage 2
 8001964:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001968:	f8ce 2004 	str.w	r2, [lr, #4]
  TxHeader3.ExtId = 0xCFEDFFE; //Right Motor Voltage 1
 800196c:	f502 226d 	add.w	r2, r2, #970752	; 0xed000
 8001970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001974:	f8cc 2004 	str.w	r2, [ip, #4]
  TxHeader4.ExtId = 0xCFEBEFE; //Right Motor Voltage 2
 8001978:	f5a2 5204 	sub.w	r2, r2, #8448	; 0x2100
 800197c:	6072      	str	r2, [r6, #4]
  TxHeader5.ExtId = 0x18FE401E; //Low Voltage PXN
 800197e:	4a52      	ldr	r2, [pc, #328]	; (8001ac8 <main+0x2dc>)
 8001980:	606a      	str	r2, [r5, #4]
  TxHeader6.ExtId = 0x18FE4EEC; //Low Voltage PXN 2
 8001982:	f602 62ce 	addw	r2, r2, #3790	; 0xece
  huart3.Instance = USART3;
 8001986:	4851      	ldr	r0, [pc, #324]	; (8001acc <main+0x2e0>)
  TxHeader6.ExtId = 0x18FE4EEC; //Low Voltage PXN 2
 8001988:	6062      	str	r2, [r4, #4]
  TxHeader7.ExtId = 0x98F001FE; //Low Voltage PXN 3
 800198a:	4a51      	ldr	r2, [pc, #324]	; (8001ad0 <main+0x2e4>)
  huart3.Init.BaudRate = 115200;
 800198c:	4c51      	ldr	r4, [pc, #324]	; (8001ad4 <main+0x2e8>)
  TxHeader7.ExtId = 0x98F001FE; //Low Voltage PXN 3
 800198e:	604a      	str	r2, [r1, #4]
  huart3.Init.BaudRate = 115200;
 8001990:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001994:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.BaudRate = 115200;
 8001998:	e9c0 4200 	strd	r4, r2, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800199c:	e9c0 3704 	strd	r3, r7, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a0:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019a4:	f002 f9f0 	bl	8003d88 <HAL_UART_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	b108      	cbz	r0, 80019b0 <main+0x1c4>
 80019ac:	b672      	cpsid	i
  while (1)
 80019ae:	e7fe      	b.n	80019ae <main+0x1c2>
  hdac.Instance = DAC;
 80019b0:	4c49      	ldr	r4, [pc, #292]	; (8001ad8 <main+0x2ec>)
 80019b2:	4a4a      	ldr	r2, [pc, #296]	; (8001adc <main+0x2f0>)
 80019b4:	6022      	str	r2, [r4, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80019b6:	4620      	mov	r0, r4
  DAC_ChannelConfTypeDef sConfig = {0};
 80019b8:	e9cd 3330 	strd	r3, r3, [sp, #192]	; 0xc0
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80019bc:	f001 f9fc 	bl	8002db8 <HAL_DAC_Init>
 80019c0:	b108      	cbz	r0, 80019c6 <main+0x1da>
 80019c2:	b672      	cpsid	i
  while (1)
 80019c4:	e7fe      	b.n	80019c4 <main+0x1d8>
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80019c6:	e9cd 0030 	strd	r0, r0, [sp, #192]	; 0xc0
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80019ca:	4602      	mov	r2, r0
 80019cc:	a930      	add	r1, sp, #192	; 0xc0
 80019ce:	4620      	mov	r0, r4
 80019d0:	f001 fa86 	bl	8002ee0 <HAL_DAC_ConfigChannel>
 80019d4:	b108      	cbz	r0, 80019da <main+0x1ee>
 80019d6:	b672      	cpsid	i
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <main+0x1ec>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80019da:	2210      	movs	r2, #16
 80019dc:	a930      	add	r1, sp, #192	; 0xc0
 80019de:	4620      	mov	r0, r4
 80019e0:	f001 fa7e 	bl	8002ee0 <HAL_DAC_ConfigChannel>
 80019e4:	4603      	mov	r3, r0
 80019e6:	b108      	cbz	r0, 80019ec <main+0x200>
 80019e8:	b672      	cpsid	i
  while (1)
 80019ea:	e7fe      	b.n	80019ea <main+0x1fe>
  htim2.Instance = TIM2;
 80019ec:	4c3c      	ldr	r4, [pc, #240]	; (8001ae0 <main+0x2f4>)
  htim2.Init.Period = 1000000;
 80019ee:	4a3d      	ldr	r2, [pc, #244]	; (8001ae4 <main+0x2f8>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f0:	9029      	str	r0, [sp, #164]	; 0xa4
  htim2.Instance = TIM2;
 80019f2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019f6:	e9cd 0030 	strd	r0, r0, [sp, #192]	; 0xc0
 80019fa:	e9cd 0032 	strd	r0, r0, [sp, #200]	; 0xc8
  htim2.Instance = TIM2;
 80019fe:	6021      	str	r1, [r4, #0]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a00:	4620      	mov	r0, r4
  htim2.Init.Prescaler = 168-1;
 8001a02:	21a7      	movs	r1, #167	; 0xa7
  htim2.Init.Period = 1000000;
 8001a04:	e9c4 3202 	strd	r3, r2, [r4, #8]
  htim2.Init.Prescaler = 168-1;
 8001a08:	6061      	str	r1, [r4, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a0a:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0c:	61a3      	str	r3, [r4, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a0e:	932a      	str	r3, [sp, #168]	; 0xa8
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a10:	f001 ff12 	bl	8003838 <HAL_TIM_Base_Init>
 8001a14:	b108      	cbz	r0, 8001a1a <main+0x22e>
 8001a16:	b672      	cpsid	i
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <main+0x22c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a1e:	a930      	add	r1, sp, #192	; 0xc0
 8001a20:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a22:	9330      	str	r3, [sp, #192]	; 0xc0
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a24:	f002 f80a 	bl	8003a3c <HAL_TIM_ConfigClockSource>
 8001a28:	b108      	cbz	r0, 8001a2e <main+0x242>
 8001a2a:	b672      	cpsid	i
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <main+0x240>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a2e:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a30:	482b      	ldr	r0, [pc, #172]	; (8001ae0 <main+0x2f4>)
 8001a32:	a929      	add	r1, sp, #164	; 0xa4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a34:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a38:	f002 f962 	bl	8003d00 <HAL_TIMEx_MasterConfigSynchronization>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	b108      	cbz	r0, 8001a44 <main+0x258>
 8001a40:	b672      	cpsid	i
  while (1)
 8001a42:	e7fe      	b.n	8001a42 <main+0x256>
  hcan2.Instance = CAN2;
 8001a44:	4c28      	ldr	r4, [pc, #160]	; (8001ae8 <main+0x2fc>)
  hcan2.Init.Prescaler = 12;
 8001a46:	4929      	ldr	r1, [pc, #164]	; (8001aec <main+0x300>)
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001a48:	61a3      	str	r3, [r4, #24]
  hcan2.Init.Prescaler = 12;
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	e9c4 1200 	strd	r1, r2, [r4]
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
 8001a50:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a54:	e9c4 0002 	strd	r0, r0, [r4, #8]
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
 8001a58:	6122      	str	r2, [r4, #16]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001a5a:	4620      	mov	r0, r4
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001a5c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001a60:	83a3      	strh	r3, [r4, #28]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001a62:	6162      	str	r2, [r4, #20]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001a64:	f000 fdc6 	bl	80025f4 <HAL_CAN_Init>
 8001a68:	b108      	cbz	r0, 8001a6e <main+0x282>
 8001a6a:	b672      	cpsid	i
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <main+0x280>
  canfilterconfig2.FilterActivation = CAN_FILTER_ENABLE;
 8001a6e:	2301      	movs	r3, #1
  canfilterconfig2.FilterIdLow = 0x0000;
 8001a70:	e9cd 0030 	strd	r0, r0, [sp, #192]	; 0xc0
  canfilterconfig2.FilterMaskIdLow = 0x0000;
 8001a74:	e9cd 0032 	strd	r0, r0, [sp, #200]	; 0xc8
  canfilterconfig2.FilterActivation = CAN_FILTER_ENABLE;
 8001a78:	9338      	str	r3, [sp, #224]	; 0xe0
  canfilterconfig2.FilterFIFOAssignment = CAN_RX_FIFO1;
 8001a7a:	9334      	str	r3, [sp, #208]	; 0xd0
  canfilterconfig2.FilterScale = CAN_FILTERSCALE_32BIT;
 8001a7c:	9337      	str	r3, [sp, #220]	; 0xdc
  canfilterconfig2.FilterMode = CAN_FILTERMODE_IDMASK;
 8001a7e:	9036      	str	r0, [sp, #216]	; 0xd8
  canfilterconfig2.SlaveStartFilterBank = 0;
 8001a80:	9039      	str	r0, [sp, #228]	; 0xe4
  canfilterconfig2.FilterBank = 10;
 8001a82:	230a      	movs	r3, #10
    if(HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig2) != HAL_OK)
 8001a84:	a930      	add	r1, sp, #192	; 0xc0
 8001a86:	4620      	mov	r0, r4
  canfilterconfig2.FilterBank = 10;
 8001a88:	9335      	str	r3, [sp, #212]	; 0xd4
    if(HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig2) != HAL_OK)
 8001a8a:	f000 fe33 	bl	80026f4 <HAL_CAN_ConfigFilter>
 8001a8e:	b108      	cbz	r0, 8001a94 <main+0x2a8>
 8001a90:	b672      	cpsid	i
  while (1)
 8001a92:	e7fe      	b.n	8001a92 <main+0x2a6>
    if(HAL_CAN_Start(&hcan2) != HAL_OK)
 8001a94:	4620      	mov	r0, r4
 8001a96:	f000 febd 	bl	8002814 <HAL_CAN_Start>
 8001a9a:	b378      	cbz	r0, 8001afc <main+0x310>
 8001a9c:	b672      	cpsid	i
  while (1)
 8001a9e:	e7fe      	b.n	8001a9e <main+0x2b2>
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40020c00 	.word	0x40020c00
 8001aa8:	20000640 	.word	0x20000640
 8001aac:	40020800 	.word	0x40020800
 8001ab0:	40006400 	.word	0x40006400
 8001ab4:	200005e0 	.word	0x200005e0
 8001ab8:	200005f8 	.word	0x200005f8
 8001abc:	200005b0 	.word	0x200005b0
 8001ac0:	200005c8 	.word	0x200005c8
 8001ac4:	0cf003fe 	.word	0x0cf003fe
 8001ac8:	18fe401e 	.word	0x18fe401e
 8001acc:	200006ec 	.word	0x200006ec
 8001ad0:	98f001fe 	.word	0x98f001fe
 8001ad4:	40004800 	.word	0x40004800
 8001ad8:	20000690 	.word	0x20000690
 8001adc:	40007400 	.word	0x40007400
 8001ae0:	200006a4 	.word	0x200006a4
 8001ae4:	000f4240 	.word	0x000f4240
 8001ae8:	20000668 	.word	0x20000668
 8001aec:	40006800 	.word	0x40006800
 8001af0:	20000580 	.word	0x20000580
 8001af4:	20000598 	.word	0x20000598
 8001af8:	20000568 	.word	0x20000568
    if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 8001afc:	2110      	movs	r1, #16
 8001afe:	4620      	mov	r0, r4
 8001b00:	f000 ffa8 	bl	8002a54 <HAL_CAN_ActivateNotification>
 8001b04:	4605      	mov	r5, r0
 8001b06:	b108      	cbz	r0, 8001b0c <main+0x320>
 8001b08:	b672      	cpsid	i
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <main+0x31e>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1); //****************************
 8001b0c:	4601      	mov	r1, r0
 8001b0e:	4841      	ldr	r0, [pc, #260]	; (8001c14 <main+0x428>)
  osThreadDef(canTransmit, can_transmit, osPriorityAboveNormal, 0, 128);
 8001b10:	4c41      	ldr	r4, [pc, #260]	; (8001c18 <main+0x42c>)
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1); //****************************
 8001b12:	f001 f967 	bl	8002de4 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001b16:	2110      	movs	r1, #16
 8001b18:	483e      	ldr	r0, [pc, #248]	; (8001c14 <main+0x428>)
 8001b1a:	f001 f963 	bl	8002de4 <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1,DAC_ALIGN_12B_R, (setDAC1));
 8001b1e:	4b3f      	ldr	r3, [pc, #252]	; (8001c1c <main+0x430>)
 8001b20:	483c      	ldr	r0, [pc, #240]	; (8001c14 <main+0x428>)
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	462a      	mov	r2, r5
 8001b26:	4629      	mov	r1, r5
 8001b28:	f001 f98c 	bl	8002e44 <HAL_DAC_SetValue>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2,DAC_ALIGN_12B_R, (setDAC2));
 8001b2c:	4b3c      	ldr	r3, [pc, #240]	; (8001c20 <main+0x434>)
 8001b2e:	4839      	ldr	r0, [pc, #228]	; (8001c14 <main+0x428>)
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	462a      	mov	r2, r5
 8001b34:	2110      	movs	r1, #16
 8001b36:	f001 f985 	bl	8002e44 <HAL_DAC_SetValue>
  HAL_TIM_Base_Start(&htim2);
 8001b3a:	483a      	ldr	r0, [pc, #232]	; (8001c24 <main+0x438>)
 8001b3c:	f001 ff0a 	bl	8003954 <HAL_TIM_Base_Start>
  osThreadDef(canTransmit, can_transmit, osPriorityAboveNormal, 0, 128);
 8001b40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b42:	ae06      	add	r6, sp, #24
 8001b44:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001b46:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001b4a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  canTransmitHandle = osThreadCreate(osThread(canTransmit), NULL);
 8001b4e:	4629      	mov	r1, r5
 8001b50:	a806      	add	r0, sp, #24
 8001b52:	f002 fbdd 	bl	8004310 <osThreadCreate>
 8001b56:	4b34      	ldr	r3, [pc, #208]	; (8001c28 <main+0x43c>)
  osThreadDef(canRcvtask, can_rcv, osPriorityHigh, 0, 128);
 8001b58:	f104 070c 	add.w	r7, r4, #12
  canTransmitHandle = osThreadCreate(osThread(canTransmit), NULL);
 8001b5c:	6018      	str	r0, [r3, #0]
  osThreadDef(canRcvtask, can_rcv, osPriorityHigh, 0, 128);
 8001b5e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001b60:	ae0d      	add	r6, sp, #52	; 0x34
 8001b62:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001b64:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8001b68:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  canRcvtaskHandle = osThreadCreate(osThread(canRcvtask), NULL);
 8001b6c:	4629      	mov	r1, r5
 8001b6e:	a80d      	add	r0, sp, #52	; 0x34
 8001b70:	f002 fbce 	bl	8004310 <osThreadCreate>
 8001b74:	4b2d      	ldr	r3, [pc, #180]	; (8001c2c <main+0x440>)
  osThreadDef(parsePXNTask, parsePXN, osPriorityNormal, 0, 128);
 8001b76:	f104 0728 	add.w	r7, r4, #40	; 0x28
  canRcvtaskHandle = osThreadCreate(osThread(canRcvtask), NULL);
 8001b7a:	6018      	str	r0, [r3, #0]
  osThreadDef(parsePXNTask, parsePXN, osPriorityNormal, 0, 128);
 8001b7c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001b7e:	ae14      	add	r6, sp, #80	; 0x50
 8001b80:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001b82:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8001b86:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  parsePXNTaskHandle = osThreadCreate(osThread(parsePXNTask), NULL);
 8001b8a:	4629      	mov	r1, r5
 8001b8c:	a814      	add	r0, sp, #80	; 0x50
 8001b8e:	f002 fbbf 	bl	8004310 <osThreadCreate>
 8001b92:	4b27      	ldr	r3, [pc, #156]	; (8001c30 <main+0x444>)
  osThreadDef(parseVotolTask, parseSetVotol, osPriorityBelowNormal, 0, 128);
 8001b94:	f104 0744 	add.w	r7, r4, #68	; 0x44
  parsePXNTaskHandle = osThreadCreate(osThread(parsePXNTask), NULL);
 8001b98:	6018      	str	r0, [r3, #0]
  osThreadDef(parseVotolTask, parseSetVotol, osPriorityBelowNormal, 0, 128);
 8001b9a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001b9c:	ae1b      	add	r6, sp, #108	; 0x6c
 8001b9e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001ba0:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8001ba4:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  parseVotolTaskHandle = osThreadCreate(osThread(parseVotolTask), NULL);
 8001ba8:	4629      	mov	r1, r5
 8001baa:	a81b      	add	r0, sp, #108	; 0x6c
 8001bac:	f002 fbb0 	bl	8004310 <osThreadCreate>
 8001bb0:	4b20      	ldr	r3, [pc, #128]	; (8001c34 <main+0x448>)
  osThreadDef(ackerman, ackerman_func, osPriorityAboveNormal, 0, 128);
 8001bb2:	f104 0760 	add.w	r7, r4, #96	; 0x60
  parseVotolTaskHandle = osThreadCreate(osThread(parseVotolTask), NULL);
 8001bb6:	6018      	str	r0, [r3, #0]
  osThreadDef(ackerman, ackerman_func, osPriorityAboveNormal, 0, 128);
 8001bb8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001bba:	ae22      	add	r6, sp, #136	; 0x88
 8001bbc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001bbe:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8001bc2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  ackermanHandle = osThreadCreate(osThread(ackerman), NULL);
 8001bc6:	4629      	mov	r1, r5
 8001bc8:	a822      	add	r0, sp, #136	; 0x88
 8001bca:	f002 fba1 	bl	8004310 <osThreadCreate>
 8001bce:	4b1a      	ldr	r3, [pc, #104]	; (8001c38 <main+0x44c>)
  osThreadDef(throttleVotol, throttleVotolTask, osPriorityRealtime, 0, 128);
 8001bd0:	f104 077c 	add.w	r7, r4, #124	; 0x7c
  ackermanHandle = osThreadCreate(osThread(ackerman), NULL);
 8001bd4:	6018      	str	r0, [r3, #0]
  osThreadDef(throttleVotol, throttleVotolTask, osPriorityRealtime, 0, 128);
 8001bd6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001bd8:	ae29      	add	r6, sp, #164	; 0xa4
 8001bda:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001bdc:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8001be0:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  throttleVotolHandle = osThreadCreate(osThread(throttleVotol), NULL);
 8001be4:	4629      	mov	r1, r5
 8001be6:	a829      	add	r0, sp, #164	; 0xa4
 8001be8:	f002 fb92 	bl	8004310 <osThreadCreate>
 8001bec:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <main+0x450>)
  osThreadDef(can_rcvPXNTask, canRcvPXN, osPriorityRealtime, 0, 128);
 8001bee:	3498      	adds	r4, #152	; 0x98
  throttleVotolHandle = osThreadCreate(osThread(throttleVotol), NULL);
 8001bf0:	6018      	str	r0, [r3, #0]
  osThreadDef(can_rcvPXNTask, canRcvPXN, osPriorityRealtime, 0, 128);
 8001bf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bf4:	ae30      	add	r6, sp, #192	; 0xc0
 8001bf6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001bf8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001bfc:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  can_rcvPXNTaskHandle = osThreadCreate(osThread(can_rcvPXNTask), NULL);
 8001c00:	4629      	mov	r1, r5
 8001c02:	a830      	add	r0, sp, #192	; 0xc0
 8001c04:	f002 fb84 	bl	8004310 <osThreadCreate>
 8001c08:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <main+0x454>)
 8001c0a:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001c0c:	f002 fb7a 	bl	8004304 <osKernelStart>
  while (1)
 8001c10:	e7fe      	b.n	8001c10 <main+0x424>
 8001c12:	bf00      	nop
 8001c14:	20000690 	.word	0x20000690
 8001c18:	0800a998 	.word	0x0800a998
 8001c1c:	20000018 	.word	0x20000018
 8001c20:	2000001a 	.word	0x2000001a
 8001c24:	200006a4 	.word	0x200006a4
 8001c28:	2000062c 	.word	0x2000062c
 8001c2c:	20000628 	.word	0x20000628
 8001c30:	20000730 	.word	0x20000730
 8001c34:	20000734 	.word	0x20000734
 8001c38:	20000618 	.word	0x20000618
 8001c3c:	20000738 	.word	0x20000738
 8001c40:	20000630 	.word	0x20000630

08001c44 <HAL_CAN_RxFifo1MsgPendingCallback>:
{
 8001c44:	b510      	push	{r4, lr}
	CAN_State = HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO1, &RxHeader, RxData);
 8001c46:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <HAL_CAN_RxFifo1MsgPendingCallback+0x24>)
 8001c48:	4a08      	ldr	r2, [pc, #32]	; (8001c6c <HAL_CAN_RxFifo1MsgPendingCallback+0x28>)
 8001c4a:	4809      	ldr	r0, [pc, #36]	; (8001c70 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>)
 8001c4c:	4c09      	ldr	r4, [pc, #36]	; (8001c74 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 8001c4e:	2101      	movs	r1, #1
 8001c50:	f000 fe76 	bl	8002940 <HAL_CAN_GetRxMessage>
	CAN_State2 = HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO1, &RxHeaderPXN, RxDataPXN);
 8001c54:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
	CAN_State = HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO1, &RxHeader, RxData);
 8001c56:	7020      	strb	r0, [r4, #0]
	CAN_State2 = HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO1, &RxHeaderPXN, RxDataPXN);
 8001c58:	4a08      	ldr	r2, [pc, #32]	; (8001c7c <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 8001c5a:	4809      	ldr	r0, [pc, #36]	; (8001c80 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	f000 fe6f 	bl	8002940 <HAL_CAN_GetRxMessage>
 8001c62:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <HAL_CAN_RxFifo1MsgPendingCallback+0x40>)
 8001c64:	7018      	strb	r0, [r3, #0]
}
 8001c66:	bd10      	pop	{r4, pc}
 8001c68:	200004e0 	.word	0x200004e0
 8001c6c:	200004f0 	.word	0x200004f0
 8001c70:	20000640 	.word	0x20000640
 8001c74:	200004b4 	.word	0x200004b4
 8001c78:	200004e8 	.word	0x200004e8
 8001c7c:	2000050c 	.word	0x2000050c
 8001c80:	20000668 	.word	0x20000668
 8001c84:	200004b5 	.word	0x200004b5

08001c88 <MotorData>:
	TxData1[1] = L_MotorVoltage;
 8001c88:	4b46      	ldr	r3, [pc, #280]	; (8001da4 <MotorData+0x11c>)
	TxData1[3] = L_MotorCurrent;
 8001c8a:	4a47      	ldr	r2, [pc, #284]	; (8001da8 <MotorData+0x120>)
	TxData1[1] = L_MotorVoltage;
 8001c8c:	881b      	ldrh	r3, [r3, #0]
	TxData2[1] = L_MotorRPM;
 8001c8e:	4847      	ldr	r0, [pc, #284]	; (8001dac <MotorData+0x124>)
	TxData2[5] = L_TempCoef;
 8001c90:	4947      	ldr	r1, [pc, #284]	; (8001db0 <MotorData+0x128>)
	TxData1[3] = L_MotorCurrent;
 8001c92:	f8b2 c000 	ldrh.w	ip, [r2]
{
 8001c96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TxData1[0] = L_MotorVoltage >> 8;
 8001c9a:	2200      	movs	r2, #0
	TxData2[1] = L_MotorRPM;
 8001c9c:	8806      	ldrh	r6, [r0, #0]
	TxData2[5] = L_TempCoef;
 8001c9e:	880f      	ldrh	r7, [r1, #0]
 8001ca0:	4944      	ldr	r1, [pc, #272]	; (8001db4 <MotorData+0x12c>)
	TxData1[0] = L_MotorVoltage >> 8;
 8001ca2:	0a18      	lsrs	r0, r3, #8
 8001ca4:	f360 0207 	bfi	r2, r0, #0, #8
 8001ca8:	f363 220f 	bfi	r2, r3, #8, #8
 8001cac:	680b      	ldr	r3, [r1, #0]
	TxData1[4] = L_MotorFC >> 24;
 8001cae:	4942      	ldr	r1, [pc, #264]	; (8001db8 <MotorData+0x130>)
 8001cb0:	ba1b      	rev	r3, r3
 8001cb2:	604b      	str	r3, [r1, #4]
	TxData3[1] = R_MotorVoltage;
 8001cb4:	4b41      	ldr	r3, [pc, #260]	; (8001dbc <MotorData+0x134>)
 8001cb6:	881d      	ldrh	r5, [r3, #0]
	TxData4[1] = R_MotorRPM;
 8001cb8:	4b41      	ldr	r3, [pc, #260]	; (8001dc0 <MotorData+0x138>)
 8001cba:	f8b3 e000 	ldrh.w	lr, [r3]
	TxData4[5] = R_TempCoef;
 8001cbe:	4b41      	ldr	r3, [pc, #260]	; (8001dc4 <MotorData+0x13c>)
 8001cc0:	881c      	ldrh	r4, [r3, #0]
	TxData3[3] = R_MotorCurrent;
 8001cc2:	4b41      	ldr	r3, [pc, #260]	; (8001dc8 <MotorData+0x140>)
 8001cc4:	8819      	ldrh	r1, [r3, #0]
	TxData2[6] = L_GearStatus;
 8001cc6:	4b41      	ldr	r3, [pc, #260]	; (8001dcc <MotorData+0x144>)
 8001cc8:	f893 a000 	ldrb.w	sl, [r3]
	TxData2[2] = Vehicle_Speed;
 8001ccc:	4b40      	ldr	r3, [pc, #256]	; (8001dd0 <MotorData+0x148>)
{
 8001cce:	b087      	sub	sp, #28
	TxData2[0] = L_MotorRPM >> 8;
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	9302      	str	r3, [sp, #8]
	TxData4[6] = R_GearStatus;
 8001cd4:	4b3f      	ldr	r3, [pc, #252]	; (8001dd4 <MotorData+0x14c>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	9303      	str	r3, [sp, #12]
	TxData4[2] = R_ControllerTemp;
 8001cda:	4b3f      	ldr	r3, [pc, #252]	; (8001dd8 <MotorData+0x150>)
	TxData4[0] = R_MotorRPM >> 8;
 8001cdc:	7818      	ldrb	r0, [r3, #0]
	TxData2[7] = L_ControllerStatus;
 8001cde:	4b3f      	ldr	r3, [pc, #252]	; (8001ddc <MotorData+0x154>)
	TxData4[0] = R_MotorRPM >> 8;
 8001ce0:	9005      	str	r0, [sp, #20]
 8001ce2:	f893 9000 	ldrb.w	r9, [r3]
	TxData2[3] = L_ExternalTemp;
 8001ce6:	4b3e      	ldr	r3, [pc, #248]	; (8001de0 <MotorData+0x158>)
	TxData2[0] = L_MotorRPM >> 8;
 8001ce8:	7818      	ldrb	r0, [r3, #0]
 8001cea:	4b3e      	ldr	r3, [pc, #248]	; (8001de4 <MotorData+0x15c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	ba1b      	rev	r3, r3
 8001cf0:	9301      	str	r3, [sp, #4]
	TxData4[7] = R_ControllerStatus;
 8001cf2:	4b3d      	ldr	r3, [pc, #244]	; (8001de8 <MotorData+0x160>)
 8001cf4:	f893 8000 	ldrb.w	r8, [r3]
	TxData4[3] = R_ExternalTemp;
 8001cf8:	4b3c      	ldr	r3, [pc, #240]	; (8001dec <MotorData+0x164>)
 8001cfa:	f8cd 8010 	str.w	r8, [sp, #16]
	TxData2[4] = L_TempCoef >> 8;
 8001cfe:	ea4f 2b17 	mov.w	fp, r7, lsr #8
	TxData4[0] = R_MotorRPM >> 8;
 8001d02:	f893 8000 	ldrb.w	r8, [r3]
 8001d06:	2300      	movs	r3, #0
 8001d08:	f36b 0307 	bfi	r3, fp, #0, #8
 8001d0c:	f367 230f 	bfi	r3, r7, #8, #8
 8001d10:	f36a 4317 	bfi	r3, sl, #16, #8
 8001d14:	f369 631f 	bfi	r3, r9, #24, #8
	TxData2[0] = L_MotorRPM >> 8;
 8001d18:	2700      	movs	r7, #0
 8001d1a:	ea4f 2916 	mov.w	r9, r6, lsr #8
 8001d1e:	f369 0707 	bfi	r7, r9, #0, #8
 8001d22:	f366 270f 	bfi	r7, r6, #8, #8
 8001d26:	9e02      	ldr	r6, [sp, #8]
	TxData3[0] = R_MotorVoltage >> 8;
 8001d28:	ea4f 2915 	mov.w	r9, r5, lsr #8
	TxData2[0] = L_MotorRPM >> 8;
 8001d2c:	f366 4717 	bfi	r7, r6, #16, #8
	TxData3[0] = R_MotorVoltage >> 8;
 8001d30:	2600      	movs	r6, #0
 8001d32:	f369 0607 	bfi	r6, r9, #0, #8
 8001d36:	f365 260f 	bfi	r6, r5, #8, #8
	TxData4[4] = R_TempCoef >> 8;
 8001d3a:	ea4f 2914 	mov.w	r9, r4, lsr #8
 8001d3e:	2500      	movs	r5, #0
 8001d40:	f369 0507 	bfi	r5, r9, #0, #8
 8001d44:	f364 250f 	bfi	r5, r4, #8, #8
 8001d48:	9c03      	ldr	r4, [sp, #12]
 8001d4a:	f364 4517 	bfi	r5, r4, #16, #8
 8001d4e:	9c04      	ldr	r4, [sp, #16]
	TxData4[0] = R_MotorRPM >> 8;
 8001d50:	ea4f 291e 	mov.w	r9, lr, lsr #8
 8001d54:	f364 651f 	bfi	r5, r4, #24, #8
 8001d58:	2400      	movs	r4, #0
	TxData2[0] = L_MotorRPM >> 8;
 8001d5a:	f360 671f 	bfi	r7, r0, #24, #8
	TxData4[0] = R_MotorRPM >> 8;
 8001d5e:	f369 0407 	bfi	r4, r9, #0, #8
 8001d62:	9805      	ldr	r0, [sp, #20]
 8001d64:	f36e 240f 	bfi	r4, lr, #8, #8
	TxData1[2] = L_MotorCurrent >> 8;
 8001d68:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
	TxData4[0] = R_MotorRPM >> 8;
 8001d6c:	f360 4417 	bfi	r4, r0, #16, #8
	TxData1[0] = L_MotorVoltage >> 8;
 8001d70:	f36e 4217 	bfi	r2, lr, #16, #8
 8001d74:	4810      	ldr	r0, [pc, #64]	; (8001db8 <MotorData+0x130>)
 8001d76:	f36c 621f 	bfi	r2, ip, #24, #8
 8001d7a:	6002      	str	r2, [r0, #0]
	TxData3[2] = R_MotorCurrent >> 8;
 8001d7c:	0a0a      	lsrs	r2, r1, #8
	TxData3[0] = R_MotorVoltage >> 8;
 8001d7e:	f362 4617 	bfi	r6, r2, #16, #8
	TxData2[0] = L_MotorRPM >> 8;
 8001d82:	4a1b      	ldr	r2, [pc, #108]	; (8001df0 <MotorData+0x168>)
 8001d84:	e9c2 7300 	strd	r7, r3, [r2]
	TxData3[0] = R_MotorVoltage >> 8;
 8001d88:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <MotorData+0x16c>)
 8001d8a:	f361 661f 	bfi	r6, r1, #24, #8
 8001d8e:	601e      	str	r6, [r3, #0]
	TxData3[4] = R_MotorFC >> 24;
 8001d90:	9a01      	ldr	r2, [sp, #4]
 8001d92:	605a      	str	r2, [r3, #4]
	TxData4[0] = R_MotorRPM >> 8;
 8001d94:	4b18      	ldr	r3, [pc, #96]	; (8001df8 <MotorData+0x170>)
 8001d96:	f368 641f 	bfi	r4, r8, #24, #8
 8001d9a:	e9c3 4500 	strd	r4, r5, [r3]
}
 8001d9e:	b007      	add	sp, #28
 8001da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001da4:	2000000c 	.word	0x2000000c
 8001da8:	20000006 	.word	0x20000006
 8001dac:	200004c8 	.word	0x200004c8
 8001db0:	2000000e 	.word	0x2000000e
 8001db4:	20000008 	.word	0x20000008
 8001db8:	20000530 	.word	0x20000530
 8001dbc:	200004dc 	.word	0x200004dc
 8001dc0:	20000014 	.word	0x20000014
 8001dc4:	200004de 	.word	0x200004de
 8001dc8:	200004d4 	.word	0x200004d4
 8001dcc:	20000004 	.word	0x20000004
 8001dd0:	20000614 	.word	0x20000614
 8001dd4:	200004d3 	.word	0x200004d3
 8001dd8:	200004d1 	.word	0x200004d1
 8001ddc:	20000002 	.word	0x20000002
 8001de0:	20000003 	.word	0x20000003
 8001de4:	200004d8 	.word	0x200004d8
 8001de8:	200004d0 	.word	0x200004d0
 8001dec:	200004d2 	.word	0x200004d2
 8001df0:	20000538 	.word	0x20000538
 8001df4:	20000540 	.word	0x20000540
 8001df8:	20000548 	.word	0x20000548

08001dfc <can_transmit>:
{
 8001dfc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001e00:	f8df 9250 	ldr.w	r9, [pc, #592]	; 8002054 <can_transmit+0x258>
 8001e04:	f8df b254 	ldr.w	fp, [pc, #596]	; 800205c <can_transmit+0x260>
 8001e08:	4c86      	ldr	r4, [pc, #536]	; (8002024 <can_transmit+0x228>)
 8001e0a:	4d87      	ldr	r5, [pc, #540]	; (8002028 <can_transmit+0x22c>)
 8001e0c:	4e87      	ldr	r6, [pc, #540]	; (800202c <can_transmit+0x230>)
 8001e0e:	4f88      	ldr	r7, [pc, #544]	; (8002030 <can_transmit+0x234>)
		if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader1, TxData1, &TxMailbox) != HAL_OK)
 8001e10:	f8df 8264 	ldr.w	r8, [pc, #612]	; 8002078 <can_transmit+0x27c>
{
 8001e14:	b089      	sub	sp, #36	; 0x24
 8001e16:	e0c8      	b.n	8001faa <can_transmit+0x1ae>
		HAL_Delay(10);
 8001e18:	200a      	movs	r0, #10
 8001e1a:	f000 fbd9 	bl	80025d0 <HAL_Delay>
		sprintf(transmitBuffer, "CAN ID : %0X, Data : %02X %02X %02X %02X %02X %02X %02X %02X\n", TxHeader1.ExtId, TxData1[0], TxData1[1], TxData1[2], TxData1[3], TxData1[4], TxData1[5], TxData1[6], TxData1[7]);
 8001e1e:	79e3      	ldrb	r3, [r4, #7]
 8001e20:	9306      	str	r3, [sp, #24]
 8001e22:	79a3      	ldrb	r3, [r4, #6]
 8001e24:	9305      	str	r3, [sp, #20]
 8001e26:	7963      	ldrb	r3, [r4, #5]
 8001e28:	9304      	str	r3, [sp, #16]
 8001e2a:	7923      	ldrb	r3, [r4, #4]
 8001e2c:	9303      	str	r3, [sp, #12]
 8001e2e:	78e3      	ldrb	r3, [r4, #3]
 8001e30:	9302      	str	r3, [sp, #8]
 8001e32:	78a3      	ldrb	r3, [r4, #2]
 8001e34:	9301      	str	r3, [sp, #4]
 8001e36:	4a7f      	ldr	r2, [pc, #508]	; (8002034 <can_transmit+0x238>)
 8001e38:	7863      	ldrb	r3, [r4, #1]
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	6852      	ldr	r2, [r2, #4]
 8001e3e:	7823      	ldrb	r3, [r4, #0]
 8001e40:	497d      	ldr	r1, [pc, #500]	; (8002038 <can_transmit+0x23c>)
 8001e42:	487e      	ldr	r0, [pc, #504]	; (800203c <can_transmit+0x240>)
 8001e44:	f005 f8aa 	bl	8006f9c <siprintf>
		HAL_UART_Transmit_IT(&huart3, transmitBuffer, 50);
 8001e48:	497c      	ldr	r1, [pc, #496]	; (800203c <can_transmit+0x240>)
 8001e4a:	487d      	ldr	r0, [pc, #500]	; (8002040 <can_transmit+0x244>)
 8001e4c:	2232      	movs	r2, #50	; 0x32
 8001e4e:	f002 f835 	bl	8003ebc <HAL_UART_Transmit_IT>
		memset(transmitBuffer, '\0', sizeof(transmitBuffer));
 8001e52:	4651      	mov	r1, sl
 8001e54:	2264      	movs	r2, #100	; 0x64
 8001e56:	4879      	ldr	r0, [pc, #484]	; (800203c <can_transmit+0x240>)
 8001e58:	f005 f903 	bl	8007062 <memset>
		if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader2, TxData2, &TxMailbox) != HAL_OK)
 8001e5c:	4a72      	ldr	r2, [pc, #456]	; (8002028 <can_transmit+0x22c>)
 8001e5e:	4979      	ldr	r1, [pc, #484]	; (8002044 <can_transmit+0x248>)
 8001e60:	4879      	ldr	r0, [pc, #484]	; (8002048 <can_transmit+0x24c>)
 8001e62:	4643      	mov	r3, r8
 8001e64:	f000 fd08 	bl	8002878 <HAL_CAN_AddTxMessage>
 8001e68:	4682      	mov	sl, r0
 8001e6a:	2800      	cmp	r0, #0
 8001e6c:	f040 80cd 	bne.w	800200a <can_transmit+0x20e>
		HAL_Delay(10);
 8001e70:	200a      	movs	r0, #10
 8001e72:	f000 fbad 	bl	80025d0 <HAL_Delay>
		sprintf(transmitBuffer, "CAN ID : %0X, Data : %02X %02X %02X %02X %02X %02X %02X %02X\n", TxHeader2.ExtId, TxData2[0], TxData2[1], TxData2[2], TxData2[3], TxData2[4], TxData2[5], TxData2[6], TxData2[7]);
 8001e76:	79eb      	ldrb	r3, [r5, #7]
 8001e78:	9306      	str	r3, [sp, #24]
 8001e7a:	79ab      	ldrb	r3, [r5, #6]
 8001e7c:	9305      	str	r3, [sp, #20]
 8001e7e:	796b      	ldrb	r3, [r5, #5]
 8001e80:	9304      	str	r3, [sp, #16]
 8001e82:	792b      	ldrb	r3, [r5, #4]
 8001e84:	9303      	str	r3, [sp, #12]
 8001e86:	78eb      	ldrb	r3, [r5, #3]
 8001e88:	9302      	str	r3, [sp, #8]
 8001e8a:	78ab      	ldrb	r3, [r5, #2]
 8001e8c:	9301      	str	r3, [sp, #4]
 8001e8e:	4a6d      	ldr	r2, [pc, #436]	; (8002044 <can_transmit+0x248>)
 8001e90:	786b      	ldrb	r3, [r5, #1]
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	6852      	ldr	r2, [r2, #4]
 8001e96:	782b      	ldrb	r3, [r5, #0]
 8001e98:	4967      	ldr	r1, [pc, #412]	; (8002038 <can_transmit+0x23c>)
 8001e9a:	4868      	ldr	r0, [pc, #416]	; (800203c <can_transmit+0x240>)
 8001e9c:	f005 f87e 	bl	8006f9c <siprintf>
		HAL_UART_Transmit_IT(&huart3, transmitBuffer, 50);
 8001ea0:	4966      	ldr	r1, [pc, #408]	; (800203c <can_transmit+0x240>)
 8001ea2:	4867      	ldr	r0, [pc, #412]	; (8002040 <can_transmit+0x244>)
 8001ea4:	2232      	movs	r2, #50	; 0x32
 8001ea6:	f002 f809 	bl	8003ebc <HAL_UART_Transmit_IT>
		memset(transmitBuffer, '\0', sizeof(transmitBuffer));
 8001eaa:	4651      	mov	r1, sl
 8001eac:	2264      	movs	r2, #100	; 0x64
 8001eae:	4863      	ldr	r0, [pc, #396]	; (800203c <can_transmit+0x240>)
 8001eb0:	f005 f8d7 	bl	8007062 <memset>
		if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader3, TxData3, &TxMailbox) != HAL_OK)
 8001eb4:	4a5d      	ldr	r2, [pc, #372]	; (800202c <can_transmit+0x230>)
 8001eb6:	4965      	ldr	r1, [pc, #404]	; (800204c <can_transmit+0x250>)
 8001eb8:	4863      	ldr	r0, [pc, #396]	; (8002048 <can_transmit+0x24c>)
 8001eba:	4643      	mov	r3, r8
 8001ebc:	f000 fcdc 	bl	8002878 <HAL_CAN_AddTxMessage>
 8001ec0:	4682      	mov	sl, r0
 8001ec2:	2800      	cmp	r0, #0
 8001ec4:	f040 80a3 	bne.w	800200e <can_transmit+0x212>
		HAL_Delay(10);
 8001ec8:	200a      	movs	r0, #10
 8001eca:	f000 fb81 	bl	80025d0 <HAL_Delay>
		sprintf(transmitBuffer, "CAN ID : %0X, Data : %02X %02X %02X %02X %02X %02X %02X %02X\n", TxHeader3.ExtId, TxData3[0], TxData3[1], TxData3[2], TxData3[3], TxData3[4], TxData3[5], TxData3[6], TxData3[7]);
 8001ece:	79f3      	ldrb	r3, [r6, #7]
 8001ed0:	9306      	str	r3, [sp, #24]
 8001ed2:	79b3      	ldrb	r3, [r6, #6]
 8001ed4:	9305      	str	r3, [sp, #20]
 8001ed6:	7973      	ldrb	r3, [r6, #5]
 8001ed8:	9304      	str	r3, [sp, #16]
 8001eda:	7933      	ldrb	r3, [r6, #4]
 8001edc:	9303      	str	r3, [sp, #12]
 8001ede:	78f3      	ldrb	r3, [r6, #3]
 8001ee0:	9302      	str	r3, [sp, #8]
 8001ee2:	78b3      	ldrb	r3, [r6, #2]
 8001ee4:	9301      	str	r3, [sp, #4]
 8001ee6:	4a59      	ldr	r2, [pc, #356]	; (800204c <can_transmit+0x250>)
 8001ee8:	7873      	ldrb	r3, [r6, #1]
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	6852      	ldr	r2, [r2, #4]
 8001eee:	7833      	ldrb	r3, [r6, #0]
 8001ef0:	4951      	ldr	r1, [pc, #324]	; (8002038 <can_transmit+0x23c>)
 8001ef2:	4852      	ldr	r0, [pc, #328]	; (800203c <can_transmit+0x240>)
 8001ef4:	f005 f852 	bl	8006f9c <siprintf>
		HAL_UART_Transmit_IT(&huart3, transmitBuffer, 50);
 8001ef8:	4950      	ldr	r1, [pc, #320]	; (800203c <can_transmit+0x240>)
 8001efa:	4851      	ldr	r0, [pc, #324]	; (8002040 <can_transmit+0x244>)
 8001efc:	2232      	movs	r2, #50	; 0x32
 8001efe:	f001 ffdd 	bl	8003ebc <HAL_UART_Transmit_IT>
		memset(transmitBuffer, '\0', sizeof(transmitBuffer));
 8001f02:	4651      	mov	r1, sl
 8001f04:	2264      	movs	r2, #100	; 0x64
 8001f06:	484d      	ldr	r0, [pc, #308]	; (800203c <can_transmit+0x240>)
 8001f08:	f005 f8ab 	bl	8007062 <memset>
		if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader4, TxData4, &TxMailbox) != HAL_OK)
 8001f0c:	4a48      	ldr	r2, [pc, #288]	; (8002030 <can_transmit+0x234>)
 8001f0e:	4950      	ldr	r1, [pc, #320]	; (8002050 <can_transmit+0x254>)
 8001f10:	484d      	ldr	r0, [pc, #308]	; (8002048 <can_transmit+0x24c>)
 8001f12:	4643      	mov	r3, r8
 8001f14:	f000 fcb0 	bl	8002878 <HAL_CAN_AddTxMessage>
 8001f18:	2800      	cmp	r0, #0
 8001f1a:	d17a      	bne.n	8002012 <can_transmit+0x216>
		HAL_Delay(10);
 8001f1c:	200a      	movs	r0, #10
 8001f1e:	f000 fb57 	bl	80025d0 <HAL_Delay>
		if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader5, TxData5, &TxMailbox) != HAL_OK)
 8001f22:	4a4c      	ldr	r2, [pc, #304]	; (8002054 <can_transmit+0x258>)
 8001f24:	494c      	ldr	r1, [pc, #304]	; (8002058 <can_transmit+0x25c>)
 8001f26:	4848      	ldr	r0, [pc, #288]	; (8002048 <can_transmit+0x24c>)
 8001f28:	4643      	mov	r3, r8
 8001f2a:	f000 fca5 	bl	8002878 <HAL_CAN_AddTxMessage>
 8001f2e:	2800      	cmp	r0, #0
 8001f30:	d171      	bne.n	8002016 <can_transmit+0x21a>
		HAL_Delay(10);
 8001f32:	200a      	movs	r0, #10
 8001f34:	f000 fb4c 	bl	80025d0 <HAL_Delay>
		if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader6, TxData6, &TxMailbox) != HAL_OK)
 8001f38:	4a48      	ldr	r2, [pc, #288]	; (800205c <can_transmit+0x260>)
 8001f3a:	4949      	ldr	r1, [pc, #292]	; (8002060 <can_transmit+0x264>)
 8001f3c:	4842      	ldr	r0, [pc, #264]	; (8002048 <can_transmit+0x24c>)
 8001f3e:	4643      	mov	r3, r8
 8001f40:	f000 fc9a 	bl	8002878 <HAL_CAN_AddTxMessage>
 8001f44:	2800      	cmp	r0, #0
 8001f46:	d168      	bne.n	800201a <can_transmit+0x21e>
		HAL_Delay(10);
 8001f48:	200a      	movs	r0, #10
 8001f4a:	f000 fb41 	bl	80025d0 <HAL_Delay>
		if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader7, TxData7, &TxMailbox) != HAL_OK)
 8001f4e:	4a45      	ldr	r2, [pc, #276]	; (8002064 <can_transmit+0x268>)
 8001f50:	4945      	ldr	r1, [pc, #276]	; (8002068 <can_transmit+0x26c>)
 8001f52:	483d      	ldr	r0, [pc, #244]	; (8002048 <can_transmit+0x24c>)
 8001f54:	4643      	mov	r3, r8
 8001f56:	f000 fc8f 	bl	8002878 <HAL_CAN_AddTxMessage>
 8001f5a:	4682      	mov	sl, r0
 8001f5c:	2800      	cmp	r0, #0
 8001f5e:	d15e      	bne.n	800201e <can_transmit+0x222>
		HAL_Delay(10);
 8001f60:	200a      	movs	r0, #10
 8001f62:	f000 fb35 	bl	80025d0 <HAL_Delay>
		sprintf(transmitBuffer, "CAN ID : %0X, Data : %02X %02X %02X %02X %02X %02X %02X %02X\n", TxHeader4.ExtId, TxData4[0], TxData4[1], TxData4[2], TxData4[3], TxData4[4], TxData4[5], TxData4[6], TxData4[7]);
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	9306      	str	r3, [sp, #24]
 8001f6a:	79bb      	ldrb	r3, [r7, #6]
 8001f6c:	9305      	str	r3, [sp, #20]
 8001f6e:	797b      	ldrb	r3, [r7, #5]
 8001f70:	9304      	str	r3, [sp, #16]
 8001f72:	793b      	ldrb	r3, [r7, #4]
 8001f74:	9303      	str	r3, [sp, #12]
 8001f76:	78fb      	ldrb	r3, [r7, #3]
 8001f78:	9302      	str	r3, [sp, #8]
 8001f7a:	78bb      	ldrb	r3, [r7, #2]
 8001f7c:	9301      	str	r3, [sp, #4]
 8001f7e:	4a34      	ldr	r2, [pc, #208]	; (8002050 <can_transmit+0x254>)
 8001f80:	787b      	ldrb	r3, [r7, #1]
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	6852      	ldr	r2, [r2, #4]
 8001f86:	783b      	ldrb	r3, [r7, #0]
 8001f88:	492b      	ldr	r1, [pc, #172]	; (8002038 <can_transmit+0x23c>)
 8001f8a:	482c      	ldr	r0, [pc, #176]	; (800203c <can_transmit+0x240>)
 8001f8c:	f005 f806 	bl	8006f9c <siprintf>
		HAL_UART_Transmit_IT(&huart3, transmitBuffer, 50);
 8001f90:	492a      	ldr	r1, [pc, #168]	; (800203c <can_transmit+0x240>)
 8001f92:	482b      	ldr	r0, [pc, #172]	; (8002040 <can_transmit+0x244>)
 8001f94:	2232      	movs	r2, #50	; 0x32
 8001f96:	f001 ff91 	bl	8003ebc <HAL_UART_Transmit_IT>
		memset(transmitBuffer, '\0', sizeof(transmitBuffer));
 8001f9a:	4828      	ldr	r0, [pc, #160]	; (800203c <can_transmit+0x240>)
 8001f9c:	4651      	mov	r1, sl
 8001f9e:	2264      	movs	r2, #100	; 0x64
 8001fa0:	f005 f85f 	bl	8007062 <memset>
		osDelay(200);
 8001fa4:	20c8      	movs	r0, #200	; 0xc8
 8001fa6:	f002 f9e5 	bl	8004374 <osDelay>
		MotorData();
 8001faa:	f7ff fe6d 	bl	8001c88 <MotorData>
	TxData5 [7] = door;
 8001fae:	4b2f      	ldr	r3, [pc, #188]	; (800206c <can_transmit+0x270>)
	TxData7[7] = door;
 8001fb0:	4a2c      	ldr	r2, [pc, #176]	; (8002064 <can_transmit+0x268>)
	TxData5 [7] = door;
 8001fb2:	781b      	ldrb	r3, [r3, #0]
	TxData7[7] = door;
 8001fb4:	71d3      	strb	r3, [r2, #7]
	TxData5 [7] = door;
 8001fb6:	f889 3007 	strb.w	r3, [r9, #7]
	TxData6 [0] = door;
 8001fba:	f88b 3000 	strb.w	r3, [fp]
	TxData5 [0] = Byte0;
 8001fbe:	4b2c      	ldr	r3, [pc, #176]	; (8002070 <can_transmit+0x274>)
		if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader1, TxData1, &TxMailbox) != HAL_OK)
 8001fc0:	4821      	ldr	r0, [pc, #132]	; (8002048 <can_transmit+0x24c>)
	TxData5 [0] = Byte0;
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	f889 3000 	strb.w	r3, [r9]
	TxData5 [1] = Byte1;
 8001fc8:	4b2a      	ldr	r3, [pc, #168]	; (8002074 <can_transmit+0x278>)
		if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader1, TxData1, &TxMailbox) != HAL_OK)
 8001fca:	491a      	ldr	r1, [pc, #104]	; (8002034 <can_transmit+0x238>)
	TxData5 [1] = Byte1;
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	f889 3001 	strb.w	r3, [r9, #1]
	TxData5 [2] = 0xFF;
 8001fd2:	f46f 3340 	mvn.w	r3, #196608	; 0x30000
 8001fd6:	f8c9 3002 	str.w	r3, [r9, #2]
	TxData5 [6] = 0xFF;
 8001fda:	23ff      	movs	r3, #255	; 0xff
 8001fdc:	f889 3006 	strb.w	r3, [r9, #6]
	TxData6 [1] = 0xF3;
 8001fe0:	23f3      	movs	r3, #243	; 0xf3
 8001fe2:	f88b 3001 	strb.w	r3, [fp, #1]
	TxData6 [2] = 0xFF;
 8001fe6:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001fea:	f8ab 3002 	strh.w	r3, [fp, #2]
	TxData6 [4] = 0xFF;
 8001fee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ff2:	f8cb 3004 	str.w	r3, [fp, #4]
		if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader1, TxData1, &TxMailbox) != HAL_OK)
 8001ff6:	4622      	mov	r2, r4
 8001ff8:	4643      	mov	r3, r8
 8001ffa:	f000 fc3d 	bl	8002878 <HAL_CAN_AddTxMessage>
 8001ffe:	4682      	mov	sl, r0
 8002000:	2800      	cmp	r0, #0
 8002002:	f43f af09 	beq.w	8001e18 <can_transmit+0x1c>
 8002006:	b672      	cpsid	i
  while (1)
 8002008:	e7fe      	b.n	8002008 <can_transmit+0x20c>
 800200a:	b672      	cpsid	i
 800200c:	e7fe      	b.n	800200c <can_transmit+0x210>
 800200e:	b672      	cpsid	i
 8002010:	e7fe      	b.n	8002010 <can_transmit+0x214>
 8002012:	b672      	cpsid	i
 8002014:	e7fe      	b.n	8002014 <can_transmit+0x218>
 8002016:	b672      	cpsid	i
 8002018:	e7fe      	b.n	8002018 <can_transmit+0x21c>
 800201a:	b672      	cpsid	i
 800201c:	e7fe      	b.n	800201c <can_transmit+0x220>
 800201e:	b672      	cpsid	i
 8002020:	e7fe      	b.n	8002020 <can_transmit+0x224>
 8002022:	bf00      	nop
 8002024:	20000530 	.word	0x20000530
 8002028:	20000538 	.word	0x20000538
 800202c:	20000540 	.word	0x20000540
 8002030:	20000548 	.word	0x20000548
 8002034:	20000568 	.word	0x20000568
 8002038:	0800aa5c 	.word	0x0800aa5c
 800203c:	2000073c 	.word	0x2000073c
 8002040:	200006ec 	.word	0x200006ec
 8002044:	20000580 	.word	0x20000580
 8002048:	20000640 	.word	0x20000640
 800204c:	20000598 	.word	0x20000598
 8002050:	200005b0 	.word	0x200005b0
 8002054:	20000550 	.word	0x20000550
 8002058:	200005c8 	.word	0x200005c8
 800205c:	20000558 	.word	0x20000558
 8002060:	200005e0 	.word	0x200005e0
 8002064:	20000560 	.word	0x20000560
 8002068:	200005f8 	.word	0x200005f8
 800206c:	20000016 	.word	0x20000016
 8002070:	20000000 	.word	0x20000000
 8002074:	20000001 	.word	0x20000001
 8002078:	20000610 	.word	0x20000610

0800207c <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x10>)
 800207e:	6802      	ldr	r2, [r0, #0]
 8002080:	429a      	cmp	r2, r3
 8002082:	d000      	beq.n	8002086 <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8002084:	4770      	bx	lr
    HAL_IncTick();
 8002086:	f000 ba91 	b.w	80025ac <HAL_IncTick>
 800208a:	bf00      	nop
 800208c:	40001000 	.word	0x40001000

08002090 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002090:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002092:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <HAL_MspInit+0x3c>)
 8002094:	2200      	movs	r2, #0
 8002096:	9200      	str	r2, [sp, #0]
 8002098:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800209a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800209e:	6459      	str	r1, [r3, #68]	; 0x44
 80020a0:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80020a2:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
 80020a6:	9000      	str	r0, [sp, #0]
 80020a8:	9800      	ldr	r0, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020aa:	9201      	str	r2, [sp, #4]
 80020ac:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80020ae:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 80020b2:	6418      	str	r0, [r3, #64]	; 0x40
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ba:	9301      	str	r3, [sp, #4]
 80020bc:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020be:	210f      	movs	r1, #15
 80020c0:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020c4:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020c6:	f000 be2b 	b.w	8002d20 <HAL_NVIC_SetPriority>
 80020ca:	bf00      	nop
 80020cc:	40023800 	.word	0x40023800

080020d0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80020d0:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcan->Instance==CAN1)
 80020d2:	6802      	ldr	r2, [r0, #0]
 80020d4:	4950      	ldr	r1, [pc, #320]	; (8002218 <HAL_CAN_MspInit+0x148>)
{
 80020d6:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d8:	2300      	movs	r3, #0
  if(hcan->Instance==CAN1)
 80020da:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020dc:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80020e0:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80020e4:	930a      	str	r3, [sp, #40]	; 0x28
  if(hcan->Instance==CAN1)
 80020e6:	d046      	beq.n	8002176 <HAL_CAN_MspInit+0xa6>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
  else if(hcan->Instance==CAN2)
 80020e8:	494c      	ldr	r1, [pc, #304]	; (800221c <HAL_CAN_MspInit+0x14c>)
 80020ea:	428a      	cmp	r2, r1
 80020ec:	d001      	beq.n	80020f2 <HAL_CAN_MspInit+0x22>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80020ee:	b00d      	add	sp, #52	; 0x34
 80020f0:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_CAN2_CLK_ENABLE();
 80020f2:	4a4b      	ldr	r2, [pc, #300]	; (8002220 <HAL_CAN_MspInit+0x150>)
 80020f4:	9303      	str	r3, [sp, #12]
 80020f6:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_RCC_CAN1_CLK_ENABLED++;
 80020f8:	484a      	ldr	r0, [pc, #296]	; (8002224 <HAL_CAN_MspInit+0x154>)
    __HAL_RCC_CAN2_CLK_ENABLE();
 80020fa:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 80020fe:	6411      	str	r1, [r2, #64]	; 0x40
 8002100:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002102:	f001 6180 	and.w	r1, r1, #67108864	; 0x4000000
 8002106:	9103      	str	r1, [sp, #12]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002108:	6801      	ldr	r1, [r0, #0]
    __HAL_RCC_CAN2_CLK_ENABLE();
 800210a:	9c03      	ldr	r4, [sp, #12]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800210c:	3101      	adds	r1, #1
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800210e:	2901      	cmp	r1, #1
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002110:	6001      	str	r1, [r0, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002112:	d075      	beq.n	8002200 <HAL_CAN_MspInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002114:	4b42      	ldr	r3, [pc, #264]	; (8002220 <HAL_CAN_MspInit+0x150>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002116:	4844      	ldr	r0, [pc, #272]	; (8002228 <HAL_CAN_MspInit+0x158>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002118:	2400      	movs	r4, #0
 800211a:	9405      	str	r4, [sp, #20]
 800211c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800211e:	f041 0102 	orr.w	r1, r1, #2
 8002122:	6319      	str	r1, [r3, #48]	; 0x30
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800212c:	2220      	movs	r2, #32
 800212e:	2302      	movs	r3, #2
 8002130:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002134:	2509      	movs	r5, #9
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002136:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002138:	950a      	str	r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800213a:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800213c:	2201      	movs	r2, #1
 800213e:	2303      	movs	r3, #3
 8002140:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002144:	f000 ff50 	bl	8002fe8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002148:	2240      	movs	r2, #64	; 0x40
 800214a:	2302      	movs	r3, #2
 800214c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002150:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002152:	2303      	movs	r3, #3
 8002154:	2200      	movs	r2, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002156:	4834      	ldr	r0, [pc, #208]	; (8002228 <HAL_CAN_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002158:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800215a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215e:	f000 ff43 	bl	8002fe8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8002162:	4622      	mov	r2, r4
 8002164:	2105      	movs	r1, #5
 8002166:	2041      	movs	r0, #65	; 0x41
 8002168:	f000 fdda 	bl	8002d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800216c:	2041      	movs	r0, #65	; 0x41
 800216e:	f000 fe15 	bl	8002d9c <HAL_NVIC_EnableIRQ>
}
 8002172:	b00d      	add	sp, #52	; 0x34
 8002174:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002176:	492b      	ldr	r1, [pc, #172]	; (8002224 <HAL_CAN_MspInit+0x154>)
 8002178:	680a      	ldr	r2, [r1, #0]
 800217a:	3201      	adds	r2, #1
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800217c:	2a01      	cmp	r2, #1
    HAL_RCC_CAN1_CLK_ENABLED++;
 800217e:	600a      	str	r2, [r1, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002180:	d032      	beq.n	80021e8 <HAL_CAN_MspInit+0x118>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002182:	4b27      	ldr	r3, [pc, #156]	; (8002220 <HAL_CAN_MspInit+0x150>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002184:	4828      	ldr	r0, [pc, #160]	; (8002228 <HAL_CAN_MspInit+0x158>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002186:	2400      	movs	r4, #0
 8002188:	9402      	str	r4, [sp, #8]
 800218a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800218c:	f041 0102 	orr.w	r1, r1, #2
 8002190:	6319      	str	r1, [r3, #48]	; 0x30
 8002192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800219a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800219e:	2302      	movs	r3, #2
 80021a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80021a4:	2509      	movs	r5, #9
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80021a8:	950a      	str	r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021aa:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021ac:	2201      	movs	r2, #1
 80021ae:	2303      	movs	r3, #3
 80021b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b4:	f000 ff18 	bl	8002fe8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021bc:	2302      	movs	r3, #2
 80021be:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c2:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021c4:	2303      	movs	r3, #3
 80021c6:	2200      	movs	r2, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c8:	4817      	ldr	r0, [pc, #92]	; (8002228 <HAL_CAN_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80021ca:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d0:	f000 ff0a 	bl	8002fe8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80021d4:	4622      	mov	r2, r4
 80021d6:	2105      	movs	r1, #5
 80021d8:	2015      	movs	r0, #21
 80021da:	f000 fda1 	bl	8002d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80021de:	2015      	movs	r0, #21
 80021e0:	f000 fddc 	bl	8002d9c <HAL_NVIC_EnableIRQ>
}
 80021e4:	b00d      	add	sp, #52	; 0x34
 80021e6:	bd30      	pop	{r4, r5, pc}
      __HAL_RCC_CAN1_CLK_ENABLE();
 80021e8:	4a0d      	ldr	r2, [pc, #52]	; (8002220 <HAL_CAN_MspInit+0x150>)
 80021ea:	9301      	str	r3, [sp, #4]
 80021ec:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80021ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021f2:	6413      	str	r3, [r2, #64]	; 0x40
 80021f4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	9301      	str	r3, [sp, #4]
 80021fc:	9b01      	ldr	r3, [sp, #4]
 80021fe:	e7c0      	b.n	8002182 <HAL_CAN_MspInit+0xb2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002200:	9304      	str	r3, [sp, #16]
 8002202:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002204:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002208:	6413      	str	r3, [r2, #64]	; 0x40
 800220a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800220c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002210:	9304      	str	r3, [sp, #16]
 8002212:	9b04      	ldr	r3, [sp, #16]
 8002214:	e77e      	b.n	8002114 <HAL_CAN_MspInit+0x44>
 8002216:	bf00      	nop
 8002218:	40006400 	.word	0x40006400
 800221c:	40006800 	.word	0x40006800
 8002220:	40023800 	.word	0x40023800
 8002224:	200007b8 	.word	0x200007b8
 8002228:	40020400 	.word	0x40020400

0800222c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800222c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC)
 800222e:	4b1a      	ldr	r3, [pc, #104]	; (8002298 <HAL_DAC_MspInit+0x6c>)
 8002230:	6802      	ldr	r2, [r0, #0]
{
 8002232:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002234:	2400      	movs	r4, #0
  if(hdac->Instance==DAC)
 8002236:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002238:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800223c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002240:	9406      	str	r4, [sp, #24]
  if(hdac->Instance==DAC)
 8002242:	d001      	beq.n	8002248 <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002244:	b008      	add	sp, #32
 8002246:	bd10      	pop	{r4, pc}
    __HAL_RCC_DAC_CLK_ENABLE();
 8002248:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 800224c:	9400      	str	r4, [sp, #0]
 800224e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002250:	4812      	ldr	r0, [pc, #72]	; (800229c <HAL_DAC_MspInit+0x70>)
    __HAL_RCC_DAC_CLK_ENABLE();
 8002252:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002256:	641a      	str	r2, [r3, #64]	; 0x40
 8002258:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800225a:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800225e:	9200      	str	r2, [sp, #0]
 8002260:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002262:	9401      	str	r4, [sp, #4]
 8002264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002266:	f042 0201 	orr.w	r2, r2, #1
 800226a:	631a      	str	r2, [r3, #48]	; 0x30
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002274:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002276:	2230      	movs	r2, #48	; 0x30
 8002278:	2303      	movs	r3, #3
 800227a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227e:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002280:	f000 feb2 	bl	8002fe8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8002284:	4622      	mov	r2, r4
 8002286:	210f      	movs	r1, #15
 8002288:	2036      	movs	r0, #54	; 0x36
 800228a:	f000 fd49 	bl	8002d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800228e:	2036      	movs	r0, #54	; 0x36
 8002290:	f000 fd84 	bl	8002d9c <HAL_NVIC_EnableIRQ>
}
 8002294:	b008      	add	sp, #32
 8002296:	bd10      	pop	{r4, pc}
 8002298:	40007400 	.word	0x40007400
 800229c:	40020000 	.word	0x40020000

080022a0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80022a0:	6803      	ldr	r3, [r0, #0]
 80022a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a6:	d000      	beq.n	80022aa <HAL_TIM_Base_MspInit+0xa>
 80022a8:	4770      	bx	lr
{
 80022aa:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022ac:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80022b0:	2200      	movs	r2, #0
 80022b2:	9201      	str	r2, [sp, #4]
 80022b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022b6:	f042 0201 	orr.w	r2, r2, #1
 80022ba:	641a      	str	r2, [r3, #64]	; 0x40
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	9301      	str	r3, [sp, #4]
 80022c4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80022c6:	b002      	add	sp, #8
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop

080022cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022cc:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART3)
 80022ce:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <HAL_UART_MspInit+0x78>)
 80022d0:	6802      	ldr	r2, [r0, #0]
{
 80022d2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d4:	2400      	movs	r4, #0
  if(huart->Instance==USART3)
 80022d6:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d8:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80022dc:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80022e0:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART3)
 80022e2:	d001      	beq.n	80022e8 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80022e4:	b009      	add	sp, #36	; 0x24
 80022e6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 80022e8:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 80022ec:	9400      	str	r4, [sp, #0]
 80022ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f0:	4815      	ldr	r0, [pc, #84]	; (8002348 <HAL_UART_MspInit+0x7c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80022f2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80022f6:	641a      	str	r2, [r3, #64]	; 0x40
 80022f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022fa:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80022fe:	9200      	str	r2, [sp, #0]
 8002300:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002302:	9401      	str	r4, [sp, #4]
 8002304:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002306:	f042 0202 	orr.w	r2, r2, #2
 800230a:	631a      	str	r2, [r3, #48]	; 0x30
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002314:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8002318:	2302      	movs	r3, #2
 800231a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800231e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002320:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002322:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002324:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002328:	9d01      	ldr	r5, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800232a:	f000 fe5d 	bl	8002fe8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800232e:	4622      	mov	r2, r4
 8002330:	2105      	movs	r1, #5
 8002332:	2027      	movs	r0, #39	; 0x27
 8002334:	f000 fcf4 	bl	8002d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002338:	2027      	movs	r0, #39	; 0x27
 800233a:	f000 fd2f 	bl	8002d9c <HAL_NVIC_EnableIRQ>
}
 800233e:	b009      	add	sp, #36	; 0x24
 8002340:	bd30      	pop	{r4, r5, pc}
 8002342:	bf00      	nop
 8002344:	40004800 	.word	0x40004800
 8002348:	40020400 	.word	0x40020400

0800234c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800234c:	b570      	push	{r4, r5, r6, lr}
 800234e:	b088      	sub	sp, #32
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002350:	4b23      	ldr	r3, [pc, #140]	; (80023e0 <HAL_InitTick+0x94>)
 8002352:	2200      	movs	r2, #0
 8002354:	9202      	str	r2, [sp, #8]
 8002356:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002358:	f042 0210 	orr.w	r2, r2, #16
 800235c:	641a      	str	r2, [r3, #64]	; 0x40
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	f003 0310 	and.w	r3, r3, #16
 8002364:	9302      	str	r3, [sp, #8]
{
 8002366:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002368:	a901      	add	r1, sp, #4
 800236a:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 800236c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800236e:	f001 fa41 	bl	80037f4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002372:	9b06      	ldr	r3, [sp, #24]
 8002374:	b9d3      	cbnz	r3, 80023ac <HAL_InitTick+0x60>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002376:	f001 fa1d 	bl	80037b4 <HAL_RCC_GetPCLK1Freq>
 800237a:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800237c:	4a19      	ldr	r2, [pc, #100]	; (80023e4 <HAL_InitTick+0x98>)

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800237e:	4c1a      	ldr	r4, [pc, #104]	; (80023e8 <HAL_InitTick+0x9c>)
 8002380:	491a      	ldr	r1, [pc, #104]	; (80023ec <HAL_InitTick+0xa0>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002382:	fba2 2303 	umull	r2, r3, r2, r3
 8002386:	0c9b      	lsrs	r3, r3, #18
 8002388:	3b01      	subs	r3, #1
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 800238a:	2200      	movs	r2, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 800238c:	e9c4 1300 	strd	r1, r3, [r4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim6);
 8002390:	4620      	mov	r0, r4
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002392:	f240 33e7 	movw	r3, #999	; 0x3e7
  htim6.Init.ClockDivision = 0;
 8002396:	6122      	str	r2, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002398:	60a2      	str	r2, [r4, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800239a:	61a2      	str	r2, [r4, #24]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800239c:	60e3      	str	r3, [r4, #12]
  status = HAL_TIM_Base_Init(&htim6);
 800239e:	f001 fa4b 	bl	8003838 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80023a2:	4606      	mov	r6, r0
 80023a4:	b130      	cbz	r0, 80023b4 <HAL_InitTick+0x68>
    }
  }

 /* Return function status */
  return status;
}
 80023a6:	4630      	mov	r0, r6
 80023a8:	b008      	add	sp, #32
 80023aa:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80023ac:	f001 fa02 	bl	80037b4 <HAL_RCC_GetPCLK1Freq>
 80023b0:	0043      	lsls	r3, r0, #1
 80023b2:	e7e3      	b.n	800237c <HAL_InitTick+0x30>
    status = HAL_TIM_Base_Start_IT(&htim6);
 80023b4:	4620      	mov	r0, r4
 80023b6:	f001 fb05 	bl	80039c4 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80023ba:	4606      	mov	r6, r0
 80023bc:	2800      	cmp	r0, #0
 80023be:	d1f2      	bne.n	80023a6 <HAL_InitTick+0x5a>
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023c0:	2036      	movs	r0, #54	; 0x36
 80023c2:	f000 fceb 	bl	8002d9c <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023c6:	2d0f      	cmp	r5, #15
 80023c8:	d901      	bls.n	80023ce <HAL_InitTick+0x82>
        status = HAL_ERROR;
 80023ca:	2601      	movs	r6, #1
 80023cc:	e7eb      	b.n	80023a6 <HAL_InitTick+0x5a>
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80023ce:	4632      	mov	r2, r6
 80023d0:	4629      	mov	r1, r5
 80023d2:	2036      	movs	r0, #54	; 0x36
 80023d4:	f000 fca4 	bl	8002d20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023d8:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <HAL_InitTick+0xa4>)
 80023da:	601d      	str	r5, [r3, #0]
 80023dc:	e7e3      	b.n	80023a6 <HAL_InitTick+0x5a>
 80023de:	bf00      	nop
 80023e0:	40023800 	.word	0x40023800
 80023e4:	431bde83 	.word	0x431bde83
 80023e8:	200007bc 	.word	0x200007bc
 80023ec:	40001000 	.word	0x40001000
 80023f0:	20000028 	.word	0x20000028

080023f4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023f4:	e7fe      	b.n	80023f4 <NMI_Handler>
 80023f6:	bf00      	nop

080023f8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023f8:	e7fe      	b.n	80023f8 <HardFault_Handler>
 80023fa:	bf00      	nop

080023fc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023fc:	e7fe      	b.n	80023fc <MemManage_Handler>
 80023fe:	bf00      	nop

08002400 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002400:	e7fe      	b.n	8002400 <BusFault_Handler>
 8002402:	bf00      	nop

08002404 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002404:	e7fe      	b.n	8002404 <UsageFault_Handler>
 8002406:	bf00      	nop

08002408 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop

0800240c <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800240c:	4801      	ldr	r0, [pc, #4]	; (8002414 <CAN1_RX1_IRQHandler+0x8>)
 800240e:	f000 bb4b 	b.w	8002aa8 <HAL_CAN_IRQHandler>
 8002412:	bf00      	nop
 8002414:	20000640 	.word	0x20000640

08002418 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002418:	4801      	ldr	r0, [pc, #4]	; (8002420 <USART3_IRQHandler+0x8>)
 800241a:	f001 bde7 	b.w	8003fec <HAL_UART_IRQHandler>
 800241e:	bf00      	nop
 8002420:	200006ec 	.word	0x200006ec

08002424 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002424:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8002426:	4807      	ldr	r0, [pc, #28]	; (8002444 <TIM6_DAC_IRQHandler+0x20>)
 8002428:	7903      	ldrb	r3, [r0, #4]
 800242a:	b923      	cbnz	r3, 8002436 <TIM6_DAC_IRQHandler+0x12>
  }
  HAL_TIM_IRQHandler(&htim6);
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800242c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 8002430:	4805      	ldr	r0, [pc, #20]	; (8002448 <TIM6_DAC_IRQHandler+0x24>)
 8002432:	f001 bbbb 	b.w	8003bac <HAL_TIM_IRQHandler>
    HAL_DAC_IRQHandler(&hdac);
 8002436:	f000 fd1f 	bl	8002e78 <HAL_DAC_IRQHandler>
}
 800243a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 800243e:	4802      	ldr	r0, [pc, #8]	; (8002448 <TIM6_DAC_IRQHandler+0x24>)
 8002440:	f001 bbb4 	b.w	8003bac <HAL_TIM_IRQHandler>
 8002444:	20000690 	.word	0x20000690
 8002448:	200007bc 	.word	0x200007bc

0800244c <CAN2_RX1_IRQHandler>:
void CAN2_RX1_IRQHandler(void)
{
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800244c:	4801      	ldr	r0, [pc, #4]	; (8002454 <CAN2_RX1_IRQHandler+0x8>)
 800244e:	f000 bb2b 	b.w	8002aa8 <HAL_CAN_IRQHandler>
 8002452:	bf00      	nop
 8002454:	20000668 	.word	0x20000668

08002458 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8002458:	2001      	movs	r0, #1
 800245a:	4770      	bx	lr

0800245c <_kill>:

int _kill(int pid, int sig)
{
 800245c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800245e:	f004 fea9 	bl	80071b4 <__errno>
 8002462:	2316      	movs	r3, #22
 8002464:	6003      	str	r3, [r0, #0]
  return -1;
}
 8002466:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800246a:	bd08      	pop	{r3, pc}

0800246c <_exit>:

void _exit (int status)
{
 800246c:	b508      	push	{r3, lr}
  errno = EINVAL;
 800246e:	f004 fea1 	bl	80071b4 <__errno>
 8002472:	2316      	movs	r3, #22
 8002474:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8002476:	e7fe      	b.n	8002476 <_exit+0xa>

08002478 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002478:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800247a:	1e16      	subs	r6, r2, #0
 800247c:	dd07      	ble.n	800248e <_read+0x16>
 800247e:	460c      	mov	r4, r1
 8002480:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8002482:	f3af 8000 	nop.w
 8002486:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800248a:	42a5      	cmp	r5, r4
 800248c:	d1f9      	bne.n	8002482 <_read+0xa>
  }

  return len;
}
 800248e:	4630      	mov	r0, r6
 8002490:	bd70      	pop	{r4, r5, r6, pc}
 8002492:	bf00      	nop

08002494 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002494:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002496:	1e16      	subs	r6, r2, #0
 8002498:	dd07      	ble.n	80024aa <_write+0x16>
 800249a:	460c      	mov	r4, r1
 800249c:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 800249e:	f814 0b01 	ldrb.w	r0, [r4], #1
 80024a2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024a6:	42ac      	cmp	r4, r5
 80024a8:	d1f9      	bne.n	800249e <_write+0xa>
  }
  return len;
}
 80024aa:	4630      	mov	r0, r6
 80024ac:	bd70      	pop	{r4, r5, r6, pc}
 80024ae:	bf00      	nop

080024b0 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80024b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop

080024b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80024b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024bc:	604b      	str	r3, [r1, #4]
  return 0;
}
 80024be:	2000      	movs	r0, #0
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop

080024c4 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80024c4:	2001      	movs	r0, #1
 80024c6:	4770      	bx	lr

080024c8 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80024c8:	2000      	movs	r0, #0
 80024ca:	4770      	bx	lr

080024cc <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024cc:	490c      	ldr	r1, [pc, #48]	; (8002500 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024ce:	4a0d      	ldr	r2, [pc, #52]	; (8002504 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 80024d0:	680b      	ldr	r3, [r1, #0]
{
 80024d2:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024d4:	4c0c      	ldr	r4, [pc, #48]	; (8002508 <_sbrk+0x3c>)
 80024d6:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80024d8:	b12b      	cbz	r3, 80024e6 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024da:	4418      	add	r0, r3
 80024dc:	4290      	cmp	r0, r2
 80024de:	d807      	bhi.n	80024f0 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80024e0:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80024e6:	4b09      	ldr	r3, [pc, #36]	; (800250c <_sbrk+0x40>)
 80024e8:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80024ea:	4418      	add	r0, r3
 80024ec:	4290      	cmp	r0, r2
 80024ee:	d9f7      	bls.n	80024e0 <_sbrk+0x14>
    errno = ENOMEM;
 80024f0:	f004 fe60 	bl	80071b4 <__errno>
 80024f4:	230c      	movs	r3, #12
 80024f6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80024f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	bd10      	pop	{r4, pc}
 8002500:	20000804 	.word	0x20000804
 8002504:	20020000 	.word	0x20020000
 8002508:	00000400 	.word	0x00000400
 800250c:	200046a8 	.word	0x200046a8

08002510 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002510:	4a03      	ldr	r2, [pc, #12]	; (8002520 <SystemInit+0x10>)
 8002512:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002516:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800251a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800251e:	4770      	bx	lr
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002524:	f8df d034 	ldr.w	sp, [pc, #52]	; 800255c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002528:	480d      	ldr	r0, [pc, #52]	; (8002560 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800252a:	490e      	ldr	r1, [pc, #56]	; (8002564 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800252c:	4a0e      	ldr	r2, [pc, #56]	; (8002568 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800252e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002530:	e002      	b.n	8002538 <LoopCopyDataInit>

08002532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002536:	3304      	adds	r3, #4

08002538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800253a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800253c:	d3f9      	bcc.n	8002532 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800253e:	4a0b      	ldr	r2, [pc, #44]	; (800256c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002540:	4c0b      	ldr	r4, [pc, #44]	; (8002570 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002544:	e001      	b.n	800254a <LoopFillZerobss>

08002546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002548:	3204      	adds	r2, #4

0800254a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800254a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800254c:	d3fb      	bcc.n	8002546 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800254e:	f7ff ffdf 	bl	8002510 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002552:	f004 fe35 	bl	80071c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002556:	f7ff f949 	bl	80017ec <main>
  bx  lr    
 800255a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800255c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002564:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002568:	0800b320 	.word	0x0800b320
  ldr r2, =_sbss
 800256c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002570:	200046a8 	.word	0x200046a8

08002574 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002574:	e7fe      	b.n	8002574 <ADC_IRQHandler>
	...

08002578 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002578:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800257a:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <HAL_Init+0x30>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002582:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800258a:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002592:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002594:	2003      	movs	r0, #3
 8002596:	f000 fbb1 	bl	8002cfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800259a:	200f      	movs	r0, #15
 800259c:	f7ff fed6 	bl	800234c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025a0:	f7ff fd76 	bl	8002090 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80025a4:	2000      	movs	r0, #0
 80025a6:	bd08      	pop	{r3, pc}
 80025a8:	40023c00 	.word	0x40023c00

080025ac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80025ac:	4a03      	ldr	r2, [pc, #12]	; (80025bc <HAL_IncTick+0x10>)
 80025ae:	4b04      	ldr	r3, [pc, #16]	; (80025c0 <HAL_IncTick+0x14>)
 80025b0:	6811      	ldr	r1, [r2, #0]
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	440b      	add	r3, r1
 80025b6:	6013      	str	r3, [r2, #0]
}
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	20000808 	.word	0x20000808
 80025c0:	20000024 	.word	0x20000024

080025c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80025c4:	4b01      	ldr	r3, [pc, #4]	; (80025cc <HAL_GetTick+0x8>)
 80025c6:	6818      	ldr	r0, [r3, #0]
}
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	20000808 	.word	0x20000808

080025d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025d0:	b538      	push	{r3, r4, r5, lr}
 80025d2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80025d4:	f7ff fff6 	bl	80025c4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025d8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80025da:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80025dc:	d002      	beq.n	80025e4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80025de:	4b04      	ldr	r3, [pc, #16]	; (80025f0 <HAL_Delay+0x20>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025e4:	f7ff ffee 	bl	80025c4 <HAL_GetTick>
 80025e8:	1b43      	subs	r3, r0, r5
 80025ea:	42a3      	cmp	r3, r4
 80025ec:	d3fa      	bcc.n	80025e4 <HAL_Delay+0x14>
  {
  }
}
 80025ee:	bd38      	pop	{r3, r4, r5, pc}
 80025f0:	20000024 	.word	0x20000024

080025f4 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80025f4:	2800      	cmp	r0, #0
 80025f6:	d07b      	beq.n	80026f0 <HAL_CAN_Init+0xfc>
{
 80025f8:	b538      	push	{r3, r4, r5, lr}
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80025fa:	f890 3020 	ldrb.w	r3, [r0, #32]
 80025fe:	4604      	mov	r4, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d072      	beq.n	80026ea <HAL_CAN_Init+0xf6>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002604:	6822      	ldr	r2, [r4, #0]
 8002606:	6813      	ldr	r3, [r2, #0]
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800260e:	f7ff ffd9 	bl	80025c4 <HAL_GetTick>
 8002612:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002614:	e004      	b.n	8002620 <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002616:	f7ff ffd5 	bl	80025c4 <HAL_GetTick>
 800261a:	1b43      	subs	r3, r0, r5
 800261c:	2b0a      	cmp	r3, #10
 800261e:	d85b      	bhi.n	80026d8 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002620:	6823      	ldr	r3, [r4, #0]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	07d1      	lsls	r1, r2, #31
 8002626:	d5f6      	bpl.n	8002616 <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	f022 0202 	bic.w	r2, r2, #2
 800262e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002630:	f7ff ffc8 	bl	80025c4 <HAL_GetTick>
 8002634:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002636:	e004      	b.n	8002642 <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002638:	f7ff ffc4 	bl	80025c4 <HAL_GetTick>
 800263c:	1b40      	subs	r0, r0, r5
 800263e:	280a      	cmp	r0, #10
 8002640:	d84a      	bhi.n	80026d8 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002642:	6823      	ldr	r3, [r4, #0]
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	0792      	lsls	r2, r2, #30
 8002648:	d4f6      	bmi.n	8002638 <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800264a:	7e22      	ldrb	r2, [r4, #24]
 800264c:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	bf0c      	ite	eq
 8002652:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002656:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 800265a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800265c:	7e62      	ldrb	r2, [r4, #25]
 800265e:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	bf0c      	ite	eq
 8002664:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002668:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 800266c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800266e:	7ea2      	ldrb	r2, [r4, #26]
 8002670:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	bf0c      	ite	eq
 8002676:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800267a:	f022 0220 	bicne.w	r2, r2, #32
 800267e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002680:	7ee2      	ldrb	r2, [r4, #27]
 8002682:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	bf0c      	ite	eq
 8002688:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800268c:	f042 0210 	orrne.w	r2, r2, #16
 8002690:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002692:	7f22      	ldrb	r2, [r4, #28]
 8002694:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	bf0c      	ite	eq
 800269a:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800269e:	f022 0208 	bicne.w	r2, r2, #8
 80026a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80026a4:	7f62      	ldrb	r2, [r4, #29]
 80026a6:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	bf0c      	ite	eq
 80026ac:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026b0:	f022 0204 	bicne.w	r2, r2, #4
 80026b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80026b6:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 80026ba:	6921      	ldr	r1, [r4, #16]
 80026bc:	4302      	orrs	r2, r0
 80026be:	430a      	orrs	r2, r1
 80026c0:	6960      	ldr	r0, [r4, #20]
 80026c2:	6861      	ldr	r1, [r4, #4]
 80026c4:	4302      	orrs	r2, r0
 80026c6:	3901      	subs	r1, #1
 80026c8:	430a      	orrs	r2, r1
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80026ca:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80026cc:	2101      	movs	r1, #1
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80026ce:	61da      	str	r2, [r3, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80026d0:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80026d2:	f884 1020 	strb.w	r1, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 80026d6:	bd38      	pop	{r3, r4, r5, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80026da:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e0:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80026e2:	f884 2020 	strb.w	r2, [r4, #32]
      return HAL_ERROR;
 80026e6:	2001      	movs	r0, #1
}
 80026e8:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 80026ea:	f7ff fcf1 	bl	80020d0 <HAL_CAN_MspInit>
 80026ee:	e789      	b.n	8002604 <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 80026f0:	2001      	movs	r0, #1
}
 80026f2:	4770      	bx	lr

080026f4 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 80026f4:	f890 2020 	ldrb.w	r2, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 80026f8:	3a01      	subs	r2, #1
 80026fa:	2a01      	cmp	r2, #1
 80026fc:	d906      	bls.n	800270c <HAL_CAN_ConfigFilter+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026fe:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002700:	4603      	mov	r3, r0
 8002702:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000

    return HAL_ERROR;
 8002706:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002708:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800270a:	4770      	bx	lr
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800270c:	4b40      	ldr	r3, [pc, #256]	; (8002810 <HAL_CAN_ConfigFilter+0x11c>)
 800270e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002712:	2001      	movs	r0, #1
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002714:	4302      	orrs	r2, r0
{
 8002716:	b430      	push	{r4, r5}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002718:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800271c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002720:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8002724:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002728:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800272c:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800272e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8002732:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002736:	694a      	ldr	r2, [r1, #20]
 8002738:	f002 041f 	and.w	r4, r2, #31
 800273c:	40a0      	lsls	r0, r4
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800273e:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
 8002742:	ea24 0400 	bic.w	r4, r4, r0
 8002746:	f8c3 421c 	str.w	r4, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800274a:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800274c:	43c4      	mvns	r4, r0
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800274e:	2d00      	cmp	r5, #0
 8002750:	d145      	bne.n	80027de <HAL_CAN_ConfigFilter+0xea>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002752:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 8002756:	4025      	ands	r5, r4
 8002758:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800275c:	00d2      	lsls	r2, r2, #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800275e:	68cd      	ldr	r5, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002760:	888b      	ldrh	r3, [r1, #4]
 8002762:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002766:	f502 42c8 	add.w	r2, r2, #25600	; 0x6400
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800276a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800276e:	f8c2 3240 	str.w	r3, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002772:	688d      	ldr	r5, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002774:	880b      	ldrh	r3, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002776:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800277a:	f8c2 3244 	str.w	r3, [r2, #580]	; 0x244
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800277e:	698b      	ldr	r3, [r1, #24]
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002780:	4a23      	ldr	r2, [pc, #140]	; (8002810 <HAL_CAN_ConfigFilter+0x11c>)
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002782:	bb33      	cbnz	r3, 80027d2 <HAL_CAN_ConfigFilter+0xde>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002784:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 8002788:	4023      	ands	r3, r4
 800278a:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800278e:	690b      	ldr	r3, [r1, #16]
 8002790:	b9c3      	cbnz	r3, 80027c4 <HAL_CAN_ConfigFilter+0xd0>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002792:	4b1f      	ldr	r3, [pc, #124]	; (8002810 <HAL_CAN_ConfigFilter+0x11c>)
 8002794:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002798:	4014      	ands	r4, r2
 800279a:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800279e:	6a0b      	ldr	r3, [r1, #32]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d105      	bne.n	80027b0 <HAL_CAN_ConfigFilter+0xbc>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80027a4:	4a1a      	ldr	r2, [pc, #104]	; (8002810 <HAL_CAN_ConfigFilter+0x11c>)
 80027a6:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
 80027aa:	4303      	orrs	r3, r0
 80027ac:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80027b0:	4a17      	ldr	r2, [pc, #92]	; (8002810 <HAL_CAN_ConfigFilter+0x11c>)
 80027b2:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 80027b6:	f023 0301 	bic.w	r3, r3, #1
    return HAL_OK;
 80027ba:	2000      	movs	r0, #0
}
 80027bc:	bc30      	pop	{r4, r5}
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80027be:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 80027c2:	4770      	bx	lr
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80027c4:	4a12      	ldr	r2, [pc, #72]	; (8002810 <HAL_CAN_ConfigFilter+0x11c>)
 80027c6:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 80027ca:	4303      	orrs	r3, r0
 80027cc:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 80027d0:	e7e5      	b.n	800279e <HAL_CAN_ConfigFilter+0xaa>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80027d2:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 80027d6:	4303      	orrs	r3, r0
 80027d8:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
 80027dc:	e7d7      	b.n	800278e <HAL_CAN_ConfigFilter+0x9a>
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80027de:	2d01      	cmp	r5, #1
 80027e0:	d1cd      	bne.n	800277e <HAL_CAN_ConfigFilter+0x8a>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80027e2:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 80027e6:	4305      	orrs	r5, r0
 80027e8:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027ec:	00d2      	lsls	r2, r2, #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80027ee:	680d      	ldr	r5, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80027f0:	888b      	ldrh	r3, [r1, #4]
 80027f2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80027f6:	f502 42c8 	add.w	r2, r2, #25600	; 0x6400
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80027fa:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027fe:	f8c2 3240 	str.w	r3, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002802:	688d      	ldr	r5, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002804:	898b      	ldrh	r3, [r1, #12]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002806:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800280a:	f8c2 3244 	str.w	r3, [r2, #580]	; 0x244
 800280e:	e7b6      	b.n	800277e <HAL_CAN_ConfigFilter+0x8a>
 8002810:	40006400 	.word	0x40006400

08002814 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002814:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002816:	f890 3020 	ldrb.w	r3, [r0, #32]
 800281a:	2b01      	cmp	r3, #1
{
 800281c:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 800281e:	d006      	beq.n	800282e <HAL_CAN_Start+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002820:	6a43      	ldr	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8002822:	2601      	movs	r6, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002824:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002828:	6243      	str	r3, [r0, #36]	; 0x24
  }
}
 800282a:	4630      	mov	r0, r6
 800282c:	bd70      	pop	{r4, r5, r6, pc}
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800282e:	6802      	ldr	r2, [r0, #0]
 8002830:	b2de      	uxtb	r6, r3
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002832:	2302      	movs	r3, #2
 8002834:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002838:	6813      	ldr	r3, [r2, #0]
 800283a:	f023 0301 	bic.w	r3, r3, #1
 800283e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002840:	f7ff fec0 	bl	80025c4 <HAL_GetTick>
 8002844:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002846:	e004      	b.n	8002852 <HAL_CAN_Start+0x3e>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002848:	f7ff febc 	bl	80025c4 <HAL_GetTick>
 800284c:	1b43      	subs	r3, r0, r5
 800284e:	2b0a      	cmp	r3, #10
 8002850:	d808      	bhi.n	8002864 <HAL_CAN_Start+0x50>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002852:	6823      	ldr	r3, [r4, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f013 0301 	ands.w	r3, r3, #1
 800285a:	d1f5      	bne.n	8002848 <HAL_CAN_Start+0x34>
    return HAL_OK;
 800285c:	461e      	mov	r6, r3
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800285e:	6263      	str	r3, [r4, #36]	; 0x24
}
 8002860:	4630      	mov	r0, r6
 8002862:	bd70      	pop	{r4, r5, r6, pc}
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002864:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8002866:	2205      	movs	r2, #5
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800286c:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 800286e:	f884 2020 	strb.w	r2, [r4, #32]
}
 8002872:	4630      	mov	r0, r6
 8002874:	bd70      	pop	{r4, r5, r6, pc}
 8002876:	bf00      	nop

08002878 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002878:	b430      	push	{r4, r5}
 800287a:	4684      	mov	ip, r0
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800287c:	f890 0020 	ldrb.w	r0, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002880:	f8dc 5000 	ldr.w	r5, [ip]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002884:	3801      	subs	r0, #1
 8002886:	2801      	cmp	r0, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002888:	68ac      	ldr	r4, [r5, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 800288a:	d835      	bhi.n	80028f8 <HAL_CAN_AddTxMessage+0x80>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800288c:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8002890:	d03b      	beq.n	800290a <HAL_CAN_AddTxMessage+0x92>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002892:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002896:	2c03      	cmp	r4, #3
 8002898:	d049      	beq.n	800292e <HAL_CAN_AddTxMessage+0xb6>

        return HAL_ERROR;
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800289a:	2001      	movs	r0, #1
 800289c:	40a0      	lsls	r0, r4
 800289e:	6018      	str	r0, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80028a0:	688b      	ldr	r3, [r1, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d03a      	beq.n	800291c <HAL_CAN_AddTxMessage+0xa4>
                                                           pHeader->RTR);
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
                                                           pHeader->IDE |
 80028a6:	68c8      	ldr	r0, [r1, #12]
 80028a8:	4303      	orrs	r3, r0
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028aa:	6848      	ldr	r0, [r1, #4]
                                                           pHeader->IDE |
 80028ac:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028b0:	f104 0018 	add.w	r0, r4, #24
 80028b4:	0100      	lsls	r0, r0, #4
 80028b6:	502b      	str	r3, [r5, r0]
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80028b8:	eb05 1c04 	add.w	ip, r5, r4, lsl #4
 80028bc:	690b      	ldr	r3, [r1, #16]
 80028be:	f8cc 3184 	str.w	r3, [ip, #388]	; 0x184

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80028c2:	7d0b      	ldrb	r3, [r1, #20]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	ea4f 1104 	mov.w	r1, r4, lsl #4
 80028ca:	d105      	bne.n	80028d8 <HAL_CAN_AddTxMessage+0x60>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80028cc:	f8dc 3184 	ldr.w	r3, [ip, #388]	; 0x184
 80028d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d4:	f8cc 3184 	str.w	r3, [ip, #388]	; 0x184
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80028d8:	186b      	adds	r3, r5, r1
 80028da:	6851      	ldr	r1, [r2, #4]
 80028dc:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80028e0:	6812      	ldr	r2, [r2, #0]
 80028e2:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80028e6:	f8dc 3180 	ldr.w	r3, [ip, #384]	; 0x180
 80028ea:	f043 0301 	orr.w	r3, r3, #1

      /* Return function status */
      return HAL_OK;
 80028ee:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 80028f0:	bc30      	pop	{r4, r5}
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80028f2:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
}
 80028f6:	4770      	bx	lr
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028f8:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 80028fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    return HAL_ERROR;
 8002900:	2001      	movs	r0, #1
}
 8002902:	bc30      	pop	{r4, r5}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002904:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 8002908:	4770      	bx	lr
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800290a:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 800290e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
      return HAL_ERROR;
 8002912:	2001      	movs	r0, #1
}
 8002914:	bc30      	pop	{r4, r5}
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002916:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 800291a:	4770      	bx	lr
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800291c:	68cb      	ldr	r3, [r1, #12]
 800291e:	6808      	ldr	r0, [r1, #0]
 8002920:	ea43 5040 	orr.w	r0, r3, r0, lsl #21
 8002924:	f104 0318 	add.w	r3, r4, #24
 8002928:	011b      	lsls	r3, r3, #4
 800292a:	50e8      	str	r0, [r5, r3]
 800292c:	e7c4      	b.n	80028b8 <HAL_CAN_AddTxMessage+0x40>
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800292e:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8002932:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
        return HAL_ERROR;
 8002936:	2001      	movs	r0, #1
}
 8002938:	bc30      	pop	{r4, r5}
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800293a:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 800293e:	4770      	bx	lr

08002940 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002940:	b570      	push	{r4, r5, r6, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8002942:	f890 e020 	ldrb.w	lr, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002946:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800294a:	f1be 0f01 	cmp.w	lr, #1
{
 800294e:	4684      	mov	ip, r0
  if ((state == HAL_CAN_STATE_READY) ||
 8002950:	d86d      	bhi.n	8002a2e <HAL_CAN_GetRxMessage+0xee>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002952:	6800      	ldr	r0, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002954:	b951      	cbnz	r1, 800296c <HAL_CAN_GetRxMessage+0x2c>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002956:	68c4      	ldr	r4, [r0, #12]
 8002958:	07a5      	lsls	r5, r4, #30
 800295a:	d10a      	bne.n	8002972 <HAL_CAN_GetRxMessage+0x32>
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800295c:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8002960:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000

        return HAL_ERROR;
 8002964:	2001      	movs	r0, #1
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002966:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 800296a:	bd70      	pop	{r4, r5, r6, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800296c:	6904      	ldr	r4, [r0, #16]
 800296e:	07a4      	lsls	r4, r4, #30
 8002970:	d0f4      	beq.n	800295c <HAL_CAN_GetRxMessage+0x1c>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002972:	eb00 1e01 	add.w	lr, r0, r1, lsl #4
 8002976:	010c      	lsls	r4, r1, #4
 8002978:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 800297c:	f005 0504 	and.w	r5, r5, #4
 8002980:	6095      	str	r5, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002982:	2d00      	cmp	r5, #0
 8002984:	d05a      	beq.n	8002a3c <HAL_CAN_GetRxMessage+0xfc>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002986:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 800298a:	08ed      	lsrs	r5, r5, #3
 800298c:	6055      	str	r5, [r2, #4]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800298e:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 8002992:	f005 0502 	and.w	r5, r5, #2
 8002996:	60d5      	str	r5, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002998:	f8de 51b4 	ldr.w	r5, [lr, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800299c:	f8de 61b4 	ldr.w	r6, [lr, #436]	; 0x1b4
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80029a0:	f005 050f 	and.w	r5, r5, #15
 80029a4:	6115      	str	r5, [r2, #16]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80029a6:	4420      	add	r0, r4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80029a8:	f8de 51b4 	ldr.w	r5, [lr, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80029ac:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80029b0:	6196      	str	r6, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80029b2:	0c2d      	lsrs	r5, r5, #16
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80029b4:	f8d0 61b8 	ldr.w	r6, [r0, #440]	; 0x1b8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80029b8:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80029ba:	701e      	strb	r6, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80029bc:	f8dc 2000 	ldr.w	r2, [ip]
 80029c0:	4422      	add	r2, r4
 80029c2:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80029c6:	0a12      	lsrs	r2, r2, #8
 80029c8:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80029ca:	f8dc 2000 	ldr.w	r2, [ip]
 80029ce:	4422      	add	r2, r4
 80029d0:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80029d4:	0c12      	lsrs	r2, r2, #16
 80029d6:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80029d8:	f8dc 2000 	ldr.w	r2, [ip]
 80029dc:	4422      	add	r2, r4
 80029de:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80029e2:	0e12      	lsrs	r2, r2, #24
 80029e4:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80029e6:	f8dc 2000 	ldr.w	r2, [ip]
 80029ea:	4422      	add	r2, r4
 80029ec:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80029f0:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80029f2:	f8dc 2000 	ldr.w	r2, [ip]
 80029f6:	4422      	add	r2, r4
 80029f8:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80029fc:	0a12      	lsrs	r2, r2, #8
 80029fe:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002a00:	f8dc 2000 	ldr.w	r2, [ip]
 8002a04:	4422      	add	r2, r4
 8002a06:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8002a0a:	0c12      	lsrs	r2, r2, #16
 8002a0c:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002a0e:	f8dc 2000 	ldr.w	r2, [ip]
 8002a12:	4422      	add	r2, r4
 8002a14:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8002a18:	0e12      	lsrs	r2, r2, #24
 8002a1a:	71da      	strb	r2, [r3, #7]
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002a1c:	f8dc 2000 	ldr.w	r2, [ip]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a20:	b989      	cbnz	r1, 8002a46 <HAL_CAN_GetRxMessage+0x106>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002a22:	68d3      	ldr	r3, [r2, #12]
 8002a24:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 8002a28:	4608      	mov	r0, r1
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002a2a:	60d3      	str	r3, [r2, #12]
}
 8002a2c:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a2e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    return HAL_ERROR;
 8002a34:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a36:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 8002a3a:	bd70      	pop	{r4, r5, r6, pc}
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002a3c:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 8002a40:	0d6d      	lsrs	r5, r5, #21
 8002a42:	6015      	str	r5, [r2, #0]
 8002a44:	e7a3      	b.n	800298e <HAL_CAN_GetRxMessage+0x4e>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002a46:	6913      	ldr	r3, [r2, #16]
 8002a48:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 8002a4c:	2000      	movs	r0, #0
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002a4e:	6113      	str	r3, [r2, #16]
}
 8002a50:	bd70      	pop	{r4, r5, r6, pc}
 8002a52:	bf00      	nop

08002a54 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a54:	f890 2020 	ldrb.w	r2, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a58:	3a01      	subs	r2, #1
 8002a5a:	2a01      	cmp	r2, #1
{
 8002a5c:	4603      	mov	r3, r0
  if ((state == HAL_CAN_STATE_READY) ||
 8002a5e:	d905      	bls.n	8002a6c <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a60:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002a62:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000

    return HAL_ERROR;
 8002a66:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a68:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8002a6a:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002a6c:	6802      	ldr	r2, [r0, #0]
 8002a6e:	6953      	ldr	r3, [r2, #20]
 8002a70:	430b      	orrs	r3, r1
    return HAL_OK;
 8002a72:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002a74:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8002a76:	4770      	bx	lr

08002a78 <HAL_CAN_TxMailbox0CompleteCallback>:
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop

08002a7c <HAL_CAN_TxMailbox1CompleteCallback>:
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop

08002a80 <HAL_CAN_TxMailbox2CompleteCallback>:
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop

08002a84 <HAL_CAN_TxMailbox0AbortCallback>:
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop

08002a88 <HAL_CAN_TxMailbox1AbortCallback>:
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop

08002a8c <HAL_CAN_TxMailbox2AbortCallback>:
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop

08002a90 <HAL_CAN_RxFifo0MsgPendingCallback>:
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop

08002a94 <HAL_CAN_RxFifo0FullCallback>:
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop

08002a98 <HAL_CAN_RxFifo1FullCallback>:
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop

08002a9c <HAL_CAN_SleepCallback>:
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop

08002aa0 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop

08002aa4 <HAL_CAN_ErrorCallback>:
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop

08002aa8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002aa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002aac:	6803      	ldr	r3, [r0, #0]
 8002aae:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002ab0:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002ab4:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002ab6:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002aba:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002abe:	f8d3 9018 	ldr.w	r9, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002ac2:	f014 0601 	ands.w	r6, r4, #1
{
 8002ac6:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002ac8:	d025      	beq.n	8002b16 <HAL_CAN_IRQHandler+0x6e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002aca:	f017 0601 	ands.w	r6, r7, #1
 8002ace:	f040 808f 	bne.w	8002bf0 <HAL_CAN_IRQHandler+0x148>
 8002ad2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ad6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002ada:	05f8      	lsls	r0, r7, #23
 8002adc:	d50d      	bpl.n	8002afa <HAL_CAN_IRQHandler+0x52>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002ade:	682b      	ldr	r3, [r5, #0]
 8002ae0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002ae4:	6098      	str	r0, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002ae6:	05bb      	lsls	r3, r7, #22
 8002ae8:	f100 80be 	bmi.w	8002c68 <HAL_CAN_IRQHandler+0x1c0>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002aec:	0578      	lsls	r0, r7, #21
 8002aee:	f100 80e4 	bmi.w	8002cba <HAL_CAN_IRQHandler+0x212>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002af2:	053b      	lsls	r3, r7, #20
 8002af4:	f140 80f0 	bpl.w	8002cd8 <HAL_CAN_IRQHandler+0x230>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002af8:	460e      	mov	r6, r1
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002afa:	03f8      	lsls	r0, r7, #15
 8002afc:	d50b      	bpl.n	8002b16 <HAL_CAN_IRQHandler+0x6e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002afe:	682b      	ldr	r3, [r5, #0]
 8002b00:	f44f 3280 	mov.w	r2, #65536	; 0x10000

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002b04:	03b9      	lsls	r1, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002b06:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002b08:	f100 80ba 	bmi.w	8002c80 <HAL_CAN_IRQHandler+0x1d8>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002b0c:	037a      	lsls	r2, r7, #13
 8002b0e:	f140 80cf 	bpl.w	8002cb0 <HAL_CAN_IRQHandler+0x208>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002b12:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002b16:	0727      	lsls	r7, r4, #28
 8002b18:	d502      	bpl.n	8002b20 <HAL_CAN_IRQHandler+0x78>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002b1a:	f01b 0f10 	tst.w	fp, #16
 8002b1e:	d161      	bne.n	8002be4 <HAL_CAN_IRQHandler+0x13c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002b20:	0760      	lsls	r0, r4, #29
 8002b22:	d503      	bpl.n	8002b2c <HAL_CAN_IRQHandler+0x84>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002b24:	f01b 0f08 	tst.w	fp, #8
 8002b28:	f040 808c 	bne.w	8002c44 <HAL_CAN_IRQHandler+0x19c>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002b2c:	07a1      	lsls	r1, r4, #30
 8002b2e:	d504      	bpl.n	8002b3a <HAL_CAN_IRQHandler+0x92>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002b30:	682b      	ldr	r3, [r5, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	079a      	lsls	r2, r3, #30
 8002b36:	f040 808c 	bne.w	8002c52 <HAL_CAN_IRQHandler+0x1aa>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002b3a:	0663      	lsls	r3, r4, #25
 8002b3c:	d502      	bpl.n	8002b44 <HAL_CAN_IRQHandler+0x9c>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002b3e:	f01a 0f10 	tst.w	sl, #16
 8002b42:	d149      	bne.n	8002bd8 <HAL_CAN_IRQHandler+0x130>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002b44:	06a7      	lsls	r7, r4, #26
 8002b46:	d502      	bpl.n	8002b4e <HAL_CAN_IRQHandler+0xa6>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002b48:	f01a 0f08 	tst.w	sl, #8
 8002b4c:	d173      	bne.n	8002c36 <HAL_CAN_IRQHandler+0x18e>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002b4e:	06e0      	lsls	r0, r4, #27
 8002b50:	d503      	bpl.n	8002b5a <HAL_CAN_IRQHandler+0xb2>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002b52:	682b      	ldr	r3, [r5, #0]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	0799      	lsls	r1, r3, #30
 8002b58:	d162      	bne.n	8002c20 <HAL_CAN_IRQHandler+0x178>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002b5a:	03a2      	lsls	r2, r4, #14
 8002b5c:	d502      	bpl.n	8002b64 <HAL_CAN_IRQHandler+0xbc>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002b5e:	f018 0f10 	tst.w	r8, #16
 8002b62:	d161      	bne.n	8002c28 <HAL_CAN_IRQHandler+0x180>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002b64:	03e3      	lsls	r3, r4, #15
 8002b66:	d502      	bpl.n	8002b6e <HAL_CAN_IRQHandler+0xc6>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002b68:	f018 0f08 	tst.w	r8, #8
 8002b6c:	d175      	bne.n	8002c5a <HAL_CAN_IRQHandler+0x1b2>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002b6e:	0427      	lsls	r7, r4, #16
 8002b70:	d505      	bpl.n	8002b7e <HAL_CAN_IRQHandler+0xd6>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002b72:	f018 0f04 	tst.w	r8, #4
 8002b76:	d106      	bne.n	8002b86 <HAL_CAN_IRQHandler+0xde>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002b78:	682b      	ldr	r3, [r5, #0]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002b7a:	2204      	movs	r2, #4
 8002b7c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002b7e:	2e00      	cmp	r6, #0
 8002b80:	d146      	bne.n	8002c10 <HAL_CAN_IRQHandler+0x168>
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002b82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b86:	05e0      	lsls	r0, r4, #23
 8002b88:	d504      	bpl.n	8002b94 <HAL_CAN_IRQHandler+0xec>
 8002b8a:	f019 0f01 	tst.w	r9, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 8002b8e:	bf18      	it	ne
 8002b90:	f046 0601 	orrne.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b94:	05a1      	lsls	r1, r4, #22
 8002b96:	d504      	bpl.n	8002ba2 <HAL_CAN_IRQHandler+0xfa>
 8002b98:	f019 0f02 	tst.w	r9, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 8002b9c:	bf18      	it	ne
 8002b9e:	f046 0602 	orrne.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002ba2:	0562      	lsls	r2, r4, #21
 8002ba4:	d504      	bpl.n	8002bb0 <HAL_CAN_IRQHandler+0x108>
 8002ba6:	f019 0f04 	tst.w	r9, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 8002baa:	bf18      	it	ne
 8002bac:	f046 0604 	orrne.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002bb0:	0523      	lsls	r3, r4, #20
 8002bb2:	d5e1      	bpl.n	8002b78 <HAL_CAN_IRQHandler+0xd0>
 8002bb4:	f019 0970 	ands.w	r9, r9, #112	; 0x70
 8002bb8:	d0de      	beq.n	8002b78 <HAL_CAN_IRQHandler+0xd0>
        switch (esrflags & CAN_ESR_LEC)
 8002bba:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 8002bbe:	f000 809a 	beq.w	8002cf6 <HAL_CAN_IRQHandler+0x24e>
 8002bc2:	d861      	bhi.n	8002c88 <HAL_CAN_IRQHandler+0x1e0>
 8002bc4:	f1b9 0f20 	cmp.w	r9, #32
 8002bc8:	f000 8083 	beq.w	8002cd2 <HAL_CAN_IRQHandler+0x22a>
 8002bcc:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 8002bd0:	d168      	bne.n	8002ca4 <HAL_CAN_IRQHandler+0x1fc>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002bd2:	f046 0620 	orr.w	r6, r6, #32
            break;
 8002bd6:	e05f      	b.n	8002c98 <HAL_CAN_IRQHandler+0x1f0>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002bd8:	682b      	ldr	r3, [r5, #0]
 8002bda:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002bdc:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002be0:	611a      	str	r2, [r3, #16]
 8002be2:	e7af      	b.n	8002b44 <HAL_CAN_IRQHandler+0x9c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002be4:	682b      	ldr	r3, [r5, #0]
 8002be6:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002be8:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002bec:	60da      	str	r2, [r3, #12]
 8002bee:	e797      	b.n	8002b20 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002bf4:	07bb      	lsls	r3, r7, #30
 8002bf6:	d43b      	bmi.n	8002c70 <HAL_CAN_IRQHandler+0x1c8>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002bf8:	077e      	lsls	r6, r7, #29
 8002bfa:	d460      	bmi.n	8002cbe <HAL_CAN_IRQHandler+0x216>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002bfc:	f017 0608 	ands.w	r6, r7, #8
 8002c00:	d06e      	beq.n	8002ce0 <HAL_CAN_IRQHandler+0x238>
 8002c02:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002c06:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002c0a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8002c0e:	e764      	b.n	8002ada <HAL_CAN_IRQHandler+0x32>
    hcan->ErrorCode |= errorcode;
 8002c10:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002c12:	4333      	orrs	r3, r6
    HAL_CAN_ErrorCallback(hcan);
 8002c14:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 8002c16:	626b      	str	r3, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8002c18:	f7ff ff44 	bl	8002aa4 <HAL_CAN_ErrorCallback>
}
 8002c1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002c20:	4628      	mov	r0, r5
 8002c22:	f7ff f80f 	bl	8001c44 <HAL_CAN_RxFifo1MsgPendingCallback>
 8002c26:	e798      	b.n	8002b5a <HAL_CAN_IRQHandler+0xb2>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002c28:	682b      	ldr	r3, [r5, #0]
 8002c2a:	2210      	movs	r2, #16
 8002c2c:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8002c2e:	4628      	mov	r0, r5
 8002c30:	f7ff ff34 	bl	8002a9c <HAL_CAN_SleepCallback>
 8002c34:	e796      	b.n	8002b64 <HAL_CAN_IRQHandler+0xbc>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002c36:	682b      	ldr	r3, [r5, #0]
 8002c38:	2208      	movs	r2, #8
 8002c3a:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002c3c:	4628      	mov	r0, r5
 8002c3e:	f7ff ff2b 	bl	8002a98 <HAL_CAN_RxFifo1FullCallback>
 8002c42:	e784      	b.n	8002b4e <HAL_CAN_IRQHandler+0xa6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002c44:	682b      	ldr	r3, [r5, #0]
 8002c46:	2208      	movs	r2, #8
 8002c48:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002c4a:	4628      	mov	r0, r5
 8002c4c:	f7ff ff22 	bl	8002a94 <HAL_CAN_RxFifo0FullCallback>
 8002c50:	e76c      	b.n	8002b2c <HAL_CAN_IRQHandler+0x84>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002c52:	4628      	mov	r0, r5
 8002c54:	f7ff ff1c 	bl	8002a90 <HAL_CAN_RxFifo0MsgPendingCallback>
 8002c58:	e76f      	b.n	8002b3a <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002c5a:	682b      	ldr	r3, [r5, #0]
 8002c5c:	2208      	movs	r2, #8
 8002c5e:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002c60:	4628      	mov	r0, r5
 8002c62:	f7ff ff1d 	bl	8002aa0 <HAL_CAN_WakeUpFromRxMsgCallback>
 8002c66:	e782      	b.n	8002b6e <HAL_CAN_IRQHandler+0xc6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002c68:	4628      	mov	r0, r5
 8002c6a:	f7ff ff07 	bl	8002a7c <HAL_CAN_TxMailbox1CompleteCallback>
 8002c6e:	e744      	b.n	8002afa <HAL_CAN_IRQHandler+0x52>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002c70:	f7ff ff02 	bl	8002a78 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002c74:	2600      	movs	r6, #0
 8002c76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c7e:	e72c      	b.n	8002ada <HAL_CAN_IRQHandler+0x32>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002c80:	4628      	mov	r0, r5
 8002c82:	f7ff fefd 	bl	8002a80 <HAL_CAN_TxMailbox2CompleteCallback>
 8002c86:	e746      	b.n	8002b16 <HAL_CAN_IRQHandler+0x6e>
        switch (esrflags & CAN_ESR_LEC)
 8002c88:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 8002c8c:	d01e      	beq.n	8002ccc <HAL_CAN_IRQHandler+0x224>
 8002c8e:	f1b9 0f60 	cmp.w	r9, #96	; 0x60
            errorcode |= HAL_CAN_ERROR_CRC;
 8002c92:	bf08      	it	eq
 8002c94:	f446 7680 	orreq.w	r6, r6, #256	; 0x100
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002c98:	682b      	ldr	r3, [r5, #0]
 8002c9a:	699a      	ldr	r2, [r3, #24]
 8002c9c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002ca0:	619a      	str	r2, [r3, #24]
 8002ca2:	e76a      	b.n	8002b7a <HAL_CAN_IRQHandler+0xd2>
        switch (esrflags & CAN_ESR_LEC)
 8002ca4:	f1b9 0f10 	cmp.w	r9, #16
 8002ca8:	d1f6      	bne.n	8002c98 <HAL_CAN_IRQHandler+0x1f0>
            errorcode |= HAL_CAN_ERROR_STF;
 8002caa:	f046 0608 	orr.w	r6, r6, #8
            break;
 8002cae:	e7f3      	b.n	8002c98 <HAL_CAN_IRQHandler+0x1f0>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002cb0:	033b      	lsls	r3, r7, #12
 8002cb2:	d51c      	bpl.n	8002cee <HAL_CAN_IRQHandler+0x246>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002cb4:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 8002cb8:	e72d      	b.n	8002b16 <HAL_CAN_IRQHandler+0x6e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002cba:	4616      	mov	r6, r2
 8002cbc:	e71d      	b.n	8002afa <HAL_CAN_IRQHandler+0x52>
 8002cbe:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8002cc2:	f44f 4190 	mov.w	r1, #18432	; 0x4800
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002cc6:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8002cca:	e706      	b.n	8002ada <HAL_CAN_IRQHandler+0x32>
            errorcode |= HAL_CAN_ERROR_BD;
 8002ccc:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 8002cd0:	e7e2      	b.n	8002c98 <HAL_CAN_IRQHandler+0x1f0>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002cd2:	f046 0610 	orr.w	r6, r6, #16
            break;
 8002cd6:	e7df      	b.n	8002c98 <HAL_CAN_IRQHandler+0x1f0>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002cd8:	4628      	mov	r0, r5
 8002cda:	f7ff fed5 	bl	8002a88 <HAL_CAN_TxMailbox1AbortCallback>
 8002cde:	e70c      	b.n	8002afa <HAL_CAN_IRQHandler+0x52>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002ce0:	f7ff fed0 	bl	8002a84 <HAL_CAN_TxMailbox0AbortCallback>
 8002ce4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ce8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cec:	e6f5      	b.n	8002ada <HAL_CAN_IRQHandler+0x32>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002cee:	4628      	mov	r0, r5
 8002cf0:	f7ff fecc 	bl	8002a8c <HAL_CAN_TxMailbox2AbortCallback>
 8002cf4:	e70f      	b.n	8002b16 <HAL_CAN_IRQHandler+0x6e>
            errorcode |= HAL_CAN_ERROR_BR;
 8002cf6:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            break;
 8002cfa:	e7cd      	b.n	8002c98 <HAL_CAN_IRQHandler+0x1f0>

08002cfc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cfc:	4907      	ldr	r1, [pc, #28]	; (8002d1c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002cfe:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d00:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d02:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d0a:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d0c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d0e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002d16:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d20:	4b1c      	ldr	r3, [pc, #112]	; (8002d94 <HAL_NVIC_SetPriority+0x74>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d28:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d2a:	f1c3 0e07 	rsb	lr, r3, #7
 8002d2e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d32:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d36:	bf28      	it	cs
 8002d38:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d3c:	f1bc 0f06 	cmp.w	ip, #6
 8002d40:	d91b      	bls.n	8002d7a <HAL_NVIC_SetPriority+0x5a>
 8002d42:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d44:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8002d48:	fa0c fc03 	lsl.w	ip, ip, r3
 8002d4c:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d50:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8002d54:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002d58:	ea21 010c 	bic.w	r1, r1, ip
 8002d5c:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002d5e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d60:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002d64:	db0c      	blt.n	8002d80 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d66:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002d6a:	0109      	lsls	r1, r1, #4
 8002d6c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002d70:	b2c9      	uxtb	r1, r1
 8002d72:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002d76:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d7a:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	e7e7      	b.n	8002d50 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d80:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <HAL_NVIC_SetPriority+0x78>)
 8002d82:	f000 000f 	and.w	r0, r0, #15
 8002d86:	0109      	lsls	r1, r1, #4
 8002d88:	4403      	add	r3, r0
 8002d8a:	b2c9      	uxtb	r1, r1
 8002d8c:	7619      	strb	r1, [r3, #24]
 8002d8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d92:	bf00      	nop
 8002d94:	e000ed00 	.word	0xe000ed00
 8002d98:	e000ecfc 	.word	0xe000ecfc

08002d9c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002d9c:	2800      	cmp	r0, #0
 8002d9e:	db07      	blt.n	8002db0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002da0:	0941      	lsrs	r1, r0, #5
 8002da2:	4a04      	ldr	r2, [pc, #16]	; (8002db4 <HAL_NVIC_EnableIRQ+0x18>)
 8002da4:	f000 001f 	and.w	r0, r0, #31
 8002da8:	2301      	movs	r3, #1
 8002daa:	4083      	lsls	r3, r0
 8002dac:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	e000e100 	.word	0xe000e100

08002db8 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8002db8:	b188      	cbz	r0, 8002dde <HAL_DAC_Init+0x26>
{
 8002dba:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002dbc:	7903      	ldrb	r3, [r0, #4]
 8002dbe:	4604      	mov	r4, r0
 8002dc0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002dc4:	b13b      	cbz	r3, 8002dd6 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002dc6:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8002dc8:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002dca:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8002dcc:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002dce:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8002dd0:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8002dd2:	4618      	mov	r0, r3
}
 8002dd4:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8002dd6:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8002dd8:	f7ff fa28 	bl	800222c <HAL_DAC_MspInit>
 8002ddc:	e7f3      	b.n	8002dc6 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8002dde:	2001      	movs	r0, #1
}
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop

08002de4 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002de4:	7943      	ldrb	r3, [r0, #5]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d02a      	beq.n	8002e40 <HAL_DAC_Start+0x5c>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002dea:	6802      	ldr	r2, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8002dec:	2302      	movs	r3, #2
{
 8002dee:	b410      	push	{r4}
  hdac->State = HAL_DAC_STATE_BUSY;
 8002df0:	7103      	strb	r3, [r0, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 8002df2:	6814      	ldr	r4, [r2, #0]
 8002df4:	f001 0c10 	and.w	ip, r1, #16
 8002df8:	2301      	movs	r3, #1
 8002dfa:	fa03 f30c 	lsl.w	r3, r3, ip
 8002dfe:	4323      	orrs	r3, r4
 8002e00:	6013      	str	r3, [r2, #0]

  if (Channel == DAC_CHANNEL_1)
 8002e02:	b981      	cbnz	r1, 8002e26 <HAL_DAC_Start+0x42>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002e04:	6813      	ldr	r3, [r2, #0]
 8002e06:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002e0a:	2b3c      	cmp	r3, #60	; 0x3c
 8002e0c:	d103      	bne.n	8002e16 <HAL_DAC_Start+0x32>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002e0e:	6853      	ldr	r3, [r2, #4]
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	6053      	str	r3, [r2, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e16:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_READY;
 8002e18:	2201      	movs	r2, #1
 8002e1a:	7102      	strb	r2, [r0, #4]
  __HAL_UNLOCK(hdac);
 8002e1c:	7143      	strb	r3, [r0, #5]

  /* Return function status */
  return HAL_OK;
}
 8002e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8002e22:	4618      	mov	r0, r3
}
 8002e24:	4770      	bx	lr
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002e26:	6811      	ldr	r1, [r2, #0]
 8002e28:	233c      	movs	r3, #60	; 0x3c
 8002e2a:	f401 1170 	and.w	r1, r1, #3932160	; 0x3c0000
 8002e2e:	fa03 f30c 	lsl.w	r3, r3, ip
 8002e32:	4299      	cmp	r1, r3
 8002e34:	d1ef      	bne.n	8002e16 <HAL_DAC_Start+0x32>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002e36:	6853      	ldr	r3, [r2, #4]
 8002e38:	f043 0302 	orr.w	r3, r3, #2
 8002e3c:	6053      	str	r3, [r2, #4]
 8002e3e:	e7ea      	b.n	8002e16 <HAL_DAC_Start+0x32>
  __HAL_LOCK(hdac);
 8002e40:	2002      	movs	r0, #2
}
 8002e42:	4770      	bx	lr

08002e44 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002e44:	b410      	push	{r4}
 8002e46:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002e48:	6800      	ldr	r0, [r0, #0]
  __IO uint32_t tmp = 0UL;
 8002e4a:	2400      	movs	r4, #0
 8002e4c:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance;
 8002e4e:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8002e50:	b951      	cbnz	r1, 8002e68 <HAL_DAC_SetValue+0x24>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002e52:	9901      	ldr	r1, [sp, #4]
 8002e54:	3108      	adds	r1, #8
 8002e56:	440a      	add	r2, r1
 8002e58:	9201      	str	r2, [sp, #4]
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002e5a:	9a01      	ldr	r2, [sp, #4]

  /* Return function status */
  return HAL_OK;
}
 8002e5c:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 8002e5e:	6013      	str	r3, [r2, #0]
}
 8002e60:	b003      	add	sp, #12
 8002e62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e66:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002e68:	9901      	ldr	r1, [sp, #4]
 8002e6a:	3114      	adds	r1, #20
 8002e6c:	440a      	add	r2, r1
 8002e6e:	9201      	str	r2, [sp, #4]
 8002e70:	e7f3      	b.n	8002e5a <HAL_DAC_SetValue+0x16>
 8002e72:	bf00      	nop

08002e74 <HAL_DAC_DMAUnderrunCallbackCh1>:
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop

08002e78 <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002e78:	6803      	ldr	r3, [r0, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	0491      	lsls	r1, r2, #18
{
 8002e7e:	b510      	push	{r4, lr}
 8002e80:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002e82:	d502      	bpl.n	8002e8a <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002e84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e86:	0492      	lsls	r2, r2, #18
 8002e88:	d418      	bmi.n	8002ebc <HAL_DAC_IRQHandler+0x44>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	0091      	lsls	r1, r2, #2
 8002e8e:	d502      	bpl.n	8002e96 <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002e90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e92:	0092      	lsls	r2, r2, #2
 8002e94:	d400      	bmi.n	8002e98 <HAL_DAC_IRQHandler+0x20>
}
 8002e96:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8002e98:	2204      	movs	r2, #4
 8002e9a:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002e9c:	6922      	ldr	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002e9e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002ea2:	f042 0202 	orr.w	r2, r2, #2
 8002ea6:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002ea8:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002eb0:	4620      	mov	r0, r4
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002eb2:	601a      	str	r2, [r3, #0]
}
 8002eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002eb8:	f000 b838 	b.w	8002f2c <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8002ebc:	2204      	movs	r2, #4
 8002ebe:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002ec0:	6902      	ldr	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002ec2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002ec6:	f042 0201 	orr.w	r2, r2, #1
 8002eca:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002ecc:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ed4:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002ed6:	f7ff ffcd 	bl	8002e74 <HAL_DAC_DMAUnderrunCallbackCh1>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002eda:	6823      	ldr	r3, [r4, #0]
 8002edc:	e7d5      	b.n	8002e8a <HAL_DAC_IRQHandler+0x12>
 8002ede:	bf00      	nop

08002ee0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002ee0:	4603      	mov	r3, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002ee2:	7940      	ldrb	r0, [r0, #5]
 8002ee4:	2801      	cmp	r0, #1
 8002ee6:	d01f      	beq.n	8002f28 <HAL_DAC_ConfigChannel+0x48>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ee8:	2002      	movs	r0, #2
{
 8002eea:	b430      	push	{r4, r5}
  hdac->State = HAL_DAC_STATE_BUSY;
 8002eec:	7118      	strb	r0, [r3, #4]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002eee:	e9d1 0100 	ldrd	r0, r1, [r1]
  tmpreg1 = hdac->Instance->CR;
 8002ef2:	681c      	ldr	r4, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002ef4:	f002 0210 	and.w	r2, r2, #16
  tmpreg1 = hdac->Instance->CR;
 8002ef8:	6825      	ldr	r5, [r4, #0]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002efa:	4301      	orrs	r1, r0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002efc:	f640 70fe 	movw	r0, #4094	; 0xffe
 8002f00:	4090      	lsls	r0, r2
 8002f02:	ea25 0000 	bic.w	r0, r5, r0
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f06:	4091      	lsls	r1, r2
 8002f08:	4301      	orrs	r1, r0
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002f0a:	6021      	str	r1, [r4, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002f0c:	6821      	ldr	r1, [r4, #0]
 8002f0e:	20c0      	movs	r0, #192	; 0xc0
 8002f10:	fa00 f202 	lsl.w	r2, r0, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f14:	2500      	movs	r5, #0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002f16:	ea21 0202 	bic.w	r2, r1, r2
  hdac->State = HAL_DAC_STATE_READY;
 8002f1a:	2101      	movs	r1, #1
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002f1c:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8002f1e:	7119      	strb	r1, [r3, #4]
  __HAL_UNLOCK(hdac);
 8002f20:	715d      	strb	r5, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002f22:	4628      	mov	r0, r5
}
 8002f24:	bc30      	pop	{r4, r5}
 8002f26:	4770      	bx	lr
  __HAL_LOCK(hdac);
 8002f28:	2002      	movs	r0, #2
}
 8002f2a:	4770      	bx	lr

08002f2c <HAL_DACEx_DMAUnderrunCallbackCh2>:
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop

08002f30 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f30:	b570      	push	{r4, r5, r6, lr}
 8002f32:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f34:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8002f36:	f7ff fb45 	bl	80025c4 <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f3a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d006      	beq.n	8002f50 <HAL_DMA_Abort+0x20>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f42:	2380      	movs	r3, #128	; 0x80
 8002f44:	6563      	str	r3, [r4, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f46:	2300      	movs	r3, #0
 8002f48:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    return HAL_ERROR;
 8002f4c:	2001      	movs	r0, #1
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }
  return HAL_OK;
}
 8002f4e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f50:	6823      	ldr	r3, [r4, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	f022 0216 	bic.w	r2, r2, #22
 8002f58:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f5a:	695a      	ldr	r2, [r3, #20]
 8002f5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f60:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f62:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002f64:	4605      	mov	r5, r0
 8002f66:	b342      	cbz	r2, 8002fba <HAL_DMA_Abort+0x8a>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	f022 0208 	bic.w	r2, r2, #8
 8002f6e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	f022 0201 	bic.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f78:	e005      	b.n	8002f86 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f7a:	f7ff fb23 	bl	80025c4 <HAL_GetTick>
 8002f7e:	1b43      	subs	r3, r0, r5
 8002f80:	2b05      	cmp	r3, #5
 8002f82:	d810      	bhi.n	8002fa6 <HAL_DMA_Abort+0x76>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f84:	6823      	ldr	r3, [r4, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f013 0301 	ands.w	r3, r3, #1
 8002f8c:	d1f5      	bne.n	8002f7a <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f8e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002f90:	223f      	movs	r2, #63	; 0x3f
 8002f92:	408a      	lsls	r2, r1
  return HAL_OK;
 8002f94:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 8002f96:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 8002f98:	2300      	movs	r3, #0
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f9a:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8002f9c:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8002fa0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8002fa4:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fa8:	2220      	movs	r2, #32
 8002faa:	6562      	str	r2, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8002fac:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fae:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8002fb8:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fba:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002fbc:	2a00      	cmp	r2, #0
 8002fbe:	d1d3      	bne.n	8002f68 <HAL_DMA_Abort+0x38>
 8002fc0:	e7d6      	b.n	8002f70 <HAL_DMA_Abort+0x40>
 8002fc2:	bf00      	nop

08002fc4 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fc4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d003      	beq.n	8002fd4 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fcc:	2380      	movs	r3, #128	; 0x80
 8002fce:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8002fd0:	2001      	movs	r0, #1
 8002fd2:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fd4:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fd6:	2305      	movs	r3, #5
 8002fd8:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8002fdc:	6813      	ldr	r3, [r2, #0]
 8002fde:	f023 0301 	bic.w	r3, r3, #1
  }

  return HAL_OK;
 8002fe2:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8002fe4:	6013      	str	r3, [r2, #0]
}
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fec:	2200      	movs	r2, #0
 8002fee:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ff0:	f8df a230 	ldr.w	sl, [pc, #560]	; 8003224 <HAL_GPIO_Init+0x23c>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ff4:	4e84      	ldr	r6, [pc, #528]	; (8003208 <HAL_GPIO_Init+0x220>)
{
 8002ff6:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ff8:	4613      	mov	r3, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ffa:	4689      	mov	r9, r1
 8002ffc:	e005      	b.n	800300a <HAL_GPIO_Init+0x22>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ffe:	3301      	adds	r3, #1
 8003000:	2b10      	cmp	r3, #16
 8003002:	f102 0202 	add.w	r2, r2, #2
 8003006:	f000 808a 	beq.w	800311e <HAL_GPIO_Init+0x136>
    ioposition = 0x01U << position;
 800300a:	2101      	movs	r1, #1
 800300c:	4099      	lsls	r1, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800300e:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 8003012:	43a1      	bics	r1, r4
 8003014:	d1f3      	bne.n	8002ffe <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003016:	f8d9 c004 	ldr.w	ip, [r9, #4]
 800301a:	f00c 0103 	and.w	r1, ip, #3
 800301e:	1e4d      	subs	r5, r1, #1
 8003020:	2d01      	cmp	r5, #1
 8003022:	d97f      	bls.n	8003124 <HAL_GPIO_Init+0x13c>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003024:	2903      	cmp	r1, #3
 8003026:	f040 80c0 	bne.w	80031aa <HAL_GPIO_Init+0x1c2>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800302a:	4091      	lsls	r1, r2
 800302c:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 800302e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003030:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003032:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003034:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 8003038:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800303a:	d0e0      	beq.n	8002ffe <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800303c:	2100      	movs	r1, #0
 800303e:	9103      	str	r1, [sp, #12]
 8003040:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 8003044:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8003048:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
 800304c:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 8003050:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8003054:	9103      	str	r1, [sp, #12]
 8003056:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003058:	f023 0103 	bic.w	r1, r3, #3
 800305c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8003060:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003064:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8003068:	688d      	ldr	r5, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800306a:	00bf      	lsls	r7, r7, #2
 800306c:	f04f 0e0f 	mov.w	lr, #15
 8003070:	fa0e fe07 	lsl.w	lr, lr, r7
 8003074:	ea25 080e 	bic.w	r8, r5, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003078:	4d64      	ldr	r5, [pc, #400]	; (800320c <HAL_GPIO_Init+0x224>)
 800307a:	42a8      	cmp	r0, r5
 800307c:	d024      	beq.n	80030c8 <HAL_GPIO_Init+0xe0>
 800307e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003082:	42a8      	cmp	r0, r5
 8003084:	f000 8095 	beq.w	80031b2 <HAL_GPIO_Init+0x1ca>
 8003088:	4d61      	ldr	r5, [pc, #388]	; (8003210 <HAL_GPIO_Init+0x228>)
 800308a:	42a8      	cmp	r0, r5
 800308c:	f000 8098 	beq.w	80031c0 <HAL_GPIO_Init+0x1d8>
 8003090:	4d60      	ldr	r5, [pc, #384]	; (8003214 <HAL_GPIO_Init+0x22c>)
 8003092:	42a8      	cmp	r0, r5
 8003094:	f000 809b 	beq.w	80031ce <HAL_GPIO_Init+0x1e6>
 8003098:	4d5f      	ldr	r5, [pc, #380]	; (8003218 <HAL_GPIO_Init+0x230>)
 800309a:	42a8      	cmp	r0, r5
 800309c:	f000 809e 	beq.w	80031dc <HAL_GPIO_Init+0x1f4>
 80030a0:	4d5e      	ldr	r5, [pc, #376]	; (800321c <HAL_GPIO_Init+0x234>)
 80030a2:	42a8      	cmp	r0, r5
 80030a4:	f000 80a1 	beq.w	80031ea <HAL_GPIO_Init+0x202>
 80030a8:	4d5d      	ldr	r5, [pc, #372]	; (8003220 <HAL_GPIO_Init+0x238>)
 80030aa:	42a8      	cmp	r0, r5
 80030ac:	f000 80a4 	beq.w	80031f8 <HAL_GPIO_Init+0x210>
 80030b0:	f8df e174 	ldr.w	lr, [pc, #372]	; 8003228 <HAL_GPIO_Init+0x240>
 80030b4:	4570      	cmp	r0, lr
 80030b6:	bf0c      	ite	eq
 80030b8:	f04f 0e07 	moveq.w	lr, #7
 80030bc:	f04f 0e08 	movne.w	lr, #8
 80030c0:	fa0e f707 	lsl.w	r7, lr, r7
 80030c4:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030c8:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 80030cc:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 80030ce:	ea6f 050b 	mvn.w	r5, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030d2:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80030d6:	bf0c      	ite	eq
 80030d8:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 80030da:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 80030de:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 80030e0:	68f1      	ldr	r1, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030e2:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 80030e6:	bf0c      	ite	eq
 80030e8:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 80030ea:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->FTSR = temp;
 80030ee:	60f1      	str	r1, [r6, #12]

        temp = EXTI->EMR;
 80030f0:	6871      	ldr	r1, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030f2:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80030f6:	bf0c      	ite	eq
 80030f8:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 80030fa:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->EMR = temp;
 80030fe:	6071      	str	r1, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003100:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003102:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003106:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 800310a:	bf0c      	ite	eq
 800310c:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 800310e:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003112:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 8003114:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003116:	f102 0202 	add.w	r2, r2, #2
 800311a:	f47f af76 	bne.w	800300a <HAL_GPIO_Init+0x22>
      }
    }
  }
}
 800311e:	b005      	add	sp, #20
 8003120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003124:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 8003128:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800312c:	fa05 f702 	lsl.w	r7, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003130:	2503      	movs	r5, #3
 8003132:	fa05 f802 	lsl.w	r8, r5, r2
 8003136:	ea2e 0e08 	bic.w	lr, lr, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 800313a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800313e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003140:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003142:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003146:	f3cc 1700 	ubfx	r7, ip, #4, #1
 800314a:	409f      	lsls	r7, r3
 800314c:	ea47 070e 	orr.w	r7, r7, lr
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003150:	ea6f 0508 	mvn.w	r5, r8
        GPIOx->OTYPER = temp;
 8003154:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8003156:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003158:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800315c:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8003160:	4097      	lsls	r7, r2
 8003162:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003166:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 8003168:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800316a:	fa01 f102 	lsl.w	r1, r1, r2
 800316e:	f47f af5e 	bne.w	800302e <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3U];
 8003172:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8003176:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800317a:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800317e:	f8de 7020 	ldr.w	r7, [lr, #32]
 8003182:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003184:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003188:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800318c:	fa07 f708 	lsl.w	r7, r7, r8
 8003190:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003192:	270f      	movs	r7, #15
 8003194:	fa07 f808 	lsl.w	r8, r7, r8
 8003198:	9f00      	ldr	r7, [sp, #0]
 800319a:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800319e:	9f01      	ldr	r7, [sp, #4]
 80031a0:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 80031a4:	f8ce 7020 	str.w	r7, [lr, #32]
 80031a8:	e741      	b.n	800302e <HAL_GPIO_Init+0x46>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031aa:	2503      	movs	r5, #3
 80031ac:	4095      	lsls	r5, r2
 80031ae:	43ed      	mvns	r5, r5
 80031b0:	e7d1      	b.n	8003156 <HAL_GPIO_Init+0x16e>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031b2:	f04f 0e01 	mov.w	lr, #1
 80031b6:	fa0e f707 	lsl.w	r7, lr, r7
 80031ba:	ea48 0807 	orr.w	r8, r8, r7
 80031be:	e783      	b.n	80030c8 <HAL_GPIO_Init+0xe0>
 80031c0:	f04f 0e02 	mov.w	lr, #2
 80031c4:	fa0e f707 	lsl.w	r7, lr, r7
 80031c8:	ea48 0807 	orr.w	r8, r8, r7
 80031cc:	e77c      	b.n	80030c8 <HAL_GPIO_Init+0xe0>
 80031ce:	f04f 0e03 	mov.w	lr, #3
 80031d2:	fa0e f707 	lsl.w	r7, lr, r7
 80031d6:	ea48 0807 	orr.w	r8, r8, r7
 80031da:	e775      	b.n	80030c8 <HAL_GPIO_Init+0xe0>
 80031dc:	f04f 0e04 	mov.w	lr, #4
 80031e0:	fa0e f707 	lsl.w	r7, lr, r7
 80031e4:	ea48 0807 	orr.w	r8, r8, r7
 80031e8:	e76e      	b.n	80030c8 <HAL_GPIO_Init+0xe0>
 80031ea:	f04f 0e05 	mov.w	lr, #5
 80031ee:	fa0e f707 	lsl.w	r7, lr, r7
 80031f2:	ea48 0807 	orr.w	r8, r8, r7
 80031f6:	e767      	b.n	80030c8 <HAL_GPIO_Init+0xe0>
 80031f8:	f04f 0e06 	mov.w	lr, #6
 80031fc:	fa0e f707 	lsl.w	r7, lr, r7
 8003200:	ea48 0807 	orr.w	r8, r8, r7
 8003204:	e760      	b.n	80030c8 <HAL_GPIO_Init+0xe0>
 8003206:	bf00      	nop
 8003208:	40013c00 	.word	0x40013c00
 800320c:	40020000 	.word	0x40020000
 8003210:	40020800 	.word	0x40020800
 8003214:	40020c00 	.word	0x40020c00
 8003218:	40021000 	.word	0x40021000
 800321c:	40021400 	.word	0x40021400
 8003220:	40021800 	.word	0x40021800
 8003224:	40023800 	.word	0x40023800
 8003228:	40021c00 	.word	0x40021c00

0800322c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800322c:	b902      	cbnz	r2, 8003230 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800322e:	0409      	lsls	r1, r1, #16
 8003230:	6181      	str	r1, [r0, #24]
  }
}
 8003232:	4770      	bx	lr

08003234 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003234:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003236:	ea01 0203 	and.w	r2, r1, r3
 800323a:	ea21 0103 	bic.w	r1, r1, r3
 800323e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003242:	6181      	str	r1, [r0, #24]
}
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop

08003248 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003248:	2800      	cmp	r0, #0
 800324a:	f000 81a2 	beq.w	8003592 <HAL_RCC_OscConfig+0x34a>
{
 800324e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003252:	6803      	ldr	r3, [r0, #0]
 8003254:	07dd      	lsls	r5, r3, #31
{
 8003256:	b082      	sub	sp, #8
 8003258:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800325a:	d52f      	bpl.n	80032bc <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800325c:	499e      	ldr	r1, [pc, #632]	; (80034d8 <HAL_RCC_OscConfig+0x290>)
 800325e:	688a      	ldr	r2, [r1, #8]
 8003260:	f002 020c 	and.w	r2, r2, #12
 8003264:	2a04      	cmp	r2, #4
 8003266:	f000 80ed 	beq.w	8003444 <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800326a:	688a      	ldr	r2, [r1, #8]
 800326c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003270:	2a08      	cmp	r2, #8
 8003272:	f000 80e3 	beq.w	800343c <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003276:	6863      	ldr	r3, [r4, #4]
 8003278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800327c:	f000 80ec 	beq.w	8003458 <HAL_RCC_OscConfig+0x210>
 8003280:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003284:	f000 8175 	beq.w	8003572 <HAL_RCC_OscConfig+0x32a>
 8003288:	4d93      	ldr	r5, [pc, #588]	; (80034d8 <HAL_RCC_OscConfig+0x290>)
 800328a:	682a      	ldr	r2, [r5, #0]
 800328c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003290:	602a      	str	r2, [r5, #0]
 8003292:	682a      	ldr	r2, [r5, #0]
 8003294:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003298:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800329a:	2b00      	cmp	r3, #0
 800329c:	f040 80e1 	bne.w	8003462 <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a0:	f7ff f990 	bl	80025c4 <HAL_GetTick>
 80032a4:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a6:	e005      	b.n	80032b4 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032a8:	f7ff f98c 	bl	80025c4 <HAL_GetTick>
 80032ac:	1b80      	subs	r0, r0, r6
 80032ae:	2864      	cmp	r0, #100	; 0x64
 80032b0:	f200 8101 	bhi.w	80034b6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b4:	682b      	ldr	r3, [r5, #0]
 80032b6:	039b      	lsls	r3, r3, #14
 80032b8:	d4f6      	bmi.n	80032a8 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ba:	6823      	ldr	r3, [r4, #0]
 80032bc:	079f      	lsls	r7, r3, #30
 80032be:	d528      	bpl.n	8003312 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032c0:	4a85      	ldr	r2, [pc, #532]	; (80034d8 <HAL_RCC_OscConfig+0x290>)
 80032c2:	6891      	ldr	r1, [r2, #8]
 80032c4:	f011 0f0c 	tst.w	r1, #12
 80032c8:	f000 8090 	beq.w	80033ec <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032cc:	6891      	ldr	r1, [r2, #8]
 80032ce:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032d2:	2908      	cmp	r1, #8
 80032d4:	f000 8086 	beq.w	80033e4 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032d8:	68e3      	ldr	r3, [r4, #12]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 810e 	beq.w	80034fc <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032e0:	4b7e      	ldr	r3, [pc, #504]	; (80034dc <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e2:	4e7d      	ldr	r6, [pc, #500]	; (80034d8 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 80032e4:	2201      	movs	r2, #1
 80032e6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80032e8:	f7ff f96c 	bl	80025c4 <HAL_GetTick>
 80032ec:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ee:	e005      	b.n	80032fc <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032f0:	f7ff f968 	bl	80025c4 <HAL_GetTick>
 80032f4:	1b40      	subs	r0, r0, r5
 80032f6:	2802      	cmp	r0, #2
 80032f8:	f200 80dd 	bhi.w	80034b6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032fc:	6833      	ldr	r3, [r6, #0]
 80032fe:	0798      	lsls	r0, r3, #30
 8003300:	d5f6      	bpl.n	80032f0 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003302:	6833      	ldr	r3, [r6, #0]
 8003304:	6922      	ldr	r2, [r4, #16]
 8003306:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800330a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800330e:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003310:	6823      	ldr	r3, [r4, #0]
 8003312:	071a      	lsls	r2, r3, #28
 8003314:	d451      	bmi.n	80033ba <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003316:	0758      	lsls	r0, r3, #29
 8003318:	d52f      	bpl.n	800337a <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800331a:	4a6f      	ldr	r2, [pc, #444]	; (80034d8 <HAL_RCC_OscConfig+0x290>)
 800331c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800331e:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8003322:	d07f      	beq.n	8003424 <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 8003324:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003326:	4e6e      	ldr	r6, [pc, #440]	; (80034e0 <HAL_RCC_OscConfig+0x298>)
 8003328:	6833      	ldr	r3, [r6, #0]
 800332a:	05d9      	lsls	r1, r3, #23
 800332c:	f140 80b3 	bpl.w	8003496 <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003330:	68a3      	ldr	r3, [r4, #8]
 8003332:	2b01      	cmp	r3, #1
 8003334:	f000 80c3 	beq.w	80034be <HAL_RCC_OscConfig+0x276>
 8003338:	2b05      	cmp	r3, #5
 800333a:	f000 812c 	beq.w	8003596 <HAL_RCC_OscConfig+0x34e>
 800333e:	4e66      	ldr	r6, [pc, #408]	; (80034d8 <HAL_RCC_OscConfig+0x290>)
 8003340:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8003342:	f022 0201 	bic.w	r2, r2, #1
 8003346:	6732      	str	r2, [r6, #112]	; 0x70
 8003348:	6f32      	ldr	r2, [r6, #112]	; 0x70
 800334a:	f022 0204 	bic.w	r2, r2, #4
 800334e:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003350:	2b00      	cmp	r3, #0
 8003352:	f040 80b9 	bne.w	80034c8 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003356:	f7ff f935 	bl	80025c4 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800335a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800335e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003360:	e005      	b.n	800336e <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003362:	f7ff f92f 	bl	80025c4 <HAL_GetTick>
 8003366:	1bc0      	subs	r0, r0, r7
 8003368:	4540      	cmp	r0, r8
 800336a:	f200 80a4 	bhi.w	80034b6 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800336e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003370:	0798      	lsls	r0, r3, #30
 8003372:	d4f6      	bmi.n	8003362 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003374:	2d00      	cmp	r5, #0
 8003376:	f040 8106 	bne.w	8003586 <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800337a:	69a0      	ldr	r0, [r4, #24]
 800337c:	b1c8      	cbz	r0, 80033b2 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800337e:	4d56      	ldr	r5, [pc, #344]	; (80034d8 <HAL_RCC_OscConfig+0x290>)
 8003380:	68ab      	ldr	r3, [r5, #8]
 8003382:	f003 030c 	and.w	r3, r3, #12
 8003386:	2b08      	cmp	r3, #8
 8003388:	f000 80c9 	beq.w	800351e <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338c:	4b53      	ldr	r3, [pc, #332]	; (80034dc <HAL_RCC_OscConfig+0x294>)
 800338e:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003390:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003392:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003394:	f000 8109 	beq.w	80035aa <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003398:	f7ff f914 	bl	80025c4 <HAL_GetTick>
 800339c:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800339e:	e005      	b.n	80033ac <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a0:	f7ff f910 	bl	80025c4 <HAL_GetTick>
 80033a4:	1b00      	subs	r0, r0, r4
 80033a6:	2802      	cmp	r0, #2
 80033a8:	f200 8085 	bhi.w	80034b6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ac:	682b      	ldr	r3, [r5, #0]
 80033ae:	019b      	lsls	r3, r3, #6
 80033b0:	d4f6      	bmi.n	80033a0 <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80033b2:	2000      	movs	r0, #0
}
 80033b4:	b002      	add	sp, #8
 80033b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033ba:	6963      	ldr	r3, [r4, #20]
 80033bc:	b30b      	cbz	r3, 8003402 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 80033be:	4b47      	ldr	r3, [pc, #284]	; (80034dc <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c0:	4e45      	ldr	r6, [pc, #276]	; (80034d8 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 80033c2:	2201      	movs	r2, #1
 80033c4:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80033c8:	f7ff f8fc 	bl	80025c4 <HAL_GetTick>
 80033cc:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ce:	e004      	b.n	80033da <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033d0:	f7ff f8f8 	bl	80025c4 <HAL_GetTick>
 80033d4:	1b40      	subs	r0, r0, r5
 80033d6:	2802      	cmp	r0, #2
 80033d8:	d86d      	bhi.n	80034b6 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033da:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80033dc:	079b      	lsls	r3, r3, #30
 80033de:	d5f7      	bpl.n	80033d0 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033e0:	6823      	ldr	r3, [r4, #0]
 80033e2:	e798      	b.n	8003316 <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033e4:	6852      	ldr	r2, [r2, #4]
 80033e6:	0256      	lsls	r6, r2, #9
 80033e8:	f53f af76 	bmi.w	80032d8 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ec:	4a3a      	ldr	r2, [pc, #232]	; (80034d8 <HAL_RCC_OscConfig+0x290>)
 80033ee:	6812      	ldr	r2, [r2, #0]
 80033f0:	0795      	lsls	r5, r2, #30
 80033f2:	d544      	bpl.n	800347e <HAL_RCC_OscConfig+0x236>
 80033f4:	68e2      	ldr	r2, [r4, #12]
 80033f6:	2a01      	cmp	r2, #1
 80033f8:	d041      	beq.n	800347e <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 80033fa:	2001      	movs	r0, #1
}
 80033fc:	b002      	add	sp, #8
 80033fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8003402:	4a36      	ldr	r2, [pc, #216]	; (80034dc <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003404:	4e34      	ldr	r6, [pc, #208]	; (80034d8 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 8003406:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800340a:	f7ff f8db 	bl	80025c4 <HAL_GetTick>
 800340e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003410:	e004      	b.n	800341c <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003412:	f7ff f8d7 	bl	80025c4 <HAL_GetTick>
 8003416:	1b40      	subs	r0, r0, r5
 8003418:	2802      	cmp	r0, #2
 800341a:	d84c      	bhi.n	80034b6 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800341c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800341e:	079f      	lsls	r7, r3, #30
 8003420:	d4f7      	bmi.n	8003412 <HAL_RCC_OscConfig+0x1ca>
 8003422:	e7dd      	b.n	80033e0 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003424:	9301      	str	r3, [sp, #4]
 8003426:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800342c:	6413      	str	r3, [r2, #64]	; 0x40
 800342e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003434:	9301      	str	r3, [sp, #4]
 8003436:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003438:	2501      	movs	r5, #1
 800343a:	e774      	b.n	8003326 <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800343c:	684a      	ldr	r2, [r1, #4]
 800343e:	0250      	lsls	r0, r2, #9
 8003440:	f57f af19 	bpl.w	8003276 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003444:	4a24      	ldr	r2, [pc, #144]	; (80034d8 <HAL_RCC_OscConfig+0x290>)
 8003446:	6812      	ldr	r2, [r2, #0]
 8003448:	0391      	lsls	r1, r2, #14
 800344a:	f57f af37 	bpl.w	80032bc <HAL_RCC_OscConfig+0x74>
 800344e:	6862      	ldr	r2, [r4, #4]
 8003450:	2a00      	cmp	r2, #0
 8003452:	f47f af33 	bne.w	80032bc <HAL_RCC_OscConfig+0x74>
 8003456:	e7d0      	b.n	80033fa <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003458:	4a1f      	ldr	r2, [pc, #124]	; (80034d8 <HAL_RCC_OscConfig+0x290>)
 800345a:	6813      	ldr	r3, [r2, #0]
 800345c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003460:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003462:	f7ff f8af 	bl	80025c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003466:	4e1c      	ldr	r6, [pc, #112]	; (80034d8 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8003468:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346a:	e004      	b.n	8003476 <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800346c:	f7ff f8aa 	bl	80025c4 <HAL_GetTick>
 8003470:	1b40      	subs	r0, r0, r5
 8003472:	2864      	cmp	r0, #100	; 0x64
 8003474:	d81f      	bhi.n	80034b6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003476:	6833      	ldr	r3, [r6, #0]
 8003478:	039a      	lsls	r2, r3, #14
 800347a:	d5f7      	bpl.n	800346c <HAL_RCC_OscConfig+0x224>
 800347c:	e71d      	b.n	80032ba <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800347e:	4916      	ldr	r1, [pc, #88]	; (80034d8 <HAL_RCC_OscConfig+0x290>)
 8003480:	6920      	ldr	r0, [r4, #16]
 8003482:	680a      	ldr	r2, [r1, #0]
 8003484:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003488:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800348c:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800348e:	071a      	lsls	r2, r3, #28
 8003490:	f57f af41 	bpl.w	8003316 <HAL_RCC_OscConfig+0xce>
 8003494:	e791      	b.n	80033ba <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003496:	6833      	ldr	r3, [r6, #0]
 8003498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800349c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800349e:	f7ff f891 	bl	80025c4 <HAL_GetTick>
 80034a2:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a4:	6833      	ldr	r3, [r6, #0]
 80034a6:	05da      	lsls	r2, r3, #23
 80034a8:	f53f af42 	bmi.w	8003330 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ac:	f7ff f88a 	bl	80025c4 <HAL_GetTick>
 80034b0:	1bc0      	subs	r0, r0, r7
 80034b2:	2802      	cmp	r0, #2
 80034b4:	d9f6      	bls.n	80034a4 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 80034b6:	2003      	movs	r0, #3
}
 80034b8:	b002      	add	sp, #8
 80034ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034be:	4a06      	ldr	r2, [pc, #24]	; (80034d8 <HAL_RCC_OscConfig+0x290>)
 80034c0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80034c2:	f043 0301 	orr.w	r3, r3, #1
 80034c6:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 80034c8:	f7ff f87c 	bl	80025c4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034cc:	4f02      	ldr	r7, [pc, #8]	; (80034d8 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 80034ce:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034d0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d4:	e00b      	b.n	80034ee <HAL_RCC_OscConfig+0x2a6>
 80034d6:	bf00      	nop
 80034d8:	40023800 	.word	0x40023800
 80034dc:	42470000 	.word	0x42470000
 80034e0:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034e4:	f7ff f86e 	bl	80025c4 <HAL_GetTick>
 80034e8:	1b80      	subs	r0, r0, r6
 80034ea:	4540      	cmp	r0, r8
 80034ec:	d8e3      	bhi.n	80034b6 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034f0:	079b      	lsls	r3, r3, #30
 80034f2:	d5f7      	bpl.n	80034e4 <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 80034f4:	2d00      	cmp	r5, #0
 80034f6:	f43f af40 	beq.w	800337a <HAL_RCC_OscConfig+0x132>
 80034fa:	e044      	b.n	8003586 <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 80034fc:	4a42      	ldr	r2, [pc, #264]	; (8003608 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034fe:	4e43      	ldr	r6, [pc, #268]	; (800360c <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 8003500:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003502:	f7ff f85f 	bl	80025c4 <HAL_GetTick>
 8003506:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003508:	e004      	b.n	8003514 <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800350a:	f7ff f85b 	bl	80025c4 <HAL_GetTick>
 800350e:	1b40      	subs	r0, r0, r5
 8003510:	2802      	cmp	r0, #2
 8003512:	d8d0      	bhi.n	80034b6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003514:	6833      	ldr	r3, [r6, #0]
 8003516:	0799      	lsls	r1, r3, #30
 8003518:	d4f7      	bmi.n	800350a <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800351a:	6823      	ldr	r3, [r4, #0]
 800351c:	e6f9      	b.n	8003312 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800351e:	2801      	cmp	r0, #1
 8003520:	f43f af48 	beq.w	80033b4 <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 8003524:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003526:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003528:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800352c:	4291      	cmp	r1, r2
 800352e:	f47f af64 	bne.w	80033fa <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003532:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003534:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003538:	4291      	cmp	r1, r2
 800353a:	f47f af5e 	bne.w	80033fa <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800353e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003540:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8003544:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003546:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800354a:	f47f af56 	bne.w	80033fa <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800354e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003550:	0852      	lsrs	r2, r2, #1
 8003552:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8003556:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003558:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800355c:	f47f af4d 	bne.w	80033fa <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003560:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003562:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003566:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
    return HAL_ERROR;
 800356a:	bf14      	ite	ne
 800356c:	2001      	movne	r0, #1
 800356e:	2000      	moveq	r0, #0
 8003570:	e720      	b.n	80033b4 <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003572:	4b26      	ldr	r3, [pc, #152]	; (800360c <HAL_RCC_OscConfig+0x3c4>)
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003582:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003584:	e76d      	b.n	8003462 <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003586:	4a21      	ldr	r2, [pc, #132]	; (800360c <HAL_RCC_OscConfig+0x3c4>)
 8003588:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800358a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800358e:	6413      	str	r3, [r2, #64]	; 0x40
 8003590:	e6f3      	b.n	800337a <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8003592:	2001      	movs	r0, #1
}
 8003594:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003596:	4b1d      	ldr	r3, [pc, #116]	; (800360c <HAL_RCC_OscConfig+0x3c4>)
 8003598:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800359a:	f042 0204 	orr.w	r2, r2, #4
 800359e:	671a      	str	r2, [r3, #112]	; 0x70
 80035a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035a2:	f042 0201 	orr.w	r2, r2, #1
 80035a6:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035a8:	e78e      	b.n	80034c8 <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 80035aa:	f7ff f80b 	bl	80025c4 <HAL_GetTick>
 80035ae:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035b0:	e005      	b.n	80035be <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035b2:	f7ff f807 	bl	80025c4 <HAL_GetTick>
 80035b6:	1b80      	subs	r0, r0, r6
 80035b8:	2802      	cmp	r0, #2
 80035ba:	f63f af7c 	bhi.w	80034b6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035be:	682b      	ldr	r3, [r5, #0]
 80035c0:	0199      	lsls	r1, r3, #6
 80035c2:	d4f6      	bmi.n	80035b2 <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035c4:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80035c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80035ca:	430b      	orrs	r3, r1
 80035cc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80035d0:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 80035d4:	0852      	lsrs	r2, r2, #1
 80035d6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80035da:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 80035dc:	490a      	ldr	r1, [pc, #40]	; (8003608 <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 80035e2:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035e4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80035e6:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 80035e8:	f7fe ffec 	bl	80025c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ec:	4d07      	ldr	r5, [pc, #28]	; (800360c <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 80035ee:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f0:	e005      	b.n	80035fe <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f2:	f7fe ffe7 	bl	80025c4 <HAL_GetTick>
 80035f6:	1b00      	subs	r0, r0, r4
 80035f8:	2802      	cmp	r0, #2
 80035fa:	f63f af5c 	bhi.w	80034b6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035fe:	682b      	ldr	r3, [r5, #0]
 8003600:	019a      	lsls	r2, r3, #6
 8003602:	d5f6      	bpl.n	80035f2 <HAL_RCC_OscConfig+0x3aa>
 8003604:	e6d5      	b.n	80033b2 <HAL_RCC_OscConfig+0x16a>
 8003606:	bf00      	nop
 8003608:	42470000 	.word	0x42470000
 800360c:	40023800 	.word	0x40023800

08003610 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003610:	4916      	ldr	r1, [pc, #88]	; (800366c <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8003612:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003614:	688b      	ldr	r3, [r1, #8]
 8003616:	f003 030c 	and.w	r3, r3, #12
 800361a:	2b04      	cmp	r3, #4
 800361c:	d01b      	beq.n	8003656 <HAL_RCC_GetSysClockFreq+0x46>
 800361e:	2b08      	cmp	r3, #8
 8003620:	d117      	bne.n	8003652 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003622:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003624:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003626:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003628:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800362c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003630:	d113      	bne.n	800365a <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003632:	480f      	ldr	r0, [pc, #60]	; (8003670 <HAL_RCC_GetSysClockFreq+0x60>)
 8003634:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003638:	fba1 0100 	umull	r0, r1, r1, r0
 800363c:	f7fd fb24 	bl	8000c88 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003640:	4b0a      	ldr	r3, [pc, #40]	; (800366c <HAL_RCC_GetSysClockFreq+0x5c>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003648:	3301      	adds	r3, #1
 800364a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800364c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003650:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8003652:	4807      	ldr	r0, [pc, #28]	; (8003670 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8003654:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003656:	4807      	ldr	r0, [pc, #28]	; (8003674 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8003658:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800365a:	4806      	ldr	r0, [pc, #24]	; (8003674 <HAL_RCC_GetSysClockFreq+0x64>)
 800365c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003660:	2300      	movs	r3, #0
 8003662:	fba1 0100 	umull	r0, r1, r1, r0
 8003666:	f7fd fb0f 	bl	8000c88 <__aeabi_uldivmod>
 800366a:	e7e9      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x30>
 800366c:	40023800 	.word	0x40023800
 8003670:	00f42400 	.word	0x00f42400
 8003674:	007a1200 	.word	0x007a1200

08003678 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003678:	2800      	cmp	r0, #0
 800367a:	f000 8087 	beq.w	800378c <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800367e:	4a48      	ldr	r2, [pc, #288]	; (80037a0 <HAL_RCC_ClockConfig+0x128>)
 8003680:	6813      	ldr	r3, [r2, #0]
 8003682:	f003 0307 	and.w	r3, r3, #7
 8003686:	428b      	cmp	r3, r1
{
 8003688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800368c:	460d      	mov	r5, r1
 800368e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003690:	d209      	bcs.n	80036a6 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003692:	b2cb      	uxtb	r3, r1
 8003694:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003696:	6813      	ldr	r3, [r2, #0]
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	428b      	cmp	r3, r1
 800369e:	d002      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80036a0:	2001      	movs	r0, #1
}
 80036a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036a6:	6823      	ldr	r3, [r4, #0]
 80036a8:	0798      	lsls	r0, r3, #30
 80036aa:	d514      	bpl.n	80036d6 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ac:	0759      	lsls	r1, r3, #29
 80036ae:	d504      	bpl.n	80036ba <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036b0:	493c      	ldr	r1, [pc, #240]	; (80037a4 <HAL_RCC_ClockConfig+0x12c>)
 80036b2:	688a      	ldr	r2, [r1, #8]
 80036b4:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80036b8:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ba:	071a      	lsls	r2, r3, #28
 80036bc:	d504      	bpl.n	80036c8 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036be:	4939      	ldr	r1, [pc, #228]	; (80037a4 <HAL_RCC_ClockConfig+0x12c>)
 80036c0:	688a      	ldr	r2, [r1, #8]
 80036c2:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80036c6:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036c8:	4936      	ldr	r1, [pc, #216]	; (80037a4 <HAL_RCC_ClockConfig+0x12c>)
 80036ca:	68a0      	ldr	r0, [r4, #8]
 80036cc:	688a      	ldr	r2, [r1, #8]
 80036ce:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80036d2:	4302      	orrs	r2, r0
 80036d4:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036d6:	07df      	lsls	r7, r3, #31
 80036d8:	d521      	bpl.n	800371e <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036da:	6862      	ldr	r2, [r4, #4]
 80036dc:	2a01      	cmp	r2, #1
 80036de:	d057      	beq.n	8003790 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036e0:	1e93      	subs	r3, r2, #2
 80036e2:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e4:	4b2f      	ldr	r3, [pc, #188]	; (80037a4 <HAL_RCC_ClockConfig+0x12c>)
 80036e6:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036e8:	d94d      	bls.n	8003786 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ea:	0799      	lsls	r1, r3, #30
 80036ec:	d5d8      	bpl.n	80036a0 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ee:	4e2d      	ldr	r6, [pc, #180]	; (80037a4 <HAL_RCC_ClockConfig+0x12c>)
 80036f0:	68b3      	ldr	r3, [r6, #8]
 80036f2:	f023 0303 	bic.w	r3, r3, #3
 80036f6:	4313      	orrs	r3, r2
 80036f8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80036fa:	f7fe ff63 	bl	80025c4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036fe:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003702:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003704:	e004      	b.n	8003710 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003706:	f7fe ff5d 	bl	80025c4 <HAL_GetTick>
 800370a:	1bc0      	subs	r0, r0, r7
 800370c:	4540      	cmp	r0, r8
 800370e:	d844      	bhi.n	800379a <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003710:	68b3      	ldr	r3, [r6, #8]
 8003712:	6862      	ldr	r2, [r4, #4]
 8003714:	f003 030c 	and.w	r3, r3, #12
 8003718:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800371c:	d1f3      	bne.n	8003706 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800371e:	4a20      	ldr	r2, [pc, #128]	; (80037a0 <HAL_RCC_ClockConfig+0x128>)
 8003720:	6813      	ldr	r3, [r2, #0]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	42ab      	cmp	r3, r5
 8003728:	d906      	bls.n	8003738 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800372a:	b2eb      	uxtb	r3, r5
 800372c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800372e:	6813      	ldr	r3, [r2, #0]
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	42ab      	cmp	r3, r5
 8003736:	d1b3      	bne.n	80036a0 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003738:	6823      	ldr	r3, [r4, #0]
 800373a:	075a      	lsls	r2, r3, #29
 800373c:	d506      	bpl.n	800374c <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800373e:	4919      	ldr	r1, [pc, #100]	; (80037a4 <HAL_RCC_ClockConfig+0x12c>)
 8003740:	68e0      	ldr	r0, [r4, #12]
 8003742:	688a      	ldr	r2, [r1, #8]
 8003744:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8003748:	4302      	orrs	r2, r0
 800374a:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800374c:	071b      	lsls	r3, r3, #28
 800374e:	d507      	bpl.n	8003760 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003750:	4a14      	ldr	r2, [pc, #80]	; (80037a4 <HAL_RCC_ClockConfig+0x12c>)
 8003752:	6921      	ldr	r1, [r4, #16]
 8003754:	6893      	ldr	r3, [r2, #8]
 8003756:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800375a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800375e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003760:	f7ff ff56 	bl	8003610 <HAL_RCC_GetSysClockFreq>
 8003764:	4a0f      	ldr	r2, [pc, #60]	; (80037a4 <HAL_RCC_ClockConfig+0x12c>)
 8003766:	4c10      	ldr	r4, [pc, #64]	; (80037a8 <HAL_RCC_ClockConfig+0x130>)
 8003768:	6892      	ldr	r2, [r2, #8]
 800376a:	4910      	ldr	r1, [pc, #64]	; (80037ac <HAL_RCC_ClockConfig+0x134>)
 800376c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003770:	4603      	mov	r3, r0
 8003772:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8003774:	480e      	ldr	r0, [pc, #56]	; (80037b0 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003776:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8003778:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800377a:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 800377c:	f7fe fde6 	bl	800234c <HAL_InitTick>
  return HAL_OK;
 8003780:	2000      	movs	r0, #0
}
 8003782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003786:	0198      	lsls	r0, r3, #6
 8003788:	d4b1      	bmi.n	80036ee <HAL_RCC_ClockConfig+0x76>
 800378a:	e789      	b.n	80036a0 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 800378c:	2001      	movs	r0, #1
}
 800378e:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003790:	4b04      	ldr	r3, [pc, #16]	; (80037a4 <HAL_RCC_ClockConfig+0x12c>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	039e      	lsls	r6, r3, #14
 8003796:	d4aa      	bmi.n	80036ee <HAL_RCC_ClockConfig+0x76>
 8003798:	e782      	b.n	80036a0 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 800379a:	2003      	movs	r0, #3
 800379c:	e781      	b.n	80036a2 <HAL_RCC_ClockConfig+0x2a>
 800379e:	bf00      	nop
 80037a0:	40023c00 	.word	0x40023c00
 80037a4:	40023800 	.word	0x40023800
 80037a8:	0800ab00 	.word	0x0800ab00
 80037ac:	20000020 	.word	0x20000020
 80037b0:	20000028 	.word	0x20000028

080037b4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037b4:	4b04      	ldr	r3, [pc, #16]	; (80037c8 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80037b6:	4905      	ldr	r1, [pc, #20]	; (80037cc <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	4a05      	ldr	r2, [pc, #20]	; (80037d0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80037bc:	6808      	ldr	r0, [r1, #0]
 80037be:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80037c2:	5cd3      	ldrb	r3, [r2, r3]
}
 80037c4:	40d8      	lsrs	r0, r3
 80037c6:	4770      	bx	lr
 80037c8:	40023800 	.word	0x40023800
 80037cc:	20000020 	.word	0x20000020
 80037d0:	0800ab10 	.word	0x0800ab10

080037d4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037d4:	4b04      	ldr	r3, [pc, #16]	; (80037e8 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 80037d6:	4905      	ldr	r1, [pc, #20]	; (80037ec <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	4a05      	ldr	r2, [pc, #20]	; (80037f0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80037dc:	6808      	ldr	r0, [r1, #0]
 80037de:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80037e2:	5cd3      	ldrb	r3, [r2, r3]
}
 80037e4:	40d8      	lsrs	r0, r3
 80037e6:	4770      	bx	lr
 80037e8:	40023800 	.word	0x40023800
 80037ec:	20000020 	.word	0x20000020
 80037f0:	0800ab10 	.word	0x0800ab10

080037f4 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80037f4:	4b0e      	ldr	r3, [pc, #56]	; (8003830 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80037f6:	220f      	movs	r2, #15
 80037f8:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	f002 0203 	and.w	r2, r2, #3
 8003800:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003808:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8003810:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	08db      	lsrs	r3, r3, #3
{
 8003816:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003818:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800381c:	4c05      	ldr	r4, [pc, #20]	; (8003834 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800381e:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003820:	6823      	ldr	r3, [r4, #0]
}
 8003822:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	600b      	str	r3, [r1, #0]
}
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	40023800 	.word	0x40023800
 8003834:	40023c00 	.word	0x40023c00

08003838 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003838:	2800      	cmp	r0, #0
 800383a:	f000 8087 	beq.w	800394c <HAL_TIM_Base_Init+0x114>
{
 800383e:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003840:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003844:	4604      	mov	r4, r0
 8003846:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800384a:	2b00      	cmp	r3, #0
 800384c:	d079      	beq.n	8003942 <HAL_TIM_Base_Init+0x10a>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800384e:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003850:	493f      	ldr	r1, [pc, #252]	; (8003950 <HAL_TIM_Base_Init+0x118>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003852:	2302      	movs	r3, #2
 8003854:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003858:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800385a:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800385c:	d05d      	beq.n	800391a <HAL_TIM_Base_Init+0xe2>
 800385e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003862:	d031      	beq.n	80038c8 <HAL_TIM_Base_Init+0x90>
 8003864:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8003868:	428a      	cmp	r2, r1
 800386a:	d02d      	beq.n	80038c8 <HAL_TIM_Base_Init+0x90>
 800386c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003870:	428a      	cmp	r2, r1
 8003872:	d029      	beq.n	80038c8 <HAL_TIM_Base_Init+0x90>
 8003874:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003878:	428a      	cmp	r2, r1
 800387a:	d025      	beq.n	80038c8 <HAL_TIM_Base_Init+0x90>
 800387c:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8003880:	428a      	cmp	r2, r1
 8003882:	d04a      	beq.n	800391a <HAL_TIM_Base_Init+0xe2>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003884:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8003888:	428a      	cmp	r2, r1
 800388a:	d021      	beq.n	80038d0 <HAL_TIM_Base_Init+0x98>
 800388c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003890:	428a      	cmp	r2, r1
 8003892:	d01d      	beq.n	80038d0 <HAL_TIM_Base_Init+0x98>
 8003894:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003898:	428a      	cmp	r2, r1
 800389a:	d019      	beq.n	80038d0 <HAL_TIM_Base_Init+0x98>
 800389c:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 80038a0:	428a      	cmp	r2, r1
 80038a2:	d015      	beq.n	80038d0 <HAL_TIM_Base_Init+0x98>
 80038a4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80038a8:	428a      	cmp	r2, r1
 80038aa:	d011      	beq.n	80038d0 <HAL_TIM_Base_Init+0x98>
 80038ac:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80038b0:	428a      	cmp	r2, r1
 80038b2:	d00d      	beq.n	80038d0 <HAL_TIM_Base_Init+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038b4:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038b6:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038bc:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80038be:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038c0:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038c2:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80038c4:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038c6:	e010      	b.n	80038ea <HAL_TIM_Base_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 80038c8:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80038ce:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038d0:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038d2:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80038d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038d8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038de:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038e0:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80038e2:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80038e4:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038e6:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80038e8:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038ea:	2301      	movs	r3, #1
 80038ec:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038ee:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038f2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80038f6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80038fa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80038fe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003902:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003906:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800390a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800390e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003912:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003916:	2000      	movs	r0, #0
}
 8003918:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 800391a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800391c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800391e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003922:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8003924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003928:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800392a:	69a1      	ldr	r1, [r4, #24]
 800392c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003930:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003932:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003934:	68e3      	ldr	r3, [r4, #12]
 8003936:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003938:	6863      	ldr	r3, [r4, #4]
 800393a:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800393c:	6963      	ldr	r3, [r4, #20]
 800393e:	6313      	str	r3, [r2, #48]	; 0x30
 8003940:	e7d3      	b.n	80038ea <HAL_TIM_Base_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 8003942:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003946:	f7fe fcab 	bl	80022a0 <HAL_TIM_Base_MspInit>
 800394a:	e780      	b.n	800384e <HAL_TIM_Base_Init+0x16>
    return HAL_ERROR;
 800394c:	2001      	movs	r0, #1
}
 800394e:	4770      	bx	lr
 8003950:	40010000 	.word	0x40010000

08003954 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003954:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003958:	2b01      	cmp	r3, #1
 800395a:	d12c      	bne.n	80039b6 <HAL_TIM_Base_Start+0x62>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800395c:	6803      	ldr	r3, [r0, #0]
 800395e:	4a18      	ldr	r2, [pc, #96]	; (80039c0 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003960:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003962:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 8003964:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003968:	d01a      	beq.n	80039a0 <HAL_TIM_Base_Start+0x4c>
 800396a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800396e:	d017      	beq.n	80039a0 <HAL_TIM_Base_Start+0x4c>
 8003970:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003974:	4293      	cmp	r3, r2
 8003976:	d013      	beq.n	80039a0 <HAL_TIM_Base_Start+0x4c>
 8003978:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800397c:	4293      	cmp	r3, r2
 800397e:	d00f      	beq.n	80039a0 <HAL_TIM_Base_Start+0x4c>
 8003980:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003984:	4293      	cmp	r3, r2
 8003986:	d00b      	beq.n	80039a0 <HAL_TIM_Base_Start+0x4c>
 8003988:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800398c:	4293      	cmp	r3, r2
 800398e:	d007      	beq.n	80039a0 <HAL_TIM_Base_Start+0x4c>
 8003990:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003994:	4293      	cmp	r3, r2
 8003996:	d003      	beq.n	80039a0 <HAL_TIM_Base_Start+0x4c>
 8003998:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800399c:	4293      	cmp	r3, r2
 800399e:	d104      	bne.n	80039aa <HAL_TIM_Base_Start+0x56>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039a0:	689a      	ldr	r2, [r3, #8]
 80039a2:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a6:	2a06      	cmp	r2, #6
 80039a8:	d007      	beq.n	80039ba <HAL_TIM_Base_Start+0x66>
    __HAL_TIM_ENABLE(htim);
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 80039b0:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	4770      	bx	lr
    return HAL_ERROR;
 80039b6:	2001      	movs	r0, #1
 80039b8:	4770      	bx	lr
  return HAL_OK;
 80039ba:	2000      	movs	r0, #0
}
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	40010000 	.word	0x40010000

080039c4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80039c4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d12f      	bne.n	8003a2c <HAL_TIM_Base_Start_IT+0x68>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039cc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ce:	4919      	ldr	r1, [pc, #100]	; (8003a34 <HAL_TIM_Base_Start_IT+0x70>)
  htim->State = HAL_TIM_STATE_BUSY;
 80039d0:	2202      	movs	r2, #2
 80039d2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039d6:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039d8:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039da:	f042 0201 	orr.w	r2, r2, #1
 80039de:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039e0:	d019      	beq.n	8003a16 <HAL_TIM_Base_Start_IT+0x52>
 80039e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e6:	d016      	beq.n	8003a16 <HAL_TIM_Base_Start_IT+0x52>
 80039e8:	4a13      	ldr	r2, [pc, #76]	; (8003a38 <HAL_TIM_Base_Start_IT+0x74>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d013      	beq.n	8003a16 <HAL_TIM_Base_Start_IT+0x52>
 80039ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00f      	beq.n	8003a16 <HAL_TIM_Base_Start_IT+0x52>
 80039f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00b      	beq.n	8003a16 <HAL_TIM_Base_Start_IT+0x52>
 80039fe:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d007      	beq.n	8003a16 <HAL_TIM_Base_Start_IT+0x52>
 8003a06:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d003      	beq.n	8003a16 <HAL_TIM_Base_Start_IT+0x52>
 8003a0e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d104      	bne.n	8003a20 <HAL_TIM_Base_Start_IT+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a1c:	2a06      	cmp	r2, #6
 8003a1e:	d007      	beq.n	8003a30 <HAL_TIM_Base_Start_IT+0x6c>
    __HAL_TIM_ENABLE(htim);
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8003a26:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	4770      	bx	lr
    return HAL_ERROR;
 8003a2c:	2001      	movs	r0, #1
 8003a2e:	4770      	bx	lr
  return HAL_OK;
 8003a30:	2000      	movs	r0, #0
}
 8003a32:	4770      	bx	lr
 8003a34:	40010000 	.word	0x40010000
 8003a38:	40000400 	.word	0x40000400

08003a3c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003a3c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d075      	beq.n	8003b30 <HAL_TIM_ConfigClockSource+0xf4>
 8003a44:	4602      	mov	r2, r0
{
 8003a46:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8003a48:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8003a4a:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003a4c:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003a50:	2001      	movs	r0, #1
 8003a52:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003a56:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a5c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003a60:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8003a62:	680b      	ldr	r3, [r1, #0]
 8003a64:	2b60      	cmp	r3, #96	; 0x60
 8003a66:	d065      	beq.n	8003b34 <HAL_TIM_ConfigClockSource+0xf8>
 8003a68:	d824      	bhi.n	8003ab4 <HAL_TIM_ConfigClockSource+0x78>
 8003a6a:	2b40      	cmp	r3, #64	; 0x40
 8003a6c:	d07c      	beq.n	8003b68 <HAL_TIM_ConfigClockSource+0x12c>
 8003a6e:	d94b      	bls.n	8003b08 <HAL_TIM_ConfigClockSource+0xcc>
 8003a70:	2b50      	cmp	r3, #80	; 0x50
 8003a72:	d117      	bne.n	8003aa4 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a74:	684b      	ldr	r3, [r1, #4]
 8003a76:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a78:	6a21      	ldr	r1, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a7a:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003a7e:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a80:	6a23      	ldr	r3, [r4, #32]
 8003a82:	f023 0301 	bic.w	r3, r3, #1
 8003a86:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a88:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a8e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a92:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8003a94:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a96:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a9c:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8003aa0:	2000      	movs	r0, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003aa2:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8003aa4:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8003aa6:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003aa8:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003aac:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8003ab0:	bc30      	pop	{r4, r5}
 8003ab2:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab8:	d038      	beq.n	8003b2c <HAL_TIM_ConfigClockSource+0xf0>
 8003aba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003abe:	d110      	bne.n	8003ae2 <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ac0:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003ac4:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ac6:	432b      	orrs	r3, r5
 8003ac8:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aca:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ace:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8003ad2:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ad4:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ad6:	68a3      	ldr	r3, [r4, #8]
 8003ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 8003adc:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ade:	60a3      	str	r3, [r4, #8]
      break;
 8003ae0:	e7e0      	b.n	8003aa4 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8003ae2:	2b70      	cmp	r3, #112	; 0x70
 8003ae4:	d1de      	bne.n	8003aa4 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ae6:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003aea:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003aec:	432b      	orrs	r3, r5
 8003aee:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003af0:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003af4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8003af8:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003afa:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003afc:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003afe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 8003b02:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 8003b04:	60a3      	str	r3, [r4, #8]
      break;
 8003b06:	e7cd      	b.n	8003aa4 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8003b08:	2b20      	cmp	r3, #32
 8003b0a:	d002      	beq.n	8003b12 <HAL_TIM_ConfigClockSource+0xd6>
 8003b0c:	d90a      	bls.n	8003b24 <HAL_TIM_ConfigClockSource+0xe8>
 8003b0e:	2b30      	cmp	r3, #48	; 0x30
 8003b10:	d1c8      	bne.n	8003aa4 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8003b12:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b14:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 8003b1e:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8003b20:	60a3      	str	r3, [r4, #8]
}
 8003b22:	e7bf      	b.n	8003aa4 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8003b24:	f033 0110 	bics.w	r1, r3, #16
 8003b28:	d1bc      	bne.n	8003aa4 <HAL_TIM_ConfigClockSource+0x68>
 8003b2a:	e7f2      	b.n	8003b12 <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	e7b9      	b.n	8003aa4 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 8003b30:	2002      	movs	r0, #2
}
 8003b32:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b34:	6a23      	ldr	r3, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b36:	6848      	ldr	r0, [r1, #4]
 8003b38:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b3a:	f023 0310 	bic.w	r3, r3, #16
 8003b3e:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b40:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8003b42:	6a23      	ldr	r3, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b44:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b4c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b50:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003b54:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8003b56:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8003b58:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b5e:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8003b62:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8003b64:	60a3      	str	r3, [r4, #8]
}
 8003b66:	e79d      	b.n	8003aa4 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b68:	684b      	ldr	r3, [r1, #4]
 8003b6a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003b6c:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b6e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003b72:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b74:	6a23      	ldr	r3, [r4, #32]
 8003b76:	f023 0301 	bic.w	r3, r3, #1
 8003b7a:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b7c:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b82:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003b86:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8003b88:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8003b8a:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b90:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8003b94:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8003b96:	60a3      	str	r3, [r4, #8]
}
 8003b98:	e784      	b.n	8003aa4 <HAL_TIM_ConfigClockSource+0x68>
 8003b9a:	bf00      	nop

08003b9c <HAL_TIM_OC_DelayElapsedCallback>:
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop

08003ba0 <HAL_TIM_IC_CaptureCallback>:
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop

08003ba4 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop

08003ba8 <HAL_TIM_TriggerCallback>:
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop

08003bac <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bac:	6803      	ldr	r3, [r0, #0]
 8003bae:	691a      	ldr	r2, [r3, #16]
 8003bb0:	0791      	lsls	r1, r2, #30
{
 8003bb2:	b510      	push	{r4, lr}
 8003bb4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bb6:	d502      	bpl.n	8003bbe <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	0792      	lsls	r2, r2, #30
 8003bbc:	d45f      	bmi.n	8003c7e <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bbe:	691a      	ldr	r2, [r3, #16]
 8003bc0:	0750      	lsls	r0, r2, #29
 8003bc2:	d502      	bpl.n	8003bca <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	0751      	lsls	r1, r2, #29
 8003bc8:	d446      	bmi.n	8003c58 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bca:	691a      	ldr	r2, [r3, #16]
 8003bcc:	0712      	lsls	r2, r2, #28
 8003bce:	d502      	bpl.n	8003bd6 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bd0:	68da      	ldr	r2, [r3, #12]
 8003bd2:	0710      	lsls	r0, r2, #28
 8003bd4:	d42e      	bmi.n	8003c34 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bd6:	691a      	ldr	r2, [r3, #16]
 8003bd8:	06d2      	lsls	r2, r2, #27
 8003bda:	d502      	bpl.n	8003be2 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bdc:	68da      	ldr	r2, [r3, #12]
 8003bde:	06d0      	lsls	r0, r2, #27
 8003be0:	d418      	bmi.n	8003c14 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003be2:	691a      	ldr	r2, [r3, #16]
 8003be4:	07d1      	lsls	r1, r2, #31
 8003be6:	d502      	bpl.n	8003bee <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003be8:	68da      	ldr	r2, [r3, #12]
 8003bea:	07d2      	lsls	r2, r2, #31
 8003bec:	d45d      	bmi.n	8003caa <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	0610      	lsls	r0, r2, #24
 8003bf2:	d502      	bpl.n	8003bfa <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bf4:	68da      	ldr	r2, [r3, #12]
 8003bf6:	0611      	lsls	r1, r2, #24
 8003bf8:	d45f      	bmi.n	8003cba <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bfa:	691a      	ldr	r2, [r3, #16]
 8003bfc:	0652      	lsls	r2, r2, #25
 8003bfe:	d502      	bpl.n	8003c06 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	0650      	lsls	r0, r2, #25
 8003c04:	d461      	bmi.n	8003cca <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c06:	691a      	ldr	r2, [r3, #16]
 8003c08:	0691      	lsls	r1, r2, #26
 8003c0a:	d502      	bpl.n	8003c12 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	0692      	lsls	r2, r2, #26
 8003c10:	d443      	bmi.n	8003c9a <HAL_TIM_IRQHandler+0xee>
}
 8003c12:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c14:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c18:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c1a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c1c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003c24:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c26:	d064      	beq.n	8003cf2 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8003c28:	f7ff ffba 	bl	8003ba0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c2c:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c2e:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c30:	7722      	strb	r2, [r4, #28]
 8003c32:	e7d6      	b.n	8003be2 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c34:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c38:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c3a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c3c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8003c42:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c44:	d152      	bne.n	8003cec <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c46:	f7ff ffa9 	bl	8003b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c4a:	4620      	mov	r0, r4
 8003c4c:	f7ff ffaa 	bl	8003ba4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c50:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c52:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c54:	7722      	strb	r2, [r4, #28]
 8003c56:	e7be      	b.n	8003bd6 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c58:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c5c:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c5e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c60:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003c68:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c6a:	d13c      	bne.n	8003ce6 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c6c:	f7ff ff96 	bl	8003b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c70:	4620      	mov	r0, r4
 8003c72:	f7ff ff97 	bl	8003ba4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c76:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c78:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c7a:	7722      	strb	r2, [r4, #28]
 8003c7c:	e7a5      	b.n	8003bca <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c7e:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c82:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c84:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c86:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	079b      	lsls	r3, r3, #30
 8003c8c:	d025      	beq.n	8003cda <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8003c8e:	f7ff ff87 	bl	8003ba0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c92:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c94:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c96:	7722      	strb	r2, [r4, #28]
 8003c98:	e791      	b.n	8003bbe <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c9a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8003c9e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ca0:	611a      	str	r2, [r3, #16]
}
 8003ca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003ca6:	f000 b86b 	b.w	8003d80 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003caa:	f06f 0201 	mvn.w	r2, #1
 8003cae:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cb0:	4620      	mov	r0, r4
 8003cb2:	f7fe f9e3 	bl	800207c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cb6:	6823      	ldr	r3, [r4, #0]
 8003cb8:	e799      	b.n	8003bee <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cbe:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003cc0:	4620      	mov	r0, r4
 8003cc2:	f000 f85f 	bl	8003d84 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cc6:	6823      	ldr	r3, [r4, #0]
 8003cc8:	e797      	b.n	8003bfa <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cce:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003cd0:	4620      	mov	r0, r4
 8003cd2:	f7ff ff69 	bl	8003ba8 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cd6:	6823      	ldr	r3, [r4, #0]
 8003cd8:	e795      	b.n	8003c06 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cda:	f7ff ff5f 	bl	8003b9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cde:	4620      	mov	r0, r4
 8003ce0:	f7ff ff60 	bl	8003ba4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003ce4:	e7d5      	b.n	8003c92 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8003ce6:	f7ff ff5b 	bl	8003ba0 <HAL_TIM_IC_CaptureCallback>
 8003cea:	e7c4      	b.n	8003c76 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8003cec:	f7ff ff58 	bl	8003ba0 <HAL_TIM_IC_CaptureCallback>
 8003cf0:	e7ae      	b.n	8003c50 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cf2:	f7ff ff53 	bl	8003b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cf6:	4620      	mov	r0, r4
 8003cf8:	f7ff ff54 	bl	8003ba4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003cfc:	e796      	b.n	8003c2c <HAL_TIM_IRQHandler+0x80>
 8003cfe:	bf00      	nop

08003d00 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d00:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d037      	beq.n	8003d78 <HAL_TIMEx_MasterConfigSynchronization+0x78>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d08:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003d0a:	2202      	movs	r2, #2
{
 8003d0c:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8003d0e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8003d12:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d14:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8003d16:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d18:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d1c:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d20:	4a16      	ldr	r2, [pc, #88]	; (8003d7c <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d01a      	beq.n	8003d5c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8003d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d2a:	d017      	beq.n	8003d5c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8003d2c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d013      	beq.n	8003d5c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8003d34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d00f      	beq.n	8003d5c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8003d3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d00b      	beq.n	8003d5c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8003d44:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d007      	beq.n	8003d5c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8003d4c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d003      	beq.n	8003d5c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8003d54:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d104      	bne.n	8003d66 <HAL_TIMEx_MasterConfigSynchronization+0x66>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d5c:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d5e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d62:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d64:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003d66:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003d6e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8003d72:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8003d74:	4618      	mov	r0, r3
}
 8003d76:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003d78:	2002      	movs	r0, #2
}
 8003d7a:	4770      	bx	lr
 8003d7c:	40010000 	.word	0x40010000

08003d80 <HAL_TIMEx_CommutCallback>:
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop

08003d84 <HAL_TIMEx_BreakCallback>:
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop

08003d88 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d88:	2800      	cmp	r0, #0
 8003d8a:	f000 808f 	beq.w	8003eac <HAL_UART_Init+0x124>
{
 8003d8e:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d90:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003d94:	4604      	mov	r4, r0
 8003d96:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 8081 	beq.w	8003ea2 <HAL_UART_Init+0x11a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003da0:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003da2:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8003da4:	2224      	movs	r2, #36	; 0x24
 8003da6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8003daa:	68da      	ldr	r2, [r3, #12]
 8003dac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003db0:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003db2:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003db4:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003db6:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8003dba:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dbc:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dbe:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dc0:	4302      	orrs	r2, r0
 8003dc2:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8003dc4:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dc6:	4302      	orrs	r2, r0
 8003dc8:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8003dca:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8003dce:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dd2:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dd8:	695a      	ldr	r2, [r3, #20]
 8003dda:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ddc:	4934      	ldr	r1, [pc, #208]	; (8003eb0 <HAL_UART_Init+0x128>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dde:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003de2:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003de4:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003de6:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003de8:	d035      	beq.n	8003e56 <HAL_UART_Init+0xce>
 8003dea:	4a32      	ldr	r2, [pc, #200]	; (8003eb4 <HAL_UART_Init+0x12c>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d032      	beq.n	8003e56 <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003df0:	f7ff fce0 	bl	80037b4 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003df4:	69e3      	ldr	r3, [r4, #28]
 8003df6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dfa:	d032      	beq.n	8003e62 <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dfc:	6863      	ldr	r3, [r4, #4]
 8003dfe:	2119      	movs	r1, #25
 8003e00:	009a      	lsls	r2, r3, #2
 8003e02:	fba0 0101 	umull	r0, r1, r0, r1
 8003e06:	0f9b      	lsrs	r3, r3, #30
 8003e08:	f7fc ff3e 	bl	8000c88 <__aeabi_uldivmod>
 8003e0c:	492a      	ldr	r1, [pc, #168]	; (8003eb8 <HAL_UART_Init+0x130>)
 8003e0e:	fba1 3200 	umull	r3, r2, r1, r0
 8003e12:	0952      	lsrs	r2, r2, #5
 8003e14:	2564      	movs	r5, #100	; 0x64
 8003e16:	fb05 0012 	mls	r0, r5, r2, r0
 8003e1a:	0100      	lsls	r0, r0, #4
 8003e1c:	3032      	adds	r0, #50	; 0x32
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	fba1 1000 	umull	r1, r0, r1, r0
 8003e24:	0112      	lsls	r2, r2, #4
 8003e26:	eb02 1250 	add.w	r2, r2, r0, lsr #5
 8003e2a:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e2c:	691a      	ldr	r2, [r3, #16]
 8003e2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e32:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e34:	695a      	ldr	r2, [r3, #20]
 8003e36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e3a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003e3c:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e3e:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8003e40:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8003e42:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e46:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e48:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e4a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e4e:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8003e52:	4628      	mov	r0, r5
}
 8003e54:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e56:	f7ff fcbd 	bl	80037d4 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e5a:	69e3      	ldr	r3, [r4, #28]
 8003e5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e60:	d1cc      	bne.n	8003dfc <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e62:	6862      	ldr	r2, [r4, #4]
 8003e64:	2119      	movs	r1, #25
 8003e66:	1892      	adds	r2, r2, r2
 8003e68:	f04f 0300 	mov.w	r3, #0
 8003e6c:	415b      	adcs	r3, r3
 8003e6e:	fba0 0101 	umull	r0, r1, r0, r1
 8003e72:	f7fc ff09 	bl	8000c88 <__aeabi_uldivmod>
 8003e76:	4b10      	ldr	r3, [pc, #64]	; (8003eb8 <HAL_UART_Init+0x130>)
 8003e78:	fba3 2500 	umull	r2, r5, r3, r0
 8003e7c:	096d      	lsrs	r5, r5, #5
 8003e7e:	2264      	movs	r2, #100	; 0x64
 8003e80:	fb02 0215 	mls	r2, r2, r5, r0
 8003e84:	00d2      	lsls	r2, r2, #3
 8003e86:	3232      	adds	r2, #50	; 0x32
 8003e88:	fba3 3202 	umull	r3, r2, r3, r2
 8003e8c:	f3c2 1142 	ubfx	r1, r2, #5, #3
 8003e90:	0912      	lsrs	r2, r2, #4
 8003e92:	6823      	ldr	r3, [r4, #0]
 8003e94:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8003e98:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8003e9c:	440a      	add	r2, r1
 8003e9e:	609a      	str	r2, [r3, #8]
 8003ea0:	e7c4      	b.n	8003e2c <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8003ea2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8003ea6:	f7fe fa11 	bl	80022cc <HAL_UART_MspInit>
 8003eaa:	e779      	b.n	8003da0 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8003eac:	2001      	movs	r0, #1
}
 8003eae:	4770      	bx	lr
 8003eb0:	40011000 	.word	0x40011000
 8003eb4:	40011400 	.word	0x40011400
 8003eb8:	51eb851f 	.word	0x51eb851f

08003ebc <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8003ebc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003ec0:	2b20      	cmp	r3, #32
 8003ec2:	d11b      	bne.n	8003efc <HAL_UART_Transmit_IT+0x40>
    if ((pData == NULL) || (Size == 0U))
 8003ec4:	b1c1      	cbz	r1, 8003ef8 <HAL_UART_Transmit_IT+0x3c>
 8003ec6:	b1ba      	cbz	r2, 8003ef8 <HAL_UART_Transmit_IT+0x3c>
    __HAL_LOCK(huart);
 8003ec8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d015      	beq.n	8003efc <HAL_UART_Transmit_IT+0x40>
{
 8003ed0:	b410      	push	{r4}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed2:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ed4:	2421      	movs	r4, #33	; 0x21
    huart->TxXferCount = Size;
 8003ed6:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed8:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eda:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003ede:	6804      	ldr	r4, [r0, #0]
    __HAL_UNLOCK(huart);
 8003ee0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->TxXferSize = Size;
 8003ee4:	8482      	strh	r2, [r0, #36]	; 0x24
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003ee6:	68e2      	ldr	r2, [r4, #12]
    huart->pTxBuffPtr = pData;
 8003ee8:	6201      	str	r1, [r0, #32]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003eea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    return HAL_OK;
 8003eee:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003ef0:	60e2      	str	r2, [r4, #12]
}
 8003ef2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ef6:	4770      	bx	lr
      return HAL_ERROR;
 8003ef8:	2001      	movs	r0, #1
 8003efa:	4770      	bx	lr
    return HAL_BUSY;
 8003efc:	2002      	movs	r0, #2
}
 8003efe:	4770      	bx	lr

08003f00 <HAL_UART_TxCpltCallback>:
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop

08003f04 <HAL_UART_RxCpltCallback>:
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop

08003f08 <HAL_UART_ErrorCallback>:
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop

08003f0c <UART_DMAAbortOnError>:
{
 8003f0c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f0e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f14:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003f16:	f7ff fff7 	bl	8003f08 <HAL_UART_ErrorCallback>
}
 8003f1a:	bd08      	pop	{r3, pc}

08003f1c <HAL_UARTEx_RxEventCallback>:
}
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop

08003f20 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f20:	6883      	ldr	r3, [r0, #8]
 8003f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f26:	d044      	beq.n	8003fb2 <UART_Receive_IT.part.0.isra.0+0x92>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f28:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d039      	beq.n	8003fa2 <UART_Receive_IT.part.0.isra.0+0x82>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f2e:	6803      	ldr	r3, [r0, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f36:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8003f38:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003f3a:	3201      	adds	r2, #1
    if (--huart->RxXferCount == 0U)
 8003f3c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
      huart->pRxBuffPtr += 2U;
 8003f3e:	6282      	str	r2, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d132      	bne.n	8003fb0 <UART_Receive_IT.part.0.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f4a:	6802      	ldr	r2, [r0, #0]
 8003f4c:	68d1      	ldr	r1, [r2, #12]
 8003f4e:	f021 0120 	bic.w	r1, r1, #32
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8003f52:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f54:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f56:	68d1      	ldr	r1, [r2, #12]
 8003f58:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003f5c:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f5e:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003f60:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f64:	f021 0101 	bic.w	r1, r1, #1
 8003f68:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003f6a:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f6e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8003f70:	2901      	cmp	r1, #1
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8003f72:	b083      	sub	sp, #12
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f74:	d127      	bne.n	8003fc6 <UART_Receive_IT.part.0.isra.0+0xa6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f76:	6303      	str	r3, [r0, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f78:	f102 030c 	add.w	r3, r2, #12
 8003f7c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f80:	f023 0310 	bic.w	r3, r3, #16
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f84:	f102 0c0c 	add.w	ip, r2, #12
 8003f88:	e84c 3100 	strex	r1, r3, [ip]
 8003f8c:	2900      	cmp	r1, #0
 8003f8e:	d1f3      	bne.n	8003f78 <UART_Receive_IT.part.0.isra.0+0x58>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f90:	6813      	ldr	r3, [r2, #0]
 8003f92:	06db      	lsls	r3, r3, #27
 8003f94:	d421      	bmi.n	8003fda <UART_Receive_IT.part.0.isra.0+0xba>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f96:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8003f98:	f7ff ffc0 	bl	8003f1c <HAL_UARTEx_RxEventCallback>
}
 8003f9c:	b003      	add	sp, #12
 8003f9e:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003fa2:	6903      	ldr	r3, [r0, #16]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1c2      	bne.n	8003f2e <UART_Receive_IT.part.0.isra.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fa8:	6803      	ldr	r3, [r0, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	7013      	strb	r3, [r2, #0]
 8003fae:	e7c3      	b.n	8003f38 <UART_Receive_IT.part.0.isra.0+0x18>
 8003fb0:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fb2:	6903      	ldr	r3, [r0, #16]
 8003fb4:	b963      	cbnz	r3, 8003fd0 <UART_Receive_IT.part.0.isra.0+0xb0>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003fb6:	6803      	ldr	r3, [r0, #0]
 8003fb8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fc0:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr += 2U;
 8003fc4:	e7ba      	b.n	8003f3c <UART_Receive_IT.part.0.isra.0+0x1c>
        HAL_UART_RxCpltCallback(huart);
 8003fc6:	f7ff ff9d 	bl	8003f04 <HAL_UART_RxCpltCallback>
}
 8003fca:	b003      	add	sp, #12
 8003fcc:	f85d fb04 	ldr.w	pc, [sp], #4
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fd0:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003fd2:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	7013      	strb	r3, [r2, #0]
 8003fd8:	e7ae      	b.n	8003f38 <UART_Receive_IT.part.0.isra.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fda:	2300      	movs	r3, #0
 8003fdc:	9301      	str	r3, [sp, #4]
 8003fde:	6813      	ldr	r3, [r2, #0]
 8003fe0:	9301      	str	r3, [sp, #4]
 8003fe2:	6853      	ldr	r3, [r2, #4]
 8003fe4:	9301      	str	r3, [sp, #4]
 8003fe6:	9b01      	ldr	r3, [sp, #4]
 8003fe8:	e7d5      	b.n	8003f96 <UART_Receive_IT.part.0.isra.0+0x76>
 8003fea:	bf00      	nop

08003fec <HAL_UART_IRQHandler>:
{
 8003fec:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fee:	6803      	ldr	r3, [r0, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ff2:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ff4:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8003ff6:	f012 0f0f 	tst.w	r2, #15
{
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8003ffe:	d16e      	bne.n	80040de <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004000:	0695      	lsls	r5, r2, #26
 8004002:	d502      	bpl.n	800400a <HAL_UART_IRQHandler+0x1e>
 8004004:	068d      	lsls	r5, r1, #26
 8004006:	f100 80b2 	bmi.w	800416e <HAL_UART_IRQHandler+0x182>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800400a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800400c:	2801      	cmp	r0, #1
 800400e:	d00b      	beq.n	8004028 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004010:	0610      	lsls	r0, r2, #24
 8004012:	d502      	bpl.n	800401a <HAL_UART_IRQHandler+0x2e>
 8004014:	060d      	lsls	r5, r1, #24
 8004016:	f100 80b4 	bmi.w	8004182 <HAL_UART_IRQHandler+0x196>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800401a:	0650      	lsls	r0, r2, #25
 800401c:	d502      	bpl.n	8004024 <HAL_UART_IRQHandler+0x38>
 800401e:	064a      	lsls	r2, r1, #25
 8004020:	f100 80ce 	bmi.w	80041c0 <HAL_UART_IRQHandler+0x1d4>
}
 8004024:	b003      	add	sp, #12
 8004026:	bd30      	pop	{r4, r5, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004028:	06d5      	lsls	r5, r2, #27
 800402a:	d5f1      	bpl.n	8004010 <HAL_UART_IRQHandler+0x24>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800402c:	06c8      	lsls	r0, r1, #27
 800402e:	d5ef      	bpl.n	8004010 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004030:	2200      	movs	r2, #0
 8004032:	9201      	str	r2, [sp, #4]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	9201      	str	r2, [sp, #4]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	9201      	str	r2, [sp, #4]
 800403c:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800403e:	695a      	ldr	r2, [r3, #20]
 8004040:	0655      	lsls	r5, r2, #25
 8004042:	f140 8117 	bpl.w	8004274 <HAL_UART_IRQHandler+0x288>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004046:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004048:	6802      	ldr	r2, [r0, #0]
 800404a:	6852      	ldr	r2, [r2, #4]
 800404c:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800404e:	2a00      	cmp	r2, #0
 8004050:	d0e8      	beq.n	8004024 <HAL_UART_IRQHandler+0x38>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004052:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8004054:	4291      	cmp	r1, r2
 8004056:	d9e5      	bls.n	8004024 <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 8004058:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800405a:	69c2      	ldr	r2, [r0, #28]
 800405c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004060:	d036      	beq.n	80040d0 <HAL_UART_IRQHandler+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004062:	f103 020c 	add.w	r2, r3, #12
 8004066:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800406a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406e:	f103 050c 	add.w	r5, r3, #12
 8004072:	e845 2100 	strex	r1, r2, [r5]
 8004076:	2900      	cmp	r1, #0
 8004078:	d1f3      	bne.n	8004062 <HAL_UART_IRQHandler+0x76>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407a:	f103 0214 	add.w	r2, r3, #20
 800407e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004082:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004086:	f103 0514 	add.w	r5, r3, #20
 800408a:	e845 2100 	strex	r1, r2, [r5]
 800408e:	2900      	cmp	r1, #0
 8004090:	d1f3      	bne.n	800407a <HAL_UART_IRQHandler+0x8e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004092:	f103 0214 	add.w	r2, r3, #20
 8004096:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800409a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409e:	f103 0514 	add.w	r5, r3, #20
 80040a2:	e845 2100 	strex	r1, r2, [r5]
 80040a6:	2900      	cmp	r1, #0
 80040a8:	d1f3      	bne.n	8004092 <HAL_UART_IRQHandler+0xa6>
          huart->RxState = HAL_UART_STATE_READY;
 80040aa:	2220      	movs	r2, #32
 80040ac:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040b0:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b2:	f103 020c 	add.w	r2, r3, #12
 80040b6:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ba:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040be:	f103 050c 	add.w	r5, r3, #12
 80040c2:	e845 2100 	strex	r1, r2, [r5]
 80040c6:	2900      	cmp	r1, #0
 80040c8:	d1f3      	bne.n	80040b2 <HAL_UART_IRQHandler+0xc6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040ca:	f7fe ff31 	bl	8002f30 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040ce:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80040d0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80040d2:	1ac9      	subs	r1, r1, r3
 80040d4:	4620      	mov	r0, r4
 80040d6:	b289      	uxth	r1, r1
 80040d8:	f7ff ff20 	bl	8003f1c <HAL_UARTEx_RxEventCallback>
 80040dc:	e7a2      	b.n	8004024 <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80040de:	f005 0501 	and.w	r5, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80040e2:	f401 7090 	and.w	r0, r1, #288	; 0x120
 80040e6:	4328      	orrs	r0, r5
 80040e8:	d08f      	beq.n	800400a <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040ea:	07d0      	lsls	r0, r2, #31
 80040ec:	d505      	bpl.n	80040fa <HAL_UART_IRQHandler+0x10e>
 80040ee:	05c8      	lsls	r0, r1, #23
 80040f0:	d503      	bpl.n	80040fa <HAL_UART_IRQHandler+0x10e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040f2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80040f4:	f040 0001 	orr.w	r0, r0, #1
 80040f8:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040fa:	0750      	lsls	r0, r2, #29
 80040fc:	d532      	bpl.n	8004164 <HAL_UART_IRQHandler+0x178>
 80040fe:	b14d      	cbz	r5, 8004114 <HAL_UART_IRQHandler+0x128>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004100:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004102:	f040 0002 	orr.w	r0, r0, #2
 8004106:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004108:	0790      	lsls	r0, r2, #30
 800410a:	d503      	bpl.n	8004114 <HAL_UART_IRQHandler+0x128>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800410c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800410e:	f040 0004 	orr.w	r0, r0, #4
 8004112:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004114:	0710      	lsls	r0, r2, #28
 8004116:	d507      	bpl.n	8004128 <HAL_UART_IRQHandler+0x13c>
 8004118:	f001 0020 	and.w	r0, r1, #32
 800411c:	4328      	orrs	r0, r5
 800411e:	d003      	beq.n	8004128 <HAL_UART_IRQHandler+0x13c>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004120:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004122:	f040 0008 	orr.w	r0, r0, #8
 8004126:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004128:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800412a:	2800      	cmp	r0, #0
 800412c:	f43f af7a 	beq.w	8004024 <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004130:	0690      	lsls	r0, r2, #26
 8004132:	d509      	bpl.n	8004148 <HAL_UART_IRQHandler+0x15c>
 8004134:	0689      	lsls	r1, r1, #26
 8004136:	d507      	bpl.n	8004148 <HAL_UART_IRQHandler+0x15c>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004138:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800413c:	2a22      	cmp	r2, #34	; 0x22
 800413e:	d103      	bne.n	8004148 <HAL_UART_IRQHandler+0x15c>
 8004140:	4620      	mov	r0, r4
 8004142:	f7ff feed 	bl	8003f20 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004146:	6823      	ldr	r3, [r4, #0]
 8004148:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800414a:	6c21      	ldr	r1, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800414c:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004150:	f001 0108 	and.w	r1, r1, #8
 8004154:	ea52 0501 	orrs.w	r5, r2, r1
 8004158:	d13d      	bne.n	80041d6 <HAL_UART_IRQHandler+0x1ea>
        HAL_UART_ErrorCallback(huart);
 800415a:	4620      	mov	r0, r4
 800415c:	f7ff fed4 	bl	8003f08 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004160:	6425      	str	r5, [r4, #64]	; 0x40
 8004162:	e75f      	b.n	8004024 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004164:	0790      	lsls	r0, r2, #30
 8004166:	d5d5      	bpl.n	8004114 <HAL_UART_IRQHandler+0x128>
 8004168:	2d00      	cmp	r5, #0
 800416a:	d1cf      	bne.n	800410c <HAL_UART_IRQHandler+0x120>
 800416c:	e7d2      	b.n	8004114 <HAL_UART_IRQHandler+0x128>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800416e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004172:	2b22      	cmp	r3, #34	; 0x22
 8004174:	f47f af56 	bne.w	8004024 <HAL_UART_IRQHandler+0x38>
}
 8004178:	b003      	add	sp, #12
 800417a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800417e:	f7ff becf 	b.w	8003f20 <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004182:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004186:	2a21      	cmp	r2, #33	; 0x21
 8004188:	f47f af4c 	bne.w	8004024 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800418c:	68a2      	ldr	r2, [r4, #8]
 800418e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8004192:	f000 80a8 	beq.w	80042e6 <HAL_UART_IRQHandler+0x2fa>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004196:	6a22      	ldr	r2, [r4, #32]
 8004198:	1c51      	adds	r1, r2, #1
 800419a:	6221      	str	r1, [r4, #32]
 800419c:	7812      	ldrb	r2, [r2, #0]
 800419e:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 80041a0:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80041a2:	3a01      	subs	r2, #1
 80041a4:	b292      	uxth	r2, r2
 80041a6:	84e2      	strh	r2, [r4, #38]	; 0x26
 80041a8:	2a00      	cmp	r2, #0
 80041aa:	f47f af3b 	bne.w	8004024 <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041ae:	68da      	ldr	r2, [r3, #12]
 80041b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041b4:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041b6:	68da      	ldr	r2, [r3, #12]
 80041b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041bc:	60da      	str	r2, [r3, #12]
 80041be:	e731      	b.n	8004024 <HAL_UART_IRQHandler+0x38>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041c0:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80041c2:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041c8:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80041ca:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 80041cc:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 80041d0:	f7ff fe96 	bl	8003f00 <HAL_UART_TxCpltCallback>
    return;
 80041d4:	e726      	b.n	8004024 <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d6:	f103 020c 	add.w	r2, r3, #12
 80041da:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e2:	f103 000c 	add.w	r0, r3, #12
 80041e6:	e840 2100 	strex	r1, r2, [r0]
 80041ea:	2900      	cmp	r1, #0
 80041ec:	d1f3      	bne.n	80041d6 <HAL_UART_IRQHandler+0x1ea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ee:	f103 0214 	add.w	r2, r3, #20
 80041f2:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041f6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fa:	f103 0014 	add.w	r0, r3, #20
 80041fe:	e840 2100 	strex	r1, r2, [r0]
 8004202:	2900      	cmp	r1, #0
 8004204:	d1f3      	bne.n	80041ee <HAL_UART_IRQHandler+0x202>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004206:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004208:	2a01      	cmp	r2, #1
 800420a:	d022      	beq.n	8004252 <HAL_UART_IRQHandler+0x266>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800420c:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800420e:	2120      	movs	r1, #32
 8004210:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004214:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004216:	695a      	ldr	r2, [r3, #20]
 8004218:	0652      	lsls	r2, r2, #25
 800421a:	d527      	bpl.n	800426c <HAL_UART_IRQHandler+0x280>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421c:	f103 0214 	add.w	r2, r3, #20
 8004220:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004224:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004228:	f103 0014 	add.w	r0, r3, #20
 800422c:	e840 2100 	strex	r1, r2, [r0]
 8004230:	2900      	cmp	r1, #0
 8004232:	d1f3      	bne.n	800421c <HAL_UART_IRQHandler+0x230>
          if (huart->hdmarx != NULL)
 8004234:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004236:	b1c8      	cbz	r0, 800426c <HAL_UART_IRQHandler+0x280>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004238:	4b31      	ldr	r3, [pc, #196]	; (8004300 <HAL_UART_IRQHandler+0x314>)
 800423a:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800423c:	f7fe fec2 	bl	8002fc4 <HAL_DMA_Abort_IT>
 8004240:	2800      	cmp	r0, #0
 8004242:	f43f aeef 	beq.w	8004024 <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004246:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004248:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 800424a:	b003      	add	sp, #12
 800424c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004250:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004252:	f103 020c 	add.w	r2, r3, #12
 8004256:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800425a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425e:	f103 000c 	add.w	r0, r3, #12
 8004262:	e840 2100 	strex	r1, r2, [r0]
 8004266:	2900      	cmp	r1, #0
 8004268:	d1f3      	bne.n	8004252 <HAL_UART_IRQHandler+0x266>
 800426a:	e7cf      	b.n	800420c <HAL_UART_IRQHandler+0x220>
            HAL_UART_ErrorCallback(huart);
 800426c:	4620      	mov	r0, r4
 800426e:	f7ff fe4b 	bl	8003f08 <HAL_UART_ErrorCallback>
 8004272:	e6d7      	b.n	8004024 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004274:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      if ((huart->RxXferCount > 0U)
 8004276:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004278:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
      if ((huart->RxXferCount > 0U)
 800427a:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800427c:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800427e:	2a00      	cmp	r2, #0
 8004280:	f43f aed0 	beq.w	8004024 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004284:	1a41      	subs	r1, r0, r1
 8004286:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8004288:	2900      	cmp	r1, #0
 800428a:	f43f aecb 	beq.w	8004024 <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428e:	f103 020c 	add.w	r2, r3, #12
 8004292:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004296:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429a:	f103 050c 	add.w	r5, r3, #12
 800429e:	e845 2000 	strex	r0, r2, [r5]
 80042a2:	2800      	cmp	r0, #0
 80042a4:	d1f3      	bne.n	800428e <HAL_UART_IRQHandler+0x2a2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a6:	f103 0214 	add.w	r2, r3, #20
 80042aa:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ae:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b2:	f103 0514 	add.w	r5, r3, #20
 80042b6:	e845 2000 	strex	r0, r2, [r5]
 80042ba:	2800      	cmp	r0, #0
 80042bc:	d1f3      	bne.n	80042a6 <HAL_UART_IRQHandler+0x2ba>
        huart->RxState = HAL_UART_STATE_READY;
 80042be:	2220      	movs	r2, #32
 80042c0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c4:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c6:	f103 020c 	add.w	r2, r3, #12
 80042ca:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ce:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d2:	f103 050c 	add.w	r5, r3, #12
 80042d6:	e845 2000 	strex	r0, r2, [r5]
 80042da:	2800      	cmp	r0, #0
 80042dc:	d1f3      	bne.n	80042c6 <HAL_UART_IRQHandler+0x2da>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042de:	4620      	mov	r0, r4
 80042e0:	f7ff fe1c 	bl	8003f1c <HAL_UARTEx_RxEventCallback>
 80042e4:	e69e      	b.n	8004024 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042e6:	6922      	ldr	r2, [r4, #16]
 80042e8:	2a00      	cmp	r2, #0
 80042ea:	f47f af54 	bne.w	8004196 <HAL_UART_IRQHandler+0x1aa>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042ee:	6a22      	ldr	r2, [r4, #32]
 80042f0:	f832 1b02 	ldrh.w	r1, [r2], #2
 80042f4:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80042f8:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80042fa:	6222      	str	r2, [r4, #32]
 80042fc:	e750      	b.n	80041a0 <HAL_UART_IRQHandler+0x1b4>
 80042fe:	bf00      	nop
 8004300:	08003f0d 	.word	0x08003f0d

08004304 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004304:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8004306:	f000 fd4f 	bl	8004da8 <vTaskStartScheduler>
  
  return osOK;
}
 800430a:	2000      	movs	r0, #0
 800430c:	bd08      	pop	{r3, pc}
 800430e:	bf00      	nop

08004310 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004310:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004312:	6944      	ldr	r4, [r0, #20]
{
 8004314:	b086      	sub	sp, #24
 8004316:	4684      	mov	ip, r0
 8004318:	460b      	mov	r3, r1
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800431a:	b1ac      	cbz	r4, 8004348 <osThreadCreate+0x38>
 800431c:	6986      	ldr	r6, [r0, #24]
 800431e:	b19e      	cbz	r6, 8004348 <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004320:	f9bc e008 	ldrsh.w	lr, [ip, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004324:	f8dc 1000 	ldr.w	r1, [ip]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004328:	f8dc 2010 	ldr.w	r2, [ip, #16]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800432c:	6840      	ldr	r0, [r0, #4]
  if (priority != osPriorityError) {
 800432e:	f1be 0f84 	cmp.w	lr, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8004332:	bf14      	ite	ne
 8004334:	f10e 0503 	addne.w	r5, lr, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004338:	2500      	moveq	r5, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800433a:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800433e:	9500      	str	r5, [sp, #0]
 8004340:	f000 faf6 	bl	8004930 <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 8004344:	b006      	add	sp, #24
 8004346:	bd70      	pop	{r4, r5, r6, pc}
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004348:	f9bc 4008 	ldrsh.w	r4, [ip, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800434c:	f8bc 2010 	ldrh.w	r2, [ip, #16]
  if (priority != osPriorityError) {
 8004350:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8004352:	bf14      	ite	ne
 8004354:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004356:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004358:	e9dc 1000 	ldrd	r1, r0, [ip]
 800435c:	9400      	str	r4, [sp, #0]
 800435e:	ac05      	add	r4, sp, #20
 8004360:	9401      	str	r4, [sp, #4]
 8004362:	f000 fb99 	bl	8004a98 <xTaskCreate>
 8004366:	2801      	cmp	r0, #1
  return handle;
 8004368:	bf0c      	ite	eq
 800436a:	9805      	ldreq	r0, [sp, #20]
      return NULL;
 800436c:	2000      	movne	r0, #0
}
 800436e:	b006      	add	sp, #24
 8004370:	bd70      	pop	{r4, r5, r6, pc}
 8004372:	bf00      	nop

08004374 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004374:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004376:	2801      	cmp	r0, #1
 8004378:	bf38      	it	cc
 800437a:	2001      	movcc	r0, #1
 800437c:	f000 fc34 	bl	8004be8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004380:	2000      	movs	r0, #0
 8004382:	bd08      	pop	{r3, pc}

08004384 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8004384:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8004386:	f000 fe09 	bl	8004f9c <vTaskSuspend>
  
  return osOK;
#else
  return osErrorResource;
#endif
}
 800438a:	2000      	movs	r0, #0
 800438c:	bd08      	pop	{r3, pc}
 800438e:	bf00      	nop

08004390 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8004390:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004392:	f3ef 8305 	mrs	r3, IPSR
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8004396:	b12b      	cbz	r3, 80043a4 <osThreadResume+0x14>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8004398:	f000 fca8 	bl	8004cec <xTaskResumeFromISR>
 800439c:	2801      	cmp	r0, #1
 800439e:	d005      	beq.n	80043ac <osThreadResume+0x1c>
  }
  return osOK;
#else
  return osErrorResource;
#endif
}
 80043a0:	2000      	movs	r0, #0
 80043a2:	bd08      	pop	{r3, pc}
    vTaskResume(thread_id);
 80043a4:	f000 fc50 	bl	8004c48 <vTaskResume>
}
 80043a8:	2000      	movs	r0, #0
 80043aa:	bd08      	pop	{r3, pc}
      portYIELD_FROM_ISR(pdTRUE);
 80043ac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80043b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043b4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80043b8:	f3bf 8f4f 	dsb	sy
 80043bc:	f3bf 8f6f 	isb	sy
}
 80043c0:	2000      	movs	r0, #0
 80043c2:	bd08      	pop	{r3, pc}

080043c4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043c4:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80043c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80043cc:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80043ce:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043d2:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80043d6:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop

080043dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80043dc:	2300      	movs	r3, #0
 80043de:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop

080043e4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80043e4:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80043ea:	6802      	ldr	r2, [r0, #0]
{
 80043ec:	b410      	push	{r4}
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80043ee:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80043f0:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 80043f2:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80043f4:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80043f6:	6099      	str	r1, [r3, #8]
}
 80043f8:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 80043fc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80043fe:	6002      	str	r2, [r0, #0]
}
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop

08004404 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004404:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004406:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004408:	1c6b      	adds	r3, r5, #1
 800440a:	d010      	beq.n	800442e <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800440c:	f100 0308 	add.w	r3, r0, #8
 8004410:	461c      	mov	r4, r3
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	42aa      	cmp	r2, r5
 8004418:	d9fa      	bls.n	8004410 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800441a:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800441c:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800441e:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004420:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004422:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8004424:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 8004426:	6108      	str	r0, [r1, #16]
}
 8004428:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 800442a:	6002      	str	r2, [r0, #0]
}
 800442c:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800442e:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8004430:	6863      	ldr	r3, [r4, #4]
 8004432:	e7f2      	b.n	800441a <vListInsert+0x16>

08004434 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004434:	6903      	ldr	r3, [r0, #16]
{
 8004436:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004438:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800443c:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800443e:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
 8004440:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004442:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004444:	bf08      	it	eq
 8004446:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8004448:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800444a:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
 800444e:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 8004450:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 8004452:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8004454:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8004456:	6818      	ldr	r0, [r3, #0]
}
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop

0800445c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800445c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004460:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004462:	f000 fe87 	bl	8005174 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004466:	4a34      	ldr	r2, [pc, #208]	; (8004538 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 8004468:	4d34      	ldr	r5, [pc, #208]	; (800453c <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 800446a:	6813      	ldr	r3, [r2, #0]
 800446c:	3301      	adds	r3, #1
 800446e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004470:	682b      	ldr	r3, [r5, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d032      	beq.n	80044dc <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004476:	4e32      	ldr	r6, [pc, #200]	; (8004540 <prvAddNewTaskToReadyList+0xe4>)
 8004478:	6833      	ldr	r3, [r6, #0]
 800447a:	b33b      	cbz	r3, 80044cc <prvAddNewTaskToReadyList+0x70>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800447c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800447e:	4f31      	ldr	r7, [pc, #196]	; (8004544 <prvAddNewTaskToReadyList+0xe8>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004480:	4831      	ldr	r0, [pc, #196]	; (8004548 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004482:	4932      	ldr	r1, [pc, #200]	; (800454c <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 8004484:	6802      	ldr	r2, [r0, #0]
 8004486:	3201      	adds	r2, #1
 8004488:	6002      	str	r2, [r0, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800448a:	6808      	ldr	r0, [r1, #0]
 800448c:	2201      	movs	r2, #1
 800448e:	409a      	lsls	r2, r3
 8004490:	4302      	orrs	r2, r0
 8004492:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004496:	600a      	str	r2, [r1, #0]
 8004498:	eb07 0083 	add.w	r0, r7, r3, lsl #2
 800449c:	1d21      	adds	r1, r4, #4
 800449e:	f7ff ffa1 	bl	80043e4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80044a2:	f000 fe89 	bl	80051b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80044a6:	6833      	ldr	r3, [r6, #0]
 80044a8:	b173      	cbz	r3, 80044c8 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80044aa:	682a      	ldr	r2, [r5, #0]
 80044ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80044ae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d209      	bcs.n	80044c8 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80044b4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80044b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044bc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80044cc:	682a      	ldr	r2, [r5, #0]
 80044ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80044d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80044d2:	4f1c      	ldr	r7, [pc, #112]	; (8004544 <prvAddNewTaskToReadyList+0xe8>)
 80044d4:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80044d6:	bf98      	it	ls
 80044d8:	602c      	strls	r4, [r5, #0]
 80044da:	e7d1      	b.n	8004480 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 80044dc:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80044de:	6813      	ldr	r3, [r2, #0]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d003      	beq.n	80044ec <prvAddNewTaskToReadyList+0x90>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80044e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80044e6:	4f17      	ldr	r7, [pc, #92]	; (8004544 <prvAddNewTaskToReadyList+0xe8>)
 80044e8:	4e15      	ldr	r6, [pc, #84]	; (8004540 <prvAddNewTaskToReadyList+0xe4>)
 80044ea:	e7c9      	b.n	8004480 <prvAddNewTaskToReadyList+0x24>
 80044ec:	4f15      	ldr	r7, [pc, #84]	; (8004544 <prvAddNewTaskToReadyList+0xe8>)
 80044ee:	463e      	mov	r6, r7
 80044f0:	f107 088c 	add.w	r8, r7, #140	; 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80044f4:	4630      	mov	r0, r6
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044f6:	3614      	adds	r6, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80044f8:	f7ff ff64 	bl	80043c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044fc:	45b0      	cmp	r8, r6
 80044fe:	d1f9      	bne.n	80044f4 <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004500:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8004564 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
 8004504:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8004568 <prvAddNewTaskToReadyList+0x10c>
 8004508:	4e0d      	ldr	r6, [pc, #52]	; (8004540 <prvAddNewTaskToReadyList+0xe4>)
	vListInitialise( &xDelayedTaskList1 );
 800450a:	4648      	mov	r0, r9
 800450c:	f7ff ff5a 	bl	80043c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004510:	4640      	mov	r0, r8
 8004512:	f7ff ff57 	bl	80043c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004516:	480e      	ldr	r0, [pc, #56]	; (8004550 <prvAddNewTaskToReadyList+0xf4>)
 8004518:	f7ff ff54 	bl	80043c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800451c:	480d      	ldr	r0, [pc, #52]	; (8004554 <prvAddNewTaskToReadyList+0xf8>)
 800451e:	f7ff ff51 	bl	80043c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004522:	480d      	ldr	r0, [pc, #52]	; (8004558 <prvAddNewTaskToReadyList+0xfc>)
 8004524:	f7ff ff4e 	bl	80043c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004528:	4b0c      	ldr	r3, [pc, #48]	; (800455c <prvAddNewTaskToReadyList+0x100>)
 800452a:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800452e:	4b0c      	ldr	r3, [pc, #48]	; (8004560 <prvAddNewTaskToReadyList+0x104>)
 8004530:	f8c3 8000 	str.w	r8, [r3]
		prvAddTaskToReadyList( pxNewTCB );
 8004534:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
}
 8004536:	e7a3      	b.n	8004480 <prvAddNewTaskToReadyList+0x24>
 8004538:	200008a4 	.word	0x200008a4
 800453c:	2000080c 	.word	0x2000080c
 8004540:	20000900 	.word	0x20000900
 8004544:	20000818 	.word	0x20000818
 8004548:	200008b0 	.word	0x200008b0
 800454c:	200008b4 	.word	0x200008b4
 8004550:	200008ec 	.word	0x200008ec
 8004554:	20000918 	.word	0x20000918
 8004558:	20000904 	.word	0x20000904
 800455c:	20000810 	.word	0x20000810
 8004560:	20000814 	.word	0x20000814
 8004564:	200008b8 	.word	0x200008b8
 8004568:	200008cc 	.word	0x200008cc

0800456c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800456c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800456e:	4b1b      	ldr	r3, [pc, #108]	; (80045dc <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004570:	4e1b      	ldr	r6, [pc, #108]	; (80045e0 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8004572:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004574:	6833      	ldr	r3, [r6, #0]
{
 8004576:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004578:	1d18      	adds	r0, r3, #4
{
 800457a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800457c:	f7ff ff5a 	bl	8004434 <uxListRemove>
 8004580:	b940      	cbnz	r0, 8004594 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004582:	6833      	ldr	r3, [r6, #0]
 8004584:	4917      	ldr	r1, [pc, #92]	; (80045e4 <prvAddCurrentTaskToDelayedList+0x78>)
 8004586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004588:	2201      	movs	r2, #1
 800458a:	409a      	lsls	r2, r3
 800458c:	680b      	ldr	r3, [r1, #0]
 800458e:	ea23 0302 	bic.w	r3, r3, r2
 8004592:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004594:	1c6b      	adds	r3, r5, #1
 8004596:	d017      	beq.n	80045c8 <prvAddCurrentTaskToDelayedList+0x5c>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004598:	6833      	ldr	r3, [r6, #0]
 800459a:	1964      	adds	r4, r4, r5
 800459c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800459e:	d307      	bcc.n	80045b0 <prvAddCurrentTaskToDelayedList+0x44>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045a0:	4b11      	ldr	r3, [pc, #68]	; (80045e8 <prvAddCurrentTaskToDelayedList+0x7c>)
 80045a2:	6818      	ldr	r0, [r3, #0]
 80045a4:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80045a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045aa:	3104      	adds	r1, #4
 80045ac:	f7ff bf2a 	b.w	8004404 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045b0:	4b0e      	ldr	r3, [pc, #56]	; (80045ec <prvAddCurrentTaskToDelayedList+0x80>)
 80045b2:	6818      	ldr	r0, [r3, #0]
 80045b4:	6831      	ldr	r1, [r6, #0]
 80045b6:	3104      	adds	r1, #4
 80045b8:	f7ff ff24 	bl	8004404 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80045bc:	4b0c      	ldr	r3, [pc, #48]	; (80045f0 <prvAddCurrentTaskToDelayedList+0x84>)
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 80045c2:	bf88      	it	hi
 80045c4:	601c      	strhi	r4, [r3, #0]
}
 80045c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80045c8:	2f00      	cmp	r7, #0
 80045ca:	d0e5      	beq.n	8004598 <prvAddCurrentTaskToDelayedList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045cc:	6831      	ldr	r1, [r6, #0]
 80045ce:	4809      	ldr	r0, [pc, #36]	; (80045f4 <prvAddCurrentTaskToDelayedList+0x88>)
}
 80045d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045d4:	3104      	adds	r1, #4
 80045d6:	f7ff bf05 	b.w	80043e4 <vListInsertEnd>
 80045da:	bf00      	nop
 80045dc:	2000092c 	.word	0x2000092c
 80045e0:	2000080c 	.word	0x2000080c
 80045e4:	200008b4 	.word	0x200008b4
 80045e8:	20000814 	.word	0x20000814
 80045ec:	20000810 	.word	0x20000810
 80045f0:	200008e0 	.word	0x200008e0
 80045f4:	20000904 	.word	0x20000904

080045f8 <prvIdleTask>:
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	4d23      	ldr	r5, [pc, #140]	; (8004688 <prvIdleTask+0x90>)
 80045fc:	4f23      	ldr	r7, [pc, #140]	; (800468c <prvIdleTask+0x94>)
 80045fe:	4e24      	ldr	r6, [pc, #144]	; (8004690 <prvIdleTask+0x98>)
 8004600:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8004694 <prvIdleTask+0x9c>
				taskYIELD();
 8004604:	f04f 2ae0 	mov.w	sl, #3758153728	; 0xe000e000
 8004608:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800460c:	682b      	ldr	r3, [r5, #0]
 800460e:	b35b      	cbz	r3, 8004668 <prvIdleTask+0x70>
			taskENTER_CRITICAL();
 8004610:	f000 fdb0 	bl	8005174 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004618:	1d20      	adds	r0, r4, #4
 800461a:	f7ff ff0b 	bl	8004434 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800461e:	6833      	ldr	r3, [r6, #0]
 8004620:	3b01      	subs	r3, #1
 8004622:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004624:	682b      	ldr	r3, [r5, #0]
 8004626:	3b01      	subs	r3, #1
 8004628:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
 800462a:	f000 fdc5 	bl	80051b8 <vPortExitCritical>
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800462e:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8004632:	f002 fd33 	bl	800709c <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004636:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
 800463a:	b163      	cbz	r3, 8004656 <prvIdleTask+0x5e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800463c:	2b01      	cmp	r3, #1
 800463e:	d01e      	beq.n	800467e <prvIdleTask+0x86>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004640:	2b02      	cmp	r3, #2
 8004642:	d0e3      	beq.n	800460c <prvIdleTask+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004648:	f383 8811 	msr	BASEPRI, r3
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	e7fe      	b.n	8004654 <prvIdleTask+0x5c>
				vPortFree( pxTCB->pxStack );
 8004656:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004658:	f000 ffaa 	bl	80055b0 <vPortFree>
				vPortFree( pxTCB );
 800465c:	4620      	mov	r0, r4
 800465e:	f000 ffa7 	bl	80055b0 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004662:	682b      	ldr	r3, [r5, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1d3      	bne.n	8004610 <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004668:	f8d8 3000 	ldr.w	r3, [r8]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d9cd      	bls.n	800460c <prvIdleTask+0x14>
				taskYIELD();
 8004670:	f8ca 9d04 	str.w	r9, [sl, #3332]	; 0xd04
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	e7c6      	b.n	800460c <prvIdleTask+0x14>
				vPortFree( pxTCB );
 800467e:	4620      	mov	r0, r4
 8004680:	f000 ff96 	bl	80055b0 <vPortFree>
 8004684:	e7c2      	b.n	800460c <prvIdleTask+0x14>
 8004686:	bf00      	nop
 8004688:	200008a8 	.word	0x200008a8
 800468c:	20000918 	.word	0x20000918
 8004690:	200008a4 	.word	0x200008a4
 8004694:	20000818 	.word	0x20000818

08004698 <xTaskIncrementTick.part.0>:
BaseType_t xTaskIncrementTick( void )
 8004698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800469c:	4b4a      	ldr	r3, [pc, #296]	; (80047c8 <xTaskIncrementTick.part.0+0x130>)
 800469e:	681d      	ldr	r5, [r3, #0]
 80046a0:	3501      	adds	r5, #1
BaseType_t xTaskIncrementTick( void )
 80046a2:	b083      	sub	sp, #12
		xTickCount = xConstTickCount;
 80046a4:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80046a6:	2d00      	cmp	r5, #0
 80046a8:	d045      	beq.n	8004736 <xTaskIncrementTick.part.0+0x9e>
 80046aa:	4b48      	ldr	r3, [pc, #288]	; (80047cc <xTaskIncrementTick.part.0+0x134>)
 80046ac:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	429d      	cmp	r5, r3
 80046b2:	d34d      	bcc.n	8004750 <xTaskIncrementTick.part.0+0xb8>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046b4:	4e46      	ldr	r6, [pc, #280]	; (80047d0 <xTaskIncrementTick.part.0+0x138>)
 80046b6:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80047e4 <xTaskIncrementTick.part.0+0x14c>
 80046ba:	6833      	ldr	r3, [r6, #0]
 80046bc:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80047e8 <xTaskIncrementTick.part.0+0x150>
 80046c0:	681c      	ldr	r4, [r3, #0]
 80046c2:	2c00      	cmp	r4, #0
 80046c4:	d07a      	beq.n	80047bc <xTaskIncrementTick.part.0+0x124>
					prvAddTaskToReadyList( pxTCB );
 80046c6:	4f43      	ldr	r7, [pc, #268]	; (80047d4 <xTaskIncrementTick.part.0+0x13c>)
BaseType_t xSwitchRequired = pdFALSE;
 80046c8:	2400      	movs	r4, #0
					prvAddTaskToReadyList( pxTCB );
 80046ca:	f04f 0a01 	mov.w	sl, #1
 80046ce:	e024      	b.n	800471a <xTaskIncrementTick.part.0+0x82>
 80046d0:	9100      	str	r1, [sp, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046d2:	f7ff feaf 	bl	8004434 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046d6:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 80046da:	9900      	ldr	r1, [sp, #0]
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046dc:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046e0:	b112      	cbz	r2, 80046e8 <xTaskIncrementTick.part.0+0x50>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046e2:	f7ff fea7 	bl	8004434 <uxListRemove>
 80046e6:	9900      	ldr	r1, [sp, #0]
					prvAddTaskToReadyList( pxTCB );
 80046e8:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	fa0a f200 	lsl.w	r2, sl, r0
 80046f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80046f6:	431a      	orrs	r2, r3
 80046f8:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80046fc:	603a      	str	r2, [r7, #0]
 80046fe:	f7ff fe71 	bl	80043e4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004702:	f8d9 2000 	ldr.w	r2, [r9]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004706:	6830      	ldr	r0, [r6, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004708:	f8db 102c 	ldr.w	r1, [fp, #44]	; 0x2c
 800470c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800470e:	6803      	ldr	r3, [r0, #0]
							xSwitchRequired = pdTRUE;
 8004710:	4291      	cmp	r1, r2
 8004712:	bf28      	it	cs
 8004714:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004716:	2b00      	cmp	r3, #0
 8004718:	d050      	beq.n	80047bc <xTaskIncrementTick.part.0+0x124>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800471a:	6833      	ldr	r3, [r6, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004722:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004726:	f10b 0104 	add.w	r1, fp, #4
					if( xConstTickCount < xItemValue )
 800472a:	4295      	cmp	r5, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800472c:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 800472e:	d2cf      	bcs.n	80046d0 <xTaskIncrementTick.part.0+0x38>
						xNextTaskUnblockTime = xItemValue;
 8004730:	9b01      	ldr	r3, [sp, #4]
 8004732:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004734:	e011      	b.n	800475a <xTaskIncrementTick.part.0+0xc2>
			taskSWITCH_DELAYED_LISTS();
 8004736:	4b26      	ldr	r3, [pc, #152]	; (80047d0 <xTaskIncrementTick.part.0+0x138>)
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	6812      	ldr	r2, [r2, #0]
 800473c:	b30a      	cbz	r2, 8004782 <xTaskIncrementTick.part.0+0xea>
 800473e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004742:	f383 8811 	msr	BASEPRI, r3
 8004746:	f3bf 8f6f 	isb	sy
 800474a:	f3bf 8f4f 	dsb	sy
 800474e:	e7fe      	b.n	800474e <xTaskIncrementTick.part.0+0xb6>
 8004750:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80047e4 <xTaskIncrementTick.part.0+0x14c>
 8004754:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80047e8 <xTaskIncrementTick.part.0+0x150>
BaseType_t xSwitchRequired = pdFALSE;
 8004758:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800475a:	f8d9 3000 	ldr.w	r3, [r9]
			if( xYieldPending != pdFALSE )
 800475e:	491e      	ldr	r1, [pc, #120]	; (80047d8 <xTaskIncrementTick.part.0+0x140>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004762:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	f858 2003 	ldr.w	r2, [r8, r3]
			if( xYieldPending != pdFALSE )
 800476c:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 800476e:	2a02      	cmp	r2, #2
 8004770:	bf28      	it	cs
 8004772:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 8004774:	2b00      	cmp	r3, #0
}
 8004776:	bf0c      	ite	eq
 8004778:	4620      	moveq	r0, r4
 800477a:	2001      	movne	r0, #1
 800477c:	b003      	add	sp, #12
 800477e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8004782:	4a16      	ldr	r2, [pc, #88]	; (80047dc <xTaskIncrementTick.part.0+0x144>)
 8004784:	6818      	ldr	r0, [r3, #0]
 8004786:	6811      	ldr	r1, [r2, #0]
 8004788:	6019      	str	r1, [r3, #0]
 800478a:	4915      	ldr	r1, [pc, #84]	; (80047e0 <xTaskIncrementTick.part.0+0x148>)
 800478c:	6010      	str	r0, [r2, #0]
 800478e:	680a      	ldr	r2, [r1, #0]
 8004790:	3201      	adds	r2, #1
 8004792:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	6812      	ldr	r2, [r2, #0]
 8004798:	b93a      	cbnz	r2, 80047aa <xTaskIncrementTick.part.0+0x112>
		xNextTaskUnblockTime = portMAX_DELAY;
 800479a:	4b0c      	ldr	r3, [pc, #48]	; (80047cc <xTaskIncrementTick.part.0+0x134>)
 800479c:	9301      	str	r3, [sp, #4]
 800479e:	461a      	mov	r2, r3
 80047a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047a4:	6013      	str	r3, [r2, #0]
 80047a6:	4613      	mov	r3, r2
 80047a8:	e781      	b.n	80046ae <xTaskIncrementTick.part.0+0x16>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047aa:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80047ac:	4a07      	ldr	r2, [pc, #28]	; (80047cc <xTaskIncrementTick.part.0+0x134>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047ae:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80047b0:	9201      	str	r2, [sp, #4]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	6013      	str	r3, [r2, #0]
 80047b8:	4613      	mov	r3, r2
}
 80047ba:	e778      	b.n	80046ae <xTaskIncrementTick.part.0+0x16>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047bc:	9a01      	ldr	r2, [sp, #4]
 80047be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047c2:	6013      	str	r3, [r2, #0]
					break;
 80047c4:	e7c9      	b.n	800475a <xTaskIncrementTick.part.0+0xc2>
 80047c6:	bf00      	nop
 80047c8:	2000092c 	.word	0x2000092c
 80047cc:	200008e0 	.word	0x200008e0
 80047d0:	20000810 	.word	0x20000810
 80047d4:	200008b4 	.word	0x200008b4
 80047d8:	20000930 	.word	0x20000930
 80047dc:	20000814 	.word	0x20000814
 80047e0:	200008e4 	.word	0x200008e4
 80047e4:	20000818 	.word	0x20000818
 80047e8:	2000080c 	.word	0x2000080c

080047ec <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 80047ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
 80047f0:	4c45      	ldr	r4, [pc, #276]	; (8004908 <xTaskResumeAll.part.0+0x11c>)
BaseType_t xTaskResumeAll( void )
 80047f2:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 80047f4:	f000 fcbe 	bl	8005174 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80047f8:	6823      	ldr	r3, [r4, #0]
 80047fa:	3b01      	subs	r3, #1
 80047fc:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047fe:	6823      	ldr	r3, [r4, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d167      	bne.n	80048d4 <xTaskResumeAll.part.0+0xe8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004804:	4b41      	ldr	r3, [pc, #260]	; (800490c <xTaskResumeAll.part.0+0x120>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d063      	beq.n	80048d4 <xTaskResumeAll.part.0+0xe8>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800480c:	f8df b118 	ldr.w	fp, [pc, #280]	; 8004928 <xTaskResumeAll.part.0+0x13c>
 8004810:	f8db 3000 	ldr.w	r3, [fp]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d073      	beq.n	8004900 <xTaskResumeAll.part.0+0x114>
 8004818:	4b3d      	ldr	r3, [pc, #244]	; (8004910 <xTaskResumeAll.part.0+0x124>)
 800481a:	4d3e      	ldr	r5, [pc, #248]	; (8004914 <xTaskResumeAll.part.0+0x128>)
 800481c:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800492c <xTaskResumeAll.part.0+0x140>
 8004820:	4f3d      	ldr	r7, [pc, #244]	; (8004918 <xTaskResumeAll.part.0+0x12c>)
 8004822:	9301      	str	r3, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8004824:	2601      	movs	r6, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004826:	f8db 300c 	ldr.w	r3, [fp, #12]
 800482a:	f8d3 a00c 	ldr.w	sl, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800482e:	f10a 0904 	add.w	r9, sl, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004832:	f10a 0018 	add.w	r0, sl, #24
 8004836:	f7ff fdfd 	bl	8004434 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800483a:	4648      	mov	r0, r9
 800483c:	f7ff fdfa 	bl	8004434 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004840:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 8004844:	682a      	ldr	r2, [r5, #0]
 8004846:	fa06 f300 	lsl.w	r3, r6, r0
 800484a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800484e:	4313      	orrs	r3, r2
 8004850:	4649      	mov	r1, r9
 8004852:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8004856:	602b      	str	r3, [r5, #0]
 8004858:	f7ff fdc4 	bl	80043e4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 8004862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004864:	429a      	cmp	r2, r3
 8004866:	d33d      	bcc.n	80048e4 <xTaskResumeAll.part.0+0xf8>
						xYieldPending = pdTRUE;
 8004868:	9b01      	ldr	r3, [sp, #4]
 800486a:	601e      	str	r6, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800486c:	f8db 3000 	ldr.w	r3, [fp]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1d8      	bne.n	8004826 <xTaskResumeAll.part.0+0x3a>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004874:	4b29      	ldr	r3, [pc, #164]	; (800491c <xTaskResumeAll.part.0+0x130>)
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	6812      	ldr	r2, [r2, #0]
 800487a:	2a00      	cmp	r2, #0
 800487c:	d03b      	beq.n	80048f6 <xTaskResumeAll.part.0+0x10a>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800487e:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004880:	4b27      	ldr	r3, [pc, #156]	; (8004920 <xTaskResumeAll.part.0+0x134>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004882:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004884:	68d2      	ldr	r2, [r2, #12]
 8004886:	6852      	ldr	r2, [r2, #4]
 8004888:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800488a:	4e26      	ldr	r6, [pc, #152]	; (8004924 <xTaskResumeAll.part.0+0x138>)
 800488c:	6835      	ldr	r5, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800488e:	b195      	cbz	r5, 80048b6 <xTaskResumeAll.part.0+0xca>
								xYieldPending = pdTRUE;
 8004890:	2701      	movs	r7, #1
 8004892:	e006      	b.n	80048a2 <xTaskResumeAll.part.0+0xb6>
 8004894:	f7ff ff00 	bl	8004698 <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
 8004898:	b108      	cbz	r0, 800489e <xTaskResumeAll.part.0+0xb2>
								xYieldPending = pdTRUE;
 800489a:	9b01      	ldr	r3, [sp, #4]
 800489c:	601f      	str	r7, [r3, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800489e:	3d01      	subs	r5, #1
 80048a0:	d008      	beq.n	80048b4 <xTaskResumeAll.part.0+0xc8>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0f5      	beq.n	8004894 <xTaskResumeAll.part.0+0xa8>
		++xPendedTicks;
 80048a8:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80048aa:	3d01      	subs	r5, #1
		++xPendedTicks;
 80048ac:	f103 0301 	add.w	r3, r3, #1
 80048b0:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80048b2:	d1f6      	bne.n	80048a2 <xTaskResumeAll.part.0+0xb6>
						xPendedTicks = 0;
 80048b4:	6035      	str	r5, [r6, #0]
				if( xYieldPending != pdFALSE )
 80048b6:	9b01      	ldr	r3, [sp, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	b15b      	cbz	r3, 80048d4 <xTaskResumeAll.part.0+0xe8>
					taskYIELD_IF_USING_PREEMPTION();
 80048bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80048c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80048d0:	2001      	movs	r0, #1
 80048d2:	e000      	b.n	80048d6 <xTaskResumeAll.part.0+0xea>
BaseType_t xAlreadyYielded = pdFALSE;
 80048d4:	2000      	movs	r0, #0
 80048d6:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 80048d8:	f000 fc6e 	bl	80051b8 <vPortExitCritical>
}
 80048dc:	9801      	ldr	r0, [sp, #4]
 80048de:	b003      	add	sp, #12
 80048e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048e4:	f8db 3000 	ldr.w	r3, [fp]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d19c      	bne.n	8004826 <xTaskResumeAll.part.0+0x3a>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048ec:	4b0b      	ldr	r3, [pc, #44]	; (800491c <xTaskResumeAll.part.0+0x130>)
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	6812      	ldr	r2, [r2, #0]
 80048f2:	2a00      	cmp	r2, #0
 80048f4:	d1c3      	bne.n	800487e <xTaskResumeAll.part.0+0x92>
		xNextTaskUnblockTime = portMAX_DELAY;
 80048f6:	4b0a      	ldr	r3, [pc, #40]	; (8004920 <xTaskResumeAll.part.0+0x134>)
 80048f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	e7c4      	b.n	800488a <xTaskResumeAll.part.0+0x9e>
 8004900:	4b03      	ldr	r3, [pc, #12]	; (8004910 <xTaskResumeAll.part.0+0x124>)
 8004902:	9301      	str	r3, [sp, #4]
 8004904:	e7c1      	b.n	800488a <xTaskResumeAll.part.0+0x9e>
 8004906:	bf00      	nop
 8004908:	200008ac 	.word	0x200008ac
 800490c:	200008a4 	.word	0x200008a4
 8004910:	20000930 	.word	0x20000930
 8004914:	200008b4 	.word	0x200008b4
 8004918:	2000080c 	.word	0x2000080c
 800491c:	20000810 	.word	0x20000810
 8004920:	200008e0 	.word	0x200008e0
 8004924:	200008e8 	.word	0x200008e8
 8004928:	200008ec 	.word	0x200008ec
 800492c:	20000818 	.word	0x20000818

08004930 <xTaskCreateStatic>:
	{
 8004930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004934:	b084      	sub	sp, #16
 8004936:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800493a:	b1c5      	cbz	r5, 800496e <xTaskCreateStatic+0x3e>
		configASSERT( pxTaskBuffer != NULL );
 800493c:	b174      	cbz	r4, 800495c <xTaskCreateStatic+0x2c>
 800493e:	4606      	mov	r6, r0
			volatile size_t xSize = sizeof( StaticTask_t );
 8004940:	20a0      	movs	r0, #160	; 0xa0
 8004942:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004944:	9803      	ldr	r0, [sp, #12]
 8004946:	28a0      	cmp	r0, #160	; 0xa0
 8004948:	d01a      	beq.n	8004980 <xTaskCreateStatic+0x50>
 800494a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494e:	f383 8811 	msr	BASEPRI, r3
 8004952:	f3bf 8f6f 	isb	sy
 8004956:	f3bf 8f4f 	dsb	sy
 800495a:	e7fe      	b.n	800495a <xTaskCreateStatic+0x2a>
 800495c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004960:	f383 8811 	msr	BASEPRI, r3
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800496c:	e7fe      	b.n	800496c <xTaskCreateStatic+0x3c>
 800496e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004972:	f383 8811 	msr	BASEPRI, r3
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800497e:	e7fe      	b.n	800497e <xTaskCreateStatic+0x4e>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004980:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004984:	3a01      	subs	r2, #1
 8004986:	eb05 0282 	add.w	r2, r5, r2, lsl #2
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800498a:	6325      	str	r5, [r4, #48]	; 0x30
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800498c:	f022 0507 	bic.w	r5, r2, #7
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004990:	2202      	movs	r2, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004992:	9803      	ldr	r0, [sp, #12]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004994:	f884 209d 	strb.w	r2, [r4, #157]	; 0x9d
	if( pcName != NULL )
 8004998:	2900      	cmp	r1, #0
 800499a:	d078      	beq.n	8004a8e <xTaskCreateStatic+0x15e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800499c:	780a      	ldrb	r2, [r1, #0]
 800499e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 80049a2:	2a00      	cmp	r2, #0
 80049a4:	d03b      	beq.n	8004a1e <xTaskCreateStatic+0xee>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80049a6:	784a      	ldrb	r2, [r1, #1]
 80049a8:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
 80049ac:	2a00      	cmp	r2, #0
 80049ae:	d036      	beq.n	8004a1e <xTaskCreateStatic+0xee>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80049b0:	788a      	ldrb	r2, [r1, #2]
 80049b2:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
 80049b6:	b392      	cbz	r2, 8004a1e <xTaskCreateStatic+0xee>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80049b8:	78ca      	ldrb	r2, [r1, #3]
 80049ba:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
 80049be:	b372      	cbz	r2, 8004a1e <xTaskCreateStatic+0xee>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80049c0:	790a      	ldrb	r2, [r1, #4]
 80049c2:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
 80049c6:	b352      	cbz	r2, 8004a1e <xTaskCreateStatic+0xee>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80049c8:	794a      	ldrb	r2, [r1, #5]
 80049ca:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
 80049ce:	b332      	cbz	r2, 8004a1e <xTaskCreateStatic+0xee>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80049d0:	798a      	ldrb	r2, [r1, #6]
 80049d2:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
 80049d6:	b312      	cbz	r2, 8004a1e <xTaskCreateStatic+0xee>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80049d8:	79ca      	ldrb	r2, [r1, #7]
 80049da:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
 80049de:	b1f2      	cbz	r2, 8004a1e <xTaskCreateStatic+0xee>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80049e0:	7a0a      	ldrb	r2, [r1, #8]
 80049e2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
 80049e6:	b1d2      	cbz	r2, 8004a1e <xTaskCreateStatic+0xee>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80049e8:	7a4a      	ldrb	r2, [r1, #9]
 80049ea:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
 80049ee:	b1b2      	cbz	r2, 8004a1e <xTaskCreateStatic+0xee>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80049f0:	7a8a      	ldrb	r2, [r1, #10]
 80049f2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
 80049f6:	b192      	cbz	r2, 8004a1e <xTaskCreateStatic+0xee>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80049f8:	7aca      	ldrb	r2, [r1, #11]
 80049fa:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
 80049fe:	b172      	cbz	r2, 8004a1e <xTaskCreateStatic+0xee>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a00:	7b0a      	ldrb	r2, [r1, #12]
 8004a02:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
 8004a06:	b152      	cbz	r2, 8004a1e <xTaskCreateStatic+0xee>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a08:	7b4a      	ldrb	r2, [r1, #13]
 8004a0a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
 8004a0e:	b132      	cbz	r2, 8004a1e <xTaskCreateStatic+0xee>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a10:	7b8a      	ldrb	r2, [r1, #14]
 8004a12:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
 8004a16:	b112      	cbz	r2, 8004a1e <xTaskCreateStatic+0xee>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a18:	7bca      	ldrb	r2, [r1, #15]
 8004a1a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a24:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8004a26:	9301      	str	r3, [sp, #4]
 8004a28:	2f06      	cmp	r7, #6
 8004a2a:	bf28      	it	cs
 8004a2c:	2706      	movcs	r7, #6
		pxNewTCB->uxMutexesHeld = 0;
 8004a2e:	f04f 0800 	mov.w	r8, #0
	pxNewTCB->uxPriority = uxPriority;
 8004a32:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004a34:	6467      	str	r7, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a36:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8004a38:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a3c:	f7ff fcce 	bl	80043dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a40:	f104 0018 	add.w	r0, r4, #24
 8004a44:	f7ff fcca 	bl	80043dc <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a48:	f1c7 0707 	rsb	r7, r7, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004a4c:	224c      	movs	r2, #76	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a4e:	61a7      	str	r7, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 8004a50:	f8c4 8098 	str.w	r8, [r4, #152]	; 0x98
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004a54:	4641      	mov	r1, r8
 8004a56:	18a0      	adds	r0, r4, r2
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a58:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a5a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004a5c:	f884 809c 	strb.w	r8, [r4, #156]	; 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004a60:	f002 faff 	bl	8007062 <memset>
 8004a64:	4f0b      	ldr	r7, [pc, #44]	; (8004a94 <xTaskCreateStatic+0x164>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a66:	9b01      	ldr	r3, [sp, #4]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004a68:	6527      	str	r7, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a6a:	461a      	mov	r2, r3
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004a6c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004a70:	37d0      	adds	r7, #208	; 0xd0
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a72:	4631      	mov	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004a74:	6563      	str	r3, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a76:	4628      	mov	r0, r5
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004a78:	65a7      	str	r7, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a7a:	f000 fb53 	bl	8005124 <pxPortInitialiseStack>
 8004a7e:	6020      	str	r0, [r4, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a80:	4620      	mov	r0, r4
 8004a82:	f7ff fceb 	bl	800445c <prvAddNewTaskToReadyList>
	}
 8004a86:	4620      	mov	r0, r4
 8004a88:	b004      	add	sp, #16
 8004a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004a8e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8004a92:	e7c7      	b.n	8004a24 <xTaskCreateStatic+0xf4>
 8004a94:	2000455c 	.word	0x2000455c

08004a98 <xTaskCreate>:
	{
 8004a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004a9c:	ea4f 0982 	mov.w	r9, r2, lsl #2
	{
 8004aa0:	4607      	mov	r7, r0
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004aa2:	4648      	mov	r0, r9
	{
 8004aa4:	460d      	mov	r5, r1
 8004aa6:	4698      	mov	r8, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004aa8:	f000 fcc6 	bl	8005438 <pvPortMalloc>
			if( pxStack != NULL )
 8004aac:	2800      	cmp	r0, #0
 8004aae:	f000 808c 	beq.w	8004bca <xTaskCreate+0x132>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004ab2:	4682      	mov	sl, r0
 8004ab4:	20a0      	movs	r0, #160	; 0xa0
 8004ab6:	f000 fcbf 	bl	8005438 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8004aba:	4604      	mov	r4, r0
 8004abc:	2800      	cmp	r0, #0
 8004abe:	f000 8088 	beq.w	8004bd2 <xTaskCreate+0x13a>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ac2:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 8004ac4:	f8c0 a030 	str.w	sl, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ac8:	f880 309d 	strb.w	r3, [r0, #157]	; 0x9d
	if( pcName != NULL )
 8004acc:	2d00      	cmp	r5, #0
 8004ace:	f000 8086 	beq.w	8004bde <xTaskCreate+0x146>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ad2:	782b      	ldrb	r3, [r5, #0]
 8004ad4:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d03b      	beq.n	8004b54 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004adc:	786b      	ldrb	r3, [r5, #1]
 8004ade:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d036      	beq.n	8004b54 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ae6:	78ab      	ldrb	r3, [r5, #2]
 8004ae8:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
 8004aec:	b393      	cbz	r3, 8004b54 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004aee:	78eb      	ldrb	r3, [r5, #3]
 8004af0:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
 8004af4:	b373      	cbz	r3, 8004b54 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004af6:	792b      	ldrb	r3, [r5, #4]
 8004af8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
 8004afc:	b353      	cbz	r3, 8004b54 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004afe:	796b      	ldrb	r3, [r5, #5]
 8004b00:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
 8004b04:	b333      	cbz	r3, 8004b54 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b06:	79ab      	ldrb	r3, [r5, #6]
 8004b08:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
 8004b0c:	b313      	cbz	r3, 8004b54 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b0e:	79eb      	ldrb	r3, [r5, #7]
 8004b10:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
 8004b14:	b1f3      	cbz	r3, 8004b54 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b16:	7a2b      	ldrb	r3, [r5, #8]
 8004b18:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
 8004b1c:	b1d3      	cbz	r3, 8004b54 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b1e:	7a6b      	ldrb	r3, [r5, #9]
 8004b20:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
 8004b24:	b1b3      	cbz	r3, 8004b54 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b26:	7aab      	ldrb	r3, [r5, #10]
 8004b28:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
 8004b2c:	b193      	cbz	r3, 8004b54 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b2e:	7aeb      	ldrb	r3, [r5, #11]
 8004b30:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
 8004b34:	b173      	cbz	r3, 8004b54 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b36:	7b2b      	ldrb	r3, [r5, #12]
 8004b38:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
 8004b3c:	b153      	cbz	r3, 8004b54 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b3e:	7b6b      	ldrb	r3, [r5, #13]
 8004b40:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
 8004b44:	b133      	cbz	r3, 8004b54 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b46:	7bab      	ldrb	r3, [r5, #14]
 8004b48:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
 8004b4c:	b113      	cbz	r3, 8004b54 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b4e:	7beb      	ldrb	r3, [r5, #15]
 8004b50:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b54:	2300      	movs	r3, #0
 8004b56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b5a:	9e08      	ldr	r6, [sp, #32]
 8004b5c:	2e06      	cmp	r6, #6
 8004b5e:	bf28      	it	cs
 8004b60:	2606      	movcs	r6, #6
		pxNewTCB->uxMutexesHeld = 0;
 8004b62:	2500      	movs	r5, #0
 8004b64:	64a5      	str	r5, [r4, #72]	; 0x48
	pxNewTCB->uxPriority = uxPriority;
 8004b66:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004b68:	6466      	str	r6, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b6a:	1d20      	adds	r0, r4, #4
 8004b6c:	f7ff fc36 	bl	80043dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b70:	f104 0018 	add.w	r0, r4, #24
 8004b74:	f7ff fc32 	bl	80043dc <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b78:	f1c6 0607 	rsb	r6, r6, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004b7c:	224c      	movs	r2, #76	; 0x4c
		pxNewTCB->ulNotifiedValue = 0;
 8004b7e:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004b82:	4629      	mov	r1, r5
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b84:	f884 509c 	strb.w	r5, [r4, #156]	; 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004b88:	18a0      	adds	r0, r4, r2
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b8a:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b8c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b8e:	6264      	str	r4, [r4, #36]	; 0x24
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004b90:	f002 fa67 	bl	8007062 <memset>
 8004b94:	4b13      	ldr	r3, [pc, #76]	; (8004be4 <xTaskCreate+0x14c>)
 8004b96:	6523      	str	r3, [r4, #80]	; 0x50
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b98:	f1a9 0204 	sub.w	r2, r9, #4
 8004b9c:	eb0a 0002 	add.w	r0, sl, r2
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004ba0:	f103 0568 	add.w	r5, r3, #104	; 0x68
 8004ba4:	33d0      	adds	r3, #208	; 0xd0
 8004ba6:	65a3      	str	r3, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004ba8:	4642      	mov	r2, r8
 8004baa:	4639      	mov	r1, r7
 8004bac:	f020 0007 	bic.w	r0, r0, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004bb0:	6565      	str	r5, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004bb2:	f000 fab7 	bl	8005124 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 8004bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004bb8:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8004bba:	b103      	cbz	r3, 8004bbe <xTaskCreate+0x126>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004bbc:	601c      	str	r4, [r3, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	f7ff fc4c 	bl	800445c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004bc4:	2001      	movs	r0, #1
	}
 8004bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004bca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
 8004bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					vPortFree( pxStack );
 8004bd2:	4650      	mov	r0, sl
 8004bd4:	f000 fcec 	bl	80055b0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004bd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bdc:	e7f3      	b.n	8004bc6 <xTaskCreate+0x12e>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004bde:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
 8004be2:	e7ba      	b.n	8004b5a <xTaskCreate+0xc2>
 8004be4:	2000455c 	.word	0x2000455c

08004be8 <vTaskDelay>:
	{
 8004be8:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004bea:	b950      	cbnz	r0, 8004c02 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8004bec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004bf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bf4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	f3bf 8f6f 	isb	sy
	}
 8004c00:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8004c02:	4c10      	ldr	r4, [pc, #64]	; (8004c44 <vTaskDelay+0x5c>)
 8004c04:	6821      	ldr	r1, [r4, #0]
 8004c06:	b141      	cbz	r1, 8004c1a <vTaskDelay+0x32>
 8004c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0c:	f383 8811 	msr	BASEPRI, r3
 8004c10:	f3bf 8f6f 	isb	sy
 8004c14:	f3bf 8f4f 	dsb	sy
 8004c18:	e7fe      	b.n	8004c18 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 8004c1a:	6823      	ldr	r3, [r4, #0]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004c20:	f7ff fca4 	bl	800456c <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 8004c24:	6823      	ldr	r3, [r4, #0]
 8004c26:	b943      	cbnz	r3, 8004c3a <vTaskDelay+0x52>
 8004c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2c:	f383 8811 	msr	BASEPRI, r3
 8004c30:	f3bf 8f6f 	isb	sy
 8004c34:	f3bf 8f4f 	dsb	sy
 8004c38:	e7fe      	b.n	8004c38 <vTaskDelay+0x50>
 8004c3a:	f7ff fdd7 	bl	80047ec <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8004c3e:	2800      	cmp	r0, #0
 8004c40:	d0d4      	beq.n	8004bec <vTaskDelay+0x4>
	}
 8004c42:	bd10      	pop	{r4, pc}
 8004c44:	200008ac 	.word	0x200008ac

08004c48 <vTaskResume>:
		configASSERT( xTaskToResume );
 8004c48:	b198      	cbz	r0, 8004c72 <vTaskResume+0x2a>
	{
 8004c4a:	b5f0      	push	{r4, r5, r6, r7, lr}
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8004c4c:	4d22      	ldr	r5, [pc, #136]	; (8004cd8 <vTaskResume+0x90>)
 8004c4e:	682b      	ldr	r3, [r5, #0]
 8004c50:	4283      	cmp	r3, r0
	{
 8004c52:	b083      	sub	sp, #12
 8004c54:	4604      	mov	r4, r0
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8004c56:	d00a      	beq.n	8004c6e <vTaskResume+0x26>
			taskENTER_CRITICAL();
 8004c58:	f000 fa8c 	bl	8005174 <vPortEnterCritical>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004c5c:	4b1f      	ldr	r3, [pc, #124]	; (8004cdc <vTaskResume+0x94>)
 8004c5e:	6962      	ldr	r2, [r4, #20]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d00f      	beq.n	8004c84 <vTaskResume+0x3c>
	}
 8004c64:	b003      	add	sp, #12
 8004c66:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			taskEXIT_CRITICAL();
 8004c6a:	f000 baa5 	b.w	80051b8 <vPortExitCritical>
	}
 8004c6e:	b003      	add	sp, #12
 8004c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c76:	f383 8811 	msr	BASEPRI, r3
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToResume );
 8004c82:	e7fe      	b.n	8004c82 <vTaskResume+0x3a>
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8004c84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004c86:	4a16      	ldr	r2, [pc, #88]	; (8004ce0 <vTaskResume+0x98>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d0eb      	beq.n	8004c64 <vTaskResume+0x1c>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1e9      	bne.n	8004c64 <vTaskResume+0x1c>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8004c90:	1d21      	adds	r1, r4, #4
 8004c92:	4608      	mov	r0, r1
 8004c94:	9101      	str	r1, [sp, #4]
 8004c96:	f7ff fbcd 	bl	8004434 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c9a:	4812      	ldr	r0, [pc, #72]	; (8004ce4 <vTaskResume+0x9c>)
 8004c9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004c9e:	6807      	ldr	r7, [r0, #0]
 8004ca0:	4e11      	ldr	r6, [pc, #68]	; (8004ce8 <vTaskResume+0xa0>)
 8004ca2:	9901      	ldr	r1, [sp, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	409a      	lsls	r2, r3
 8004ca8:	433a      	orrs	r2, r7
 8004caa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004cae:	6002      	str	r2, [r0, #0]
 8004cb0:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 8004cb4:	f7ff fb96 	bl	80043e4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004cb8:	682b      	ldr	r3, [r5, #0]
 8004cba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d3d0      	bcc.n	8004c64 <vTaskResume+0x1c>
						taskYIELD_IF_USING_PREEMPTION();
 8004cc2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cca:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	e7c5      	b.n	8004c64 <vTaskResume+0x1c>
 8004cd8:	2000080c 	.word	0x2000080c
 8004cdc:	20000904 	.word	0x20000904
 8004ce0:	200008ec 	.word	0x200008ec
 8004ce4:	200008b4 	.word	0x200008b4
 8004ce8:	20000818 	.word	0x20000818

08004cec <xTaskResumeFromISR>:
		configASSERT( xTaskToResume );
 8004cec:	b1c0      	cbz	r0, 8004d20 <xTaskResumeFromISR+0x34>
	{
 8004cee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	4604      	mov	r4, r0
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004cf4:	f000 fb72 	bl	80053dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004cf8:	f3ef 8611 	mrs	r6, BASEPRI
 8004cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d00:	f383 8811 	msr	BASEPRI, r3
 8004d04:	f3bf 8f6f 	isb	sy
 8004d08:	f3bf 8f4f 	dsb	sy
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004d0c:	4b20      	ldr	r3, [pc, #128]	; (8004d90 <xTaskResumeFromISR+0xa4>)
 8004d0e:	6962      	ldr	r2, [r4, #20]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d00e      	beq.n	8004d32 <xTaskResumeFromISR+0x46>
	BaseType_t xYieldRequired = pdFALSE;
 8004d14:	2500      	movs	r5, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d16:	f386 8811 	msr	BASEPRI, r6
	}
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	b003      	add	sp, #12
 8004d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__asm volatile
 8004d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d24:	f383 8811 	msr	BASEPRI, r3
 8004d28:	f3bf 8f6f 	isb	sy
 8004d2c:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToResume );
 8004d30:	e7fe      	b.n	8004d30 <xTaskResumeFromISR+0x44>
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8004d32:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8004d34:	4817      	ldr	r0, [pc, #92]	; (8004d94 <xTaskResumeFromISR+0xa8>)
 8004d36:	4285      	cmp	r5, r0
 8004d38:	d0ec      	beq.n	8004d14 <xTaskResumeFromISR+0x28>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8004d3a:	2d00      	cmp	r5, #0
 8004d3c:	d1ea      	bne.n	8004d14 <xTaskResumeFromISR+0x28>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d3e:	4b16      	ldr	r3, [pc, #88]	; (8004d98 <xTaskResumeFromISR+0xac>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	bb03      	cbnz	r3, 8004d86 <xTaskResumeFromISR+0x9a>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d44:	4b15      	ldr	r3, [pc, #84]	; (8004d9c <xTaskResumeFromISR+0xb0>)
 8004d46:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d4c:	1d21      	adds	r1, r4, #4
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d4e:	429d      	cmp	r5, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d50:	4608      	mov	r0, r1
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d52:	bf34      	ite	cc
 8004d54:	2500      	movcc	r5, #0
 8004d56:	2501      	movcs	r5, #1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d58:	9101      	str	r1, [sp, #4]
 8004d5a:	f7ff fb6b 	bl	8004434 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d5e:	4810      	ldr	r0, [pc, #64]	; (8004da0 <xTaskResumeFromISR+0xb4>)
 8004d60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004d62:	6807      	ldr	r7, [r0, #0]
 8004d64:	4c0f      	ldr	r4, [pc, #60]	; (8004da4 <xTaskResumeFromISR+0xb8>)
 8004d66:	9901      	ldr	r1, [sp, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	409a      	lsls	r2, r3
 8004d6c:	433a      	orrs	r2, r7
 8004d6e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004d72:	6002      	str	r2, [r0, #0]
 8004d74:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 8004d78:	f7ff fb34 	bl	80043e4 <vListInsertEnd>
	__asm volatile
 8004d7c:	f386 8811 	msr	BASEPRI, r6
	}
 8004d80:	4628      	mov	r0, r5
 8004d82:	b003      	add	sp, #12
 8004d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004d86:	f104 0118 	add.w	r1, r4, #24
 8004d8a:	f7ff fb2b 	bl	80043e4 <vListInsertEnd>
 8004d8e:	e7c2      	b.n	8004d16 <xTaskResumeFromISR+0x2a>
 8004d90:	20000904 	.word	0x20000904
 8004d94:	200008ec 	.word	0x200008ec
 8004d98:	200008ac 	.word	0x200008ac
 8004d9c:	2000080c 	.word	0x2000080c
 8004da0:	200008b4 	.word	0x200008b4
 8004da4:	20000818 	.word	0x20000818

08004da8 <vTaskStartScheduler>:
{
 8004da8:	b570      	push	{r4, r5, r6, lr}
 8004daa:	b084      	sub	sp, #16
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004dac:	aa02      	add	r2, sp, #8
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004dae:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004db0:	a901      	add	r1, sp, #4
 8004db2:	4668      	mov	r0, sp
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004db4:	e9cd 4400 	strd	r4, r4, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004db8:	f7fc f91a 	bl	8000ff0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004dbc:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8004dc0:	9d00      	ldr	r5, [sp, #0]
		configASSERT( puxStackBuffer != NULL );
 8004dc2:	b1bb      	cbz	r3, 8004df4 <vTaskStartScheduler+0x4c>
		configASSERT( pxTaskBuffer != NULL );
 8004dc4:	b16d      	cbz	r5, 8004de2 <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8004dc6:	21a0      	movs	r1, #160	; 0xa0
 8004dc8:	9103      	str	r1, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004dca:	9903      	ldr	r1, [sp, #12]
 8004dcc:	29a0      	cmp	r1, #160	; 0xa0
 8004dce:	d01a      	beq.n	8004e06 <vTaskStartScheduler+0x5e>
	__asm volatile
 8004dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd4:	f383 8811 	msr	BASEPRI, r3
 8004dd8:	f3bf 8f6f 	isb	sy
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	e7fe      	b.n	8004de0 <vTaskStartScheduler+0x38>
 8004de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de6:	f383 8811 	msr	BASEPRI, r3
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8004df2:	e7fe      	b.n	8004df2 <vTaskStartScheduler+0x4a>
 8004df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df8:	f383 8811 	msr	BASEPRI, r3
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8004e04:	e7fe      	b.n	8004e04 <vTaskStartScheduler+0x5c>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004e06:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004e0a:	3a01      	subs	r2, #1
 8004e0c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e10:	2102      	movs	r1, #2
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e12:	632b      	str	r3, [r5, #48]	; 0x30
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e14:	4b26      	ldr	r3, [pc, #152]	; (8004eb0 <vTaskStartScheduler+0x108>)
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e16:	f885 109d 	strb.w	r1, [r5, #157]	; 0x9d
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e1a:	1d28      	adds	r0, r5, #4
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e1c:	636b      	str	r3, [r5, #52]	; 0x34
		pxNewTCB->uxMutexesHeld = 0;
 8004e1e:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e22:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e26:	f885 4043 	strb.w	r4, [r5, #67]	; 0x43
	pxNewTCB->uxPriority = uxPriority;
 8004e2a:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004e2c:	f022 0607 	bic.w	r6, r2, #7
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004e30:	9b03      	ldr	r3, [sp, #12]
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e32:	f7ff fad3 	bl	80043dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e36:	f105 0018 	add.w	r0, r5, #24
 8004e3a:	f7ff facf 	bl	80043dc <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e3e:	2307      	movs	r3, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004e40:	224c      	movs	r2, #76	; 0x4c
		pxNewTCB->ulNotifiedValue = 0;
 8004e42:	f8c5 4098 	str.w	r4, [r5, #152]	; 0x98
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004e46:	4621      	mov	r1, r4
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e48:	61ab      	str	r3, [r5, #24]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004e4a:	18a8      	adds	r0, r5, r2
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e4c:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e4e:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e50:	f885 409c 	strb.w	r4, [r5, #156]	; 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004e54:	f002 f905 	bl	8007062 <memset>
 8004e58:	4b16      	ldr	r3, [pc, #88]	; (8004eb4 <vTaskStartScheduler+0x10c>)
 8004e5a:	652b      	str	r3, [r5, #80]	; 0x50
 8004e5c:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004e60:	33d0      	adds	r3, #208	; 0xd0
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e62:	4915      	ldr	r1, [pc, #84]	; (8004eb8 <vTaskStartScheduler+0x110>)
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004e64:	656a      	str	r2, [r5, #84]	; 0x54
 8004e66:	65ab      	str	r3, [r5, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e68:	4622      	mov	r2, r4
 8004e6a:	4630      	mov	r0, r6
 8004e6c:	f000 f95a 	bl	8005124 <pxPortInitialiseStack>
 8004e70:	6028      	str	r0, [r5, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e72:	4628      	mov	r0, r5
 8004e74:	f7ff faf2 	bl	800445c <prvAddNewTaskToReadyList>
 8004e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7c:	f383 8811 	msr	BASEPRI, r3
 8004e80:	f3bf 8f6f 	isb	sy
 8004e84:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e88:	4a0c      	ldr	r2, [pc, #48]	; (8004ebc <vTaskStartScheduler+0x114>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e8a:	4b0d      	ldr	r3, [pc, #52]	; (8004ec0 <vTaskStartScheduler+0x118>)
 8004e8c:	490d      	ldr	r1, [pc, #52]	; (8004ec4 <vTaskStartScheduler+0x11c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e94:	6010      	str	r0, [r2, #0]
		xSchedulerRunning = pdTRUE;
 8004e96:	4a0c      	ldr	r2, [pc, #48]	; (8004ec8 <vTaskStartScheduler+0x120>)
 8004e98:	2001      	movs	r0, #1
 8004e9a:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e9c:	4a0b      	ldr	r2, [pc, #44]	; (8004ecc <vTaskStartScheduler+0x124>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e9e:	334c      	adds	r3, #76	; 0x4c
 8004ea0:	600b      	str	r3, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004ea2:	6014      	str	r4, [r2, #0]
}
 8004ea4:	b004      	add	sp, #16
 8004ea6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
 8004eaa:	f000 b9f5 	b.w	8005298 <xPortStartScheduler>
 8004eae:	bf00      	nop
 8004eb0:	454c4449 	.word	0x454c4449
 8004eb4:	2000455c 	.word	0x2000455c
 8004eb8:	080045f9 	.word	0x080045f9
 8004ebc:	200008e0 	.word	0x200008e0
 8004ec0:	2000080c 	.word	0x2000080c
 8004ec4:	20000088 	.word	0x20000088
 8004ec8:	20000900 	.word	0x20000900
 8004ecc:	2000092c 	.word	0x2000092c

08004ed0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004ed0:	4a02      	ldr	r2, [pc, #8]	; (8004edc <vTaskSuspendAll+0xc>)
 8004ed2:	6813      	ldr	r3, [r2, #0]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	6013      	str	r3, [r2, #0]
}
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	200008ac 	.word	0x200008ac

08004ee0 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8004ee0:	4b06      	ldr	r3, [pc, #24]	; (8004efc <xTaskResumeAll+0x1c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	b943      	cbnz	r3, 8004ef8 <xTaskResumeAll+0x18>
 8004ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eea:	f383 8811 	msr	BASEPRI, r3
 8004eee:	f3bf 8f6f 	isb	sy
 8004ef2:	f3bf 8f4f 	dsb	sy
 8004ef6:	e7fe      	b.n	8004ef6 <xTaskResumeAll+0x16>
 8004ef8:	f7ff bc78 	b.w	80047ec <xTaskResumeAll.part.0>
 8004efc:	200008ac 	.word	0x200008ac

08004f00 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f00:	4b05      	ldr	r3, [pc, #20]	; (8004f18 <xTaskIncrementTick+0x18>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	b90b      	cbnz	r3, 8004f0a <xTaskIncrementTick+0xa>
 8004f06:	f7ff bbc7 	b.w	8004698 <xTaskIncrementTick.part.0>
		++xPendedTicks;
 8004f0a:	4a04      	ldr	r2, [pc, #16]	; (8004f1c <xTaskIncrementTick+0x1c>)
 8004f0c:	6813      	ldr	r3, [r2, #0]
 8004f0e:	3301      	adds	r3, #1
}
 8004f10:	2000      	movs	r0, #0
		++xPendedTicks;
 8004f12:	6013      	str	r3, [r2, #0]
}
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	200008ac 	.word	0x200008ac
 8004f1c:	200008e8 	.word	0x200008e8

08004f20 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f20:	4b18      	ldr	r3, [pc, #96]	; (8004f84 <vTaskSwitchContext+0x64>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	b11b      	cbz	r3, 8004f2e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8004f26:	4b18      	ldr	r3, [pc, #96]	; (8004f88 <vTaskSwitchContext+0x68>)
 8004f28:	2201      	movs	r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8004f2e:	4916      	ldr	r1, [pc, #88]	; (8004f88 <vTaskSwitchContext+0x68>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f30:	4a16      	ldr	r2, [pc, #88]	; (8004f8c <vTaskSwitchContext+0x6c>)
		xYieldPending = pdFALSE;
 8004f32:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f34:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004f36:	fab3 f383 	clz	r3, r3
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	f1c3 031f 	rsb	r3, r3, #31
 8004f40:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004f44:	4a12      	ldr	r2, [pc, #72]	; (8004f90 <vTaskSwitchContext+0x70>)
 8004f46:	0099      	lsls	r1, r3, #2
 8004f48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004f4c:	5850      	ldr	r0, [r2, r1]
 8004f4e:	b940      	cbnz	r0, 8004f62 <vTaskSwitchContext+0x42>
	__asm volatile
 8004f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	e7fe      	b.n	8004f60 <vTaskSwitchContext+0x40>
 8004f62:	6858      	ldr	r0, [r3, #4]
 8004f64:	3108      	adds	r1, #8
 8004f66:	6840      	ldr	r0, [r0, #4]
 8004f68:	6058      	str	r0, [r3, #4]
 8004f6a:	440a      	add	r2, r1
 8004f6c:	4290      	cmp	r0, r2
 8004f6e:	bf04      	itt	eq
 8004f70:	6840      	ldreq	r0, [r0, #4]
 8004f72:	6058      	streq	r0, [r3, #4]
 8004f74:	4b07      	ldr	r3, [pc, #28]	; (8004f94 <vTaskSwitchContext+0x74>)
 8004f76:	68c2      	ldr	r2, [r0, #12]
 8004f78:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a06      	ldr	r2, [pc, #24]	; (8004f98 <vTaskSwitchContext+0x78>)
 8004f7e:	334c      	adds	r3, #76	; 0x4c
 8004f80:	6013      	str	r3, [r2, #0]
}
 8004f82:	4770      	bx	lr
 8004f84:	200008ac 	.word	0x200008ac
 8004f88:	20000930 	.word	0x20000930
 8004f8c:	200008b4 	.word	0x200008b4
 8004f90:	20000818 	.word	0x20000818
 8004f94:	2000080c 	.word	0x2000080c
 8004f98:	20000088 	.word	0x20000088

08004f9c <vTaskSuspend>:
	{
 8004f9c:	b570      	push	{r4, r5, r6, lr}
 8004f9e:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8004fa0:	4e38      	ldr	r6, [pc, #224]	; (8005084 <vTaskSuspend+0xe8>)
		taskENTER_CRITICAL();
 8004fa2:	f000 f8e7 	bl	8005174 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8004fa6:	2c00      	cmp	r4, #0
 8004fa8:	d04d      	beq.n	8005046 <vTaskSuspend+0xaa>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004faa:	1d25      	adds	r5, r4, #4
 8004fac:	4628      	mov	r0, r5
 8004fae:	f7ff fa41 	bl	8004434 <uxListRemove>
 8004fb2:	b930      	cbnz	r0, 8004fc2 <vTaskSuspend+0x26>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004fb4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004fb6:	4934      	ldr	r1, [pc, #208]	; (8005088 <vTaskSuspend+0xec>)
 8004fb8:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	58cb      	ldr	r3, [r1, r3]
 8004fc0:	b34b      	cbz	r3, 8005016 <vTaskSuspend+0x7a>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004fc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004fc4:	b11b      	cbz	r3, 8004fce <vTaskSuspend+0x32>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fc6:	f104 0018 	add.w	r0, r4, #24
 8004fca:	f7ff fa33 	bl	8004434 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8004fce:	4629      	mov	r1, r5
 8004fd0:	482e      	ldr	r0, [pc, #184]	; (800508c <vTaskSuspend+0xf0>)
		if( xSchedulerRunning != pdFALSE )
 8004fd2:	4d2f      	ldr	r5, [pc, #188]	; (8005090 <vTaskSuspend+0xf4>)
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8004fd4:	f7ff fa06 	bl	80043e4 <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8004fd8:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
 8004fdc:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004fde:	bf04      	itt	eq
 8004fe0:	2300      	moveq	r3, #0
 8004fe2:	f884 309c 	strbeq.w	r3, [r4, #156]	; 0x9c
		taskEXIT_CRITICAL();
 8004fe6:	f000 f8e7 	bl	80051b8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8004fea:	682b      	ldr	r3, [r5, #0]
 8004fec:	b9e3      	cbnz	r3, 8005028 <vTaskSuspend+0x8c>
		if( pxTCB == pxCurrentTCB )
 8004fee:	6833      	ldr	r3, [r6, #0]
 8004ff0:	42a3      	cmp	r3, r4
 8004ff2:	d000      	beq.n	8004ff6 <vTaskSuspend+0x5a>
	}
 8004ff4:	bd70      	pop	{r4, r5, r6, pc}
			if( xSchedulerRunning != pdFALSE )
 8004ff6:	682b      	ldr	r3, [r5, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d02b      	beq.n	8005054 <vTaskSuspend+0xb8>
				configASSERT( uxSchedulerSuspended == 0 );
 8004ffc:	4b25      	ldr	r3, [pc, #148]	; (8005094 <vTaskSuspend+0xf8>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d02f      	beq.n	8005064 <vTaskSuspend+0xc8>
 8005004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005008:	f383 8811 	msr	BASEPRI, r3
 800500c:	f3bf 8f6f 	isb	sy
 8005010:	f3bf 8f4f 	dsb	sy
 8005014:	e7fe      	b.n	8005014 <vTaskSuspend+0x78>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005016:	4920      	ldr	r1, [pc, #128]	; (8005098 <vTaskSuspend+0xfc>)
 8005018:	2301      	movs	r3, #1
 800501a:	fa03 f202 	lsl.w	r2, r3, r2
 800501e:	680b      	ldr	r3, [r1, #0]
 8005020:	ea23 0302 	bic.w	r3, r3, r2
 8005024:	600b      	str	r3, [r1, #0]
 8005026:	e7cc      	b.n	8004fc2 <vTaskSuspend+0x26>
			taskENTER_CRITICAL();
 8005028:	f000 f8a4 	bl	8005174 <vPortEnterCritical>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800502c:	4b1b      	ldr	r3, [pc, #108]	; (800509c <vTaskSuspend+0x100>)
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	6812      	ldr	r2, [r2, #0]
 8005032:	b152      	cbz	r2, 800504a <vTaskSuspend+0xae>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005034:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005036:	4b1a      	ldr	r3, [pc, #104]	; (80050a0 <vTaskSuspend+0x104>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005038:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800503a:	68d2      	ldr	r2, [r2, #12]
 800503c:	6852      	ldr	r2, [r2, #4]
 800503e:	601a      	str	r2, [r3, #0]
			taskEXIT_CRITICAL();
 8005040:	f000 f8ba 	bl	80051b8 <vPortExitCritical>
 8005044:	e7d3      	b.n	8004fee <vTaskSuspend+0x52>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005046:	6834      	ldr	r4, [r6, #0]
 8005048:	e7af      	b.n	8004faa <vTaskSuspend+0xe>
		xNextTaskUnblockTime = portMAX_DELAY;
 800504a:	4b15      	ldr	r3, [pc, #84]	; (80050a0 <vTaskSuspend+0x104>)
 800504c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	e7f5      	b.n	8005040 <vTaskSuspend+0xa4>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8005054:	490d      	ldr	r1, [pc, #52]	; (800508c <vTaskSuspend+0xf0>)
 8005056:	4a13      	ldr	r2, [pc, #76]	; (80050a4 <vTaskSuspend+0x108>)
 8005058:	6809      	ldr	r1, [r1, #0]
 800505a:	6812      	ldr	r2, [r2, #0]
 800505c:	4291      	cmp	r1, r2
 800505e:	d10c      	bne.n	800507a <vTaskSuspend+0xde>
					pxCurrentTCB = NULL;
 8005060:	6033      	str	r3, [r6, #0]
	}
 8005062:	bd70      	pop	{r4, r5, r6, pc}
				portYIELD_WITHIN_API();
 8005064:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005068:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800506c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	f3bf 8f6f 	isb	sy
	}
 8005078:	bd70      	pop	{r4, r5, r6, pc}
 800507a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vTaskSwitchContext();
 800507e:	f7ff bf4f 	b.w	8004f20 <vTaskSwitchContext>
 8005082:	bf00      	nop
 8005084:	2000080c 	.word	0x2000080c
 8005088:	20000818 	.word	0x20000818
 800508c:	20000904 	.word	0x20000904
 8005090:	20000900 	.word	0x20000900
 8005094:	200008ac 	.word	0x200008ac
 8005098:	200008b4 	.word	0x200008b4
 800509c:	20000810 	.word	0x20000810
 80050a0:	200008e0 	.word	0x200008e0
 80050a4:	200008a4 	.word	0x200008a4

080050a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80050a8:	4808      	ldr	r0, [pc, #32]	; (80050cc <prvPortStartFirstTask+0x24>)
 80050aa:	6800      	ldr	r0, [r0, #0]
 80050ac:	6800      	ldr	r0, [r0, #0]
 80050ae:	f380 8808 	msr	MSP, r0
 80050b2:	f04f 0000 	mov.w	r0, #0
 80050b6:	f380 8814 	msr	CONTROL, r0
 80050ba:	b662      	cpsie	i
 80050bc:	b661      	cpsie	f
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	df00      	svc	0
 80050c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80050ca:	0000      	.short	0x0000
 80050cc:	e000ed08 	.word	0xe000ed08

080050d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80050d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80050e0 <vPortEnableVFP+0x10>
 80050d4:	6801      	ldr	r1, [r0, #0]
 80050d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80050da:	6001      	str	r1, [r0, #0]
 80050dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80050de:	0000      	.short	0x0000
 80050e0:	e000ed88 	.word	0xe000ed88

080050e4 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 80050e4:	4b0e      	ldr	r3, [pc, #56]	; (8005120 <prvTaskExitError+0x3c>)
 80050e6:	681b      	ldr	r3, [r3, #0]
{
 80050e8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80050ea:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 80050ec:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 80050ee:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80050f0:	d008      	beq.n	8005104 <prvTaskExitError+0x20>
 80050f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f6:	f383 8811 	msr	BASEPRI, r3
 80050fa:	f3bf 8f6f 	isb	sy
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	e7fe      	b.n	8005102 <prvTaskExitError+0x1e>
 8005104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005108:	f383 8811 	msr	BASEPRI, r3
 800510c:	f3bf 8f6f 	isb	sy
 8005110:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8005114:	9b01      	ldr	r3, [sp, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d0fc      	beq.n	8005114 <prvTaskExitError+0x30>
}
 800511a:	b002      	add	sp, #8
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	2000002c 	.word	0x2000002c

08005124 <pxPortInitialiseStack>:
{
 8005124:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005126:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800512a:	4c07      	ldr	r4, [pc, #28]	; (8005148 <pxPortInitialiseStack+0x24>)
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800512c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005130:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005134:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005138:	e940 4103 	strd	r4, r1, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800513c:	e940 3209 	strd	r3, r2, [r0, #-36]	; 0x24
}
 8005140:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005144:	3844      	subs	r0, #68	; 0x44
 8005146:	4770      	bx	lr
 8005148:	080050e5 	.word	0x080050e5
 800514c:	00000000 	.word	0x00000000

08005150 <SVC_Handler>:
	__asm volatile (
 8005150:	4b07      	ldr	r3, [pc, #28]	; (8005170 <pxCurrentTCBConst2>)
 8005152:	6819      	ldr	r1, [r3, #0]
 8005154:	6808      	ldr	r0, [r1, #0]
 8005156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800515a:	f380 8809 	msr	PSP, r0
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	f04f 0000 	mov.w	r0, #0
 8005166:	f380 8811 	msr	BASEPRI, r0
 800516a:	4770      	bx	lr
 800516c:	f3af 8000 	nop.w

08005170 <pxCurrentTCBConst2>:
 8005170:	2000080c 	.word	0x2000080c

08005174 <vPortEnterCritical>:
 8005174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005178:	f383 8811 	msr	BASEPRI, r3
 800517c:	f3bf 8f6f 	isb	sy
 8005180:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8005184:	4a0b      	ldr	r2, [pc, #44]	; (80051b4 <vPortEnterCritical+0x40>)
 8005186:	6813      	ldr	r3, [r2, #0]
 8005188:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800518a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800518c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800518e:	d000      	beq.n	8005192 <vPortEnterCritical+0x1e>
}
 8005190:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005192:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005196:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b00      	cmp	r3, #0
 800519e:	d0f7      	beq.n	8005190 <vPortEnterCritical+0x1c>
 80051a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a4:	f383 8811 	msr	BASEPRI, r3
 80051a8:	f3bf 8f6f 	isb	sy
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	e7fe      	b.n	80051b0 <vPortEnterCritical+0x3c>
 80051b2:	bf00      	nop
 80051b4:	2000002c 	.word	0x2000002c

080051b8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80051b8:	4a08      	ldr	r2, [pc, #32]	; (80051dc <vPortExitCritical+0x24>)
 80051ba:	6813      	ldr	r3, [r2, #0]
 80051bc:	b943      	cbnz	r3, 80051d0 <vPortExitCritical+0x18>
 80051be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	e7fe      	b.n	80051ce <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80051d0:	3b01      	subs	r3, #1
 80051d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80051d4:	b90b      	cbnz	r3, 80051da <vPortExitCritical+0x22>
	__asm volatile
 80051d6:	f383 8811 	msr	BASEPRI, r3
}
 80051da:	4770      	bx	lr
 80051dc:	2000002c 	.word	0x2000002c

080051e0 <PendSV_Handler>:
	__asm volatile
 80051e0:	f3ef 8009 	mrs	r0, PSP
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	4b15      	ldr	r3, [pc, #84]	; (8005240 <pxCurrentTCBConst>)
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	f01e 0f10 	tst.w	lr, #16
 80051f0:	bf08      	it	eq
 80051f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80051f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051fa:	6010      	str	r0, [r2, #0]
 80051fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005200:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005204:	f380 8811 	msr	BASEPRI, r0
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	f7ff fe86 	bl	8004f20 <vTaskSwitchContext>
 8005214:	f04f 0000 	mov.w	r0, #0
 8005218:	f380 8811 	msr	BASEPRI, r0
 800521c:	bc09      	pop	{r0, r3}
 800521e:	6819      	ldr	r1, [r3, #0]
 8005220:	6808      	ldr	r0, [r1, #0]
 8005222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005226:	f01e 0f10 	tst.w	lr, #16
 800522a:	bf08      	it	eq
 800522c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005230:	f380 8809 	msr	PSP, r0
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	f3af 8000 	nop.w

08005240 <pxCurrentTCBConst>:
 8005240:	2000080c 	.word	0x2000080c

08005244 <SysTick_Handler>:
{
 8005244:	b508      	push	{r3, lr}
	__asm volatile
 8005246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524a:	f383 8811 	msr	BASEPRI, r3
 800524e:	f3bf 8f6f 	isb	sy
 8005252:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8005256:	f7ff fe53 	bl	8004f00 <xTaskIncrementTick>
 800525a:	b128      	cbz	r0, 8005268 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800525c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005264:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8005268:	2300      	movs	r3, #0
 800526a:	f383 8811 	msr	BASEPRI, r3
}
 800526e:	bd08      	pop	{r3, pc}

08005270 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005270:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8005274:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005276:	4906      	ldr	r1, [pc, #24]	; (8005290 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005278:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800527a:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800527c:	680b      	ldr	r3, [r1, #0]
 800527e:	4905      	ldr	r1, [pc, #20]	; (8005294 <vPortSetupTimerInterrupt+0x24>)
 8005280:	fba1 1303 	umull	r1, r3, r1, r3
 8005284:	099b      	lsrs	r3, r3, #6
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005286:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005288:	3b01      	subs	r3, #1
 800528a:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800528c:	6110      	str	r0, [r2, #16]
}
 800528e:	4770      	bx	lr
 8005290:	20000020 	.word	0x20000020
 8005294:	10624dd3 	.word	0x10624dd3

08005298 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005298:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800529c:	4a49      	ldr	r2, [pc, #292]	; (80053c4 <xPortStartScheduler+0x12c>)
 800529e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 80052a2:	4291      	cmp	r1, r2
 80052a4:	d043      	beq.n	800532e <xPortStartScheduler+0x96>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80052a6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80052aa:	4b47      	ldr	r3, [pc, #284]	; (80053c8 <xPortStartScheduler+0x130>)
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d035      	beq.n	800531c <xPortStartScheduler+0x84>
{
 80052b0:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052b2:	4b46      	ldr	r3, [pc, #280]	; (80053cc <xPortStartScheduler+0x134>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052b4:	4846      	ldr	r0, [pc, #280]	; (80053d0 <xPortStartScheduler+0x138>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052b6:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052b8:	4c46      	ldr	r4, [pc, #280]	; (80053d4 <xPortStartScheduler+0x13c>)
{
 80052ba:	b084      	sub	sp, #16
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80052bc:	21ff      	movs	r1, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052be:	b2d2      	uxtb	r2, r2
 80052c0:	9202      	str	r2, [sp, #8]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80052c2:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052d0:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052d8:	2107      	movs	r1, #7
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052da:	7003      	strb	r3, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052dc:	0610      	lsls	r0, r2, #24
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052de:	6021      	str	r1, [r4, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052e0:	bf48      	it	mi
 80052e2:	2206      	movmi	r2, #6
 80052e4:	d511      	bpl.n	800530a <xPortStartScheduler+0x72>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80052ea:	005b      	lsls	r3, r3, #1
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052f2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80052f6:	0609      	lsls	r1, r1, #24
 80052f8:	4610      	mov	r0, r2
 80052fa:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80052fe:	d4f2      	bmi.n	80052e6 <xPortStartScheduler+0x4e>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005300:	2803      	cmp	r0, #3
 8005302:	6020      	str	r0, [r4, #0]
 8005304:	f88d 3007 	strb.w	r3, [sp, #7]
 8005308:	d01a      	beq.n	8005340 <xPortStartScheduler+0xa8>
	__asm volatile
 800530a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530e:	f383 8811 	msr	BASEPRI, r3
 8005312:	f3bf 8f6f 	isb	sy
 8005316:	f3bf 8f4f 	dsb	sy
 800531a:	e7fe      	b.n	800531a <xPortStartScheduler+0x82>
 800531c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005320:	f383 8811 	msr	BASEPRI, r3
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800532c:	e7fe      	b.n	800532c <xPortStartScheduler+0x94>
 800532e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800533e:	e7fe      	b.n	800533e <xPortStartScheduler+0xa6>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005340:	9b02      	ldr	r3, [sp, #8]
 8005342:	4a22      	ldr	r2, [pc, #136]	; (80053cc <xPortStartScheduler+0x134>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005344:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005348:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800534c:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800534e:	6021      	str	r1, [r4, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005350:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005352:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
	uxCriticalNesting = 0;
 8005356:	4c20      	ldr	r4, [pc, #128]	; (80053d8 <xPortStartScheduler+0x140>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005358:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800535c:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005360:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
 8005364:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005368:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	uxCriticalNesting = 0;
 800536c:	2600      	movs	r6, #0
	vPortSetupTimerInterrupt();
 800536e:	f7ff ff7f 	bl	8005270 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8005372:	6026      	str	r6, [r4, #0]
	vPortEnableVFP();
 8005374:	f7ff feac 	bl	80050d0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005378:	f8d5 3f34 	ldr.w	r3, [r5, #3892]	; 0xf34
 800537c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005380:	f8c5 3f34 	str.w	r3, [r5, #3892]	; 0xf34
	prvPortStartFirstTask();
 8005384:	f7ff fe90 	bl	80050a8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8005388:	f7ff fdca 	bl	8004f20 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 800538c:	6823      	ldr	r3, [r4, #0]
volatile uint32_t ulDummy = 0;
 800538e:	9603      	str	r6, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
 8005390:	3301      	adds	r3, #1
 8005392:	d008      	beq.n	80053a6 <xPortStartScheduler+0x10e>
 8005394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	e7fe      	b.n	80053a4 <xPortStartScheduler+0x10c>
 80053a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053aa:	f383 8811 	msr	BASEPRI, r3
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80053b6:	9b03      	ldr	r3, [sp, #12]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d0fc      	beq.n	80053b6 <xPortStartScheduler+0x11e>
}
 80053bc:	2000      	movs	r0, #0
 80053be:	b004      	add	sp, #16
 80053c0:	bd70      	pop	{r4, r5, r6, pc}
 80053c2:	bf00      	nop
 80053c4:	410fc271 	.word	0x410fc271
 80053c8:	410fc270 	.word	0x410fc270
 80053cc:	e000e400 	.word	0xe000e400
 80053d0:	20000934 	.word	0x20000934
 80053d4:	20000938 	.word	0x20000938
 80053d8:	2000002c 	.word	0x2000002c

080053dc <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80053dc:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80053e0:	2b0f      	cmp	r3, #15
 80053e2:	d90e      	bls.n	8005402 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80053e4:	4911      	ldr	r1, [pc, #68]	; (800542c <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80053e6:	4a12      	ldr	r2, [pc, #72]	; (8005430 <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80053e8:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80053ea:	7812      	ldrb	r2, [r2, #0]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d908      	bls.n	8005402 <vPortValidateInterruptPriority+0x26>
 80053f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f4:	f383 8811 	msr	BASEPRI, r3
 80053f8:	f3bf 8f6f 	isb	sy
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	e7fe      	b.n	8005400 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005402:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005406:	4a0b      	ldr	r2, [pc, #44]	; (8005434 <vPortValidateInterruptPriority+0x58>)
 8005408:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800540c:	6812      	ldr	r2, [r2, #0]
 800540e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005412:	4293      	cmp	r3, r2
 8005414:	d908      	bls.n	8005428 <vPortValidateInterruptPriority+0x4c>
 8005416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541a:	f383 8811 	msr	BASEPRI, r3
 800541e:	f3bf 8f6f 	isb	sy
 8005422:	f3bf 8f4f 	dsb	sy
 8005426:	e7fe      	b.n	8005426 <vPortValidateInterruptPriority+0x4a>
	}
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	e000e3f0 	.word	0xe000e3f0
 8005430:	20000934 	.word	0x20000934
 8005434:	20000938 	.word	0x20000938

08005438 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800543c:	4605      	mov	r5, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 800543e:	f7ff fd47 	bl	8004ed0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005442:	4a54      	ldr	r2, [pc, #336]	; (8005594 <pvPortMalloc+0x15c>)
 8005444:	6816      	ldr	r6, [r2, #0]
 8005446:	2e00      	cmp	r6, #0
 8005448:	d06e      	beq.n	8005528 <pvPortMalloc+0xf0>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800544a:	4b53      	ldr	r3, [pc, #332]	; (8005598 <pvPortMalloc+0x160>)
 800544c:	681f      	ldr	r7, [r3, #0]
 800544e:	423d      	tst	r5, r7
 8005450:	d12e      	bne.n	80054b0 <pvPortMalloc+0x78>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005452:	b36d      	cbz	r5, 80054b0 <pvPortMalloc+0x78>
			{
				xWantedSize += xHeapStructSize;
 8005454:	f105 0408 	add.w	r4, r5, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005458:	076d      	lsls	r5, r5, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800545a:	bf1c      	itt	ne
 800545c:	f024 0407 	bicne.w	r4, r4, #7
 8005460:	3408      	addne	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005462:	b32c      	cbz	r4, 80054b0 <pvPortMalloc+0x78>
 8005464:	f8df c144 	ldr.w	ip, [pc, #324]	; 80055ac <pvPortMalloc+0x174>
 8005468:	f8dc 5000 	ldr.w	r5, [ip]
 800546c:	42a5      	cmp	r5, r4
 800546e:	d31f      	bcc.n	80054b0 <pvPortMalloc+0x78>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 8005470:	484a      	ldr	r0, [pc, #296]	; (800559c <pvPortMalloc+0x164>)
 8005472:	6803      	ldr	r3, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005474:	e003      	b.n	800547e <pvPortMalloc+0x46>
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	b122      	cbz	r2, 8005484 <pvPortMalloc+0x4c>
 800547a:	4618      	mov	r0, r3
 800547c:	4613      	mov	r3, r2
 800547e:	6859      	ldr	r1, [r3, #4]
 8005480:	42a1      	cmp	r1, r4
 8005482:	d3f8      	bcc.n	8005476 <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005484:	42b3      	cmp	r3, r6
 8005486:	d013      	beq.n	80054b0 <pvPortMalloc+0x78>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005488:	4698      	mov	r8, r3
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800548a:	1b0a      	subs	r2, r1, r4
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800548c:	f858 eb08 	ldr.w	lr, [r8], #8
 8005490:	f8c0 e000 	str.w	lr, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005494:	2a10      	cmp	r2, #16
 8005496:	d929      	bls.n	80054ec <pvPortMalloc+0xb4>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005498:	1919      	adds	r1, r3, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800549a:	0748      	lsls	r0, r1, #29
 800549c:	d00f      	beq.n	80054be <pvPortMalloc+0x86>
 800549e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	e7fe      	b.n	80054ae <pvPortMalloc+0x76>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80054b0:	f7ff fd16 	bl	8004ee0 <xTaskResumeAll>
 80054b4:	f04f 0800 	mov.w	r8, #0
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 80054b8:	4640      	mov	r0, r8
 80054ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80054be:	604a      	str	r2, [r1, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054c0:	4a36      	ldr	r2, [pc, #216]	; (800559c <pvPortMalloc+0x164>)
						pxBlock->xBlockSize = xWantedSize;
 80054c2:	605c      	str	r4, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054c4:	4614      	mov	r4, r2
 80054c6:	6812      	ldr	r2, [r2, #0]
 80054c8:	4291      	cmp	r1, r2
 80054ca:	d8fb      	bhi.n	80054c4 <pvPortMalloc+0x8c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054cc:	6860      	ldr	r0, [r4, #4]
 80054ce:	eb04 0e00 	add.w	lr, r4, r0
 80054d2:	4571      	cmp	r1, lr
 80054d4:	d04b      	beq.n	800556e <pvPortMalloc+0x136>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054d6:	f8d1 e004 	ldr.w	lr, [r1, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054da:	eb01 000e 	add.w	r0, r1, lr
 80054de:	4282      	cmp	r2, r0
 80054e0:	d051      	beq.n	8005586 <pvPortMalloc+0x14e>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80054e2:	428c      	cmp	r4, r1
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80054e4:	600a      	str	r2, [r1, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80054e6:	bf18      	it	ne
 80054e8:	6021      	strne	r1, [r4, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80054ea:	6859      	ldr	r1, [r3, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80054ec:	4a2c      	ldr	r2, [pc, #176]	; (80055a0 <pvPortMalloc+0x168>)
 80054ee:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80054f0:	1a6d      	subs	r5, r5, r1
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80054f2:	4285      	cmp	r5, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80054f4:	bf38      	it	cc
 80054f6:	6015      	strcc	r5, [r2, #0]
					xNumberOfSuccessfulAllocations++;
 80054f8:	4a2a      	ldr	r2, [pc, #168]	; (80055a4 <pvPortMalloc+0x16c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80054fa:	f8cc 5000 	str.w	r5, [ip]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80054fe:	4339      	orrs	r1, r7
					pxBlock->pxNextFreeBlock = NULL;
 8005500:	2000      	movs	r0, #0
 8005502:	e9c3 0100 	strd	r0, r1, [r3]
					xNumberOfSuccessfulAllocations++;
 8005506:	6813      	ldr	r3, [r2, #0]
 8005508:	3301      	adds	r3, #1
 800550a:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800550c:	f7ff fce8 	bl	8004ee0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005510:	f018 0f07 	tst.w	r8, #7
 8005514:	d0d0      	beq.n	80054b8 <pvPortMalloc+0x80>
 8005516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551a:	f383 8811 	msr	BASEPRI, r3
 800551e:	f3bf 8f6f 	isb	sy
 8005522:	f3bf 8f4f 	dsb	sy
 8005526:	e7fe      	b.n	8005526 <pvPortMalloc+0xee>
	uxAddress = ( size_t ) ucHeap;
 8005528:	4b1f      	ldr	r3, [pc, #124]	; (80055a8 <pvPortMalloc+0x170>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800552a:	075e      	lsls	r6, r3, #29
 800552c:	d118      	bne.n	8005560 <pvPortMalloc+0x128>
 800552e:	f503 5670 	add.w	r6, r3, #15360	; 0x3c00
 8005532:	4619      	mov	r1, r3
	uxAddress -= xHeapStructSize;
 8005534:	3e08      	subs	r6, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005536:	f026 0607 	bic.w	r6, r6, #7
	pxEnd = ( void * ) uxAddress;
 800553a:	6016      	str	r6, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800553c:	4a18      	ldr	r2, [pc, #96]	; (80055a0 <pvPortMalloc+0x168>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800553e:	4817      	ldr	r0, [pc, #92]	; (800559c <pvPortMalloc+0x164>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005540:	4c15      	ldr	r4, [pc, #84]	; (8005598 <pvPortMalloc+0x160>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005542:	6001      	str	r1, [r0, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005544:	1af3      	subs	r3, r6, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005546:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005548:	4a18      	ldr	r2, [pc, #96]	; (80055ac <pvPortMalloc+0x174>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800554a:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800554e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005550:	2200      	movs	r2, #0
 8005552:	6042      	str	r2, [r0, #4]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005554:	6027      	str	r7, [r4, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8005556:	e9c6 2200 	strd	r2, r2, [r6]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800555a:	e9c1 6300 	strd	r6, r3, [r1]
}
 800555e:	e776      	b.n	800544e <pvPortMalloc+0x16>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005560:	1dd9      	adds	r1, r3, #7
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005562:	f021 0107 	bic.w	r1, r1, #7
 8005566:	f503 5670 	add.w	r6, r3, #15360	; 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800556a:	460b      	mov	r3, r1
 800556c:	e7e2      	b.n	8005534 <pvPortMalloc+0xfc>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800556e:	6849      	ldr	r1, [r1, #4]
 8005570:	eb00 0e01 	add.w	lr, r0, r1
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005574:	eb04 010e 	add.w	r1, r4, lr
 8005578:	428a      	cmp	r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800557a:	f8c4 e004 	str.w	lr, [r4, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800557e:	d001      	beq.n	8005584 <pvPortMalloc+0x14c>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005580:	6022      	str	r2, [r4, #0]
	if( pxIterator != pxBlockToInsert )
 8005582:	e7b2      	b.n	80054ea <pvPortMalloc+0xb2>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005584:	4621      	mov	r1, r4
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005586:	42b2      	cmp	r2, r6
 8005588:	d0ab      	beq.n	80054e2 <pvPortMalloc+0xaa>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800558a:	6850      	ldr	r0, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800558c:	6812      	ldr	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800558e:	4470      	add	r0, lr
 8005590:	6048      	str	r0, [r1, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005592:	e7a6      	b.n	80054e2 <pvPortMalloc+0xaa>
 8005594:	2000093c 	.word	0x2000093c
 8005598:	20004540 	.word	0x20004540
 800559c:	20004554 	.word	0x20004554
 80055a0:	20004548 	.word	0x20004548
 80055a4:	2000454c 	.word	0x2000454c
 80055a8:	20000940 	.word	0x20000940
 80055ac:	20004544 	.word	0x20004544

080055b0 <vPortFree>:
	if( pv != NULL )
 80055b0:	b1d0      	cbz	r0, 80055e8 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055b2:	4a2c      	ldr	r2, [pc, #176]	; (8005664 <vPortFree+0xb4>)
 80055b4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80055b8:	6812      	ldr	r2, [r2, #0]
 80055ba:	4213      	tst	r3, r2
 80055bc:	d00b      	beq.n	80055d6 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80055be:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80055c2:	b191      	cbz	r1, 80055ea <vPortFree+0x3a>
 80055c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c8:	f383 8811 	msr	BASEPRI, r3
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	e7fe      	b.n	80055d4 <vPortFree+0x24>
 80055d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055da:	f383 8811 	msr	BASEPRI, r3
 80055de:	f3bf 8f6f 	isb	sy
 80055e2:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055e6:	e7fe      	b.n	80055e6 <vPortFree+0x36>
 80055e8:	4770      	bx	lr
{
 80055ea:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80055ec:	ea23 0302 	bic.w	r3, r3, r2
{
 80055f0:	b082      	sub	sp, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80055f2:	f840 3c04 	str.w	r3, [r0, #-4]
					xFreeBytesRemaining += pxLink->xBlockSize;
 80055f6:	4c1c      	ldr	r4, [pc, #112]	; (8005668 <vPortFree+0xb8>)
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80055f8:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 80055fa:	f7ff fc69 	bl	8004ed0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80055fe:	9801      	ldr	r0, [sp, #4]
 8005600:	6822      	ldr	r2, [r4, #0]
 8005602:	f850 1c04 	ldr.w	r1, [r0, #-4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005606:	4b19      	ldr	r3, [pc, #100]	; (800566c <vPortFree+0xbc>)
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005608:	440a      	add	r2, r1
		puc -= xHeapStructSize;
 800560a:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800560c:	6022      	str	r2, [r4, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800560e:	461a      	mov	r2, r3
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4298      	cmp	r0, r3
 8005614:	d8fb      	bhi.n	800560e <vPortFree+0x5e>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005616:	6854      	ldr	r4, [r2, #4]
 8005618:	eb02 0e04 	add.w	lr, r2, r4
 800561c:	4570      	cmp	r0, lr
 800561e:	d010      	beq.n	8005642 <vPortFree+0x92>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005620:	eb00 0c01 	add.w	ip, r0, r1
 8005624:	4563      	cmp	r3, ip
 8005626:	d014      	beq.n	8005652 <vPortFree+0xa2>
	if( pxIterator != pxBlockToInsert )
 8005628:	4282      	cmp	r2, r0
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800562a:	6003      	str	r3, [r0, #0]
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800562c:	bf18      	it	ne
 800562e:	6010      	strne	r0, [r2, #0]
					xNumberOfSuccessfulFrees++;
 8005630:	4a0f      	ldr	r2, [pc, #60]	; (8005670 <vPortFree+0xc0>)
 8005632:	6813      	ldr	r3, [r2, #0]
 8005634:	3301      	adds	r3, #1
 8005636:	6013      	str	r3, [r2, #0]
}
 8005638:	b002      	add	sp, #8
 800563a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800563e:	f7ff bc4f 	b.w	8004ee0 <xTaskResumeAll>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005642:	4421      	add	r1, r4
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005644:	1850      	adds	r0, r2, r1
 8005646:	4283      	cmp	r3, r0
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005648:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800564a:	d001      	beq.n	8005650 <vPortFree+0xa0>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800564c:	6013      	str	r3, [r2, #0]
	if( pxIterator != pxBlockToInsert )
 800564e:	e7ef      	b.n	8005630 <vPortFree+0x80>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005650:	4610      	mov	r0, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005652:	4c08      	ldr	r4, [pc, #32]	; (8005674 <vPortFree+0xc4>)
 8005654:	6824      	ldr	r4, [r4, #0]
 8005656:	42a3      	cmp	r3, r4
 8005658:	d0e6      	beq.n	8005628 <vPortFree+0x78>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800565a:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800565e:	4421      	add	r1, r4
 8005660:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005662:	e7e1      	b.n	8005628 <vPortFree+0x78>
 8005664:	20004540 	.word	0x20004540
 8005668:	20004544 	.word	0x20004544
 800566c:	20004554 	.word	0x20004554
 8005670:	20004550 	.word	0x20004550
 8005674:	2000093c 	.word	0x2000093c

08005678 <tanf>:
 8005678:	ee10 3a10 	vmov	r3, s0
 800567c:	b507      	push	{r0, r1, r2, lr}
 800567e:	4a12      	ldr	r2, [pc, #72]	; (80056c8 <tanf+0x50>)
 8005680:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005684:	4293      	cmp	r3, r2
 8005686:	dc07      	bgt.n	8005698 <tanf+0x20>
 8005688:	eddf 0a10 	vldr	s1, [pc, #64]	; 80056cc <tanf+0x54>
 800568c:	2001      	movs	r0, #1
 800568e:	b003      	add	sp, #12
 8005690:	f85d eb04 	ldr.w	lr, [sp], #4
 8005694:	f000 b81c 	b.w	80056d0 <__kernel_tanf>
 8005698:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800569c:	db04      	blt.n	80056a8 <tanf+0x30>
 800569e:	ee30 0a40 	vsub.f32	s0, s0, s0
 80056a2:	b003      	add	sp, #12
 80056a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80056a8:	4668      	mov	r0, sp
 80056aa:	f000 f8f1 	bl	8005890 <__ieee754_rem_pio2f>
 80056ae:	0040      	lsls	r0, r0, #1
 80056b0:	f000 0002 	and.w	r0, r0, #2
 80056b4:	eddd 0a01 	vldr	s1, [sp, #4]
 80056b8:	ed9d 0a00 	vldr	s0, [sp]
 80056bc:	f1c0 0001 	rsb	r0, r0, #1
 80056c0:	f000 f806 	bl	80056d0 <__kernel_tanf>
 80056c4:	e7ed      	b.n	80056a2 <tanf+0x2a>
 80056c6:	bf00      	nop
 80056c8:	3f490fda 	.word	0x3f490fda
 80056cc:	00000000 	.word	0x00000000

080056d0 <__kernel_tanf>:
 80056d0:	b508      	push	{r3, lr}
 80056d2:	ee10 3a10 	vmov	r3, s0
 80056d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80056da:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 80056de:	eef0 7a40 	vmov.f32	s15, s0
 80056e2:	da17      	bge.n	8005714 <__kernel_tanf+0x44>
 80056e4:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 80056e8:	ee17 1a10 	vmov	r1, s14
 80056ec:	bb41      	cbnz	r1, 8005740 <__kernel_tanf+0x70>
 80056ee:	1c43      	adds	r3, r0, #1
 80056f0:	4313      	orrs	r3, r2
 80056f2:	d108      	bne.n	8005706 <__kernel_tanf+0x36>
 80056f4:	f000 f9f8 	bl	8005ae8 <fabsf>
 80056f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056fc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005700:	eeb0 0a67 	vmov.f32	s0, s15
 8005704:	bd08      	pop	{r3, pc}
 8005706:	2801      	cmp	r0, #1
 8005708:	d0fa      	beq.n	8005700 <__kernel_tanf+0x30>
 800570a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800570e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005712:	e7f5      	b.n	8005700 <__kernel_tanf+0x30>
 8005714:	494c      	ldr	r1, [pc, #304]	; (8005848 <__kernel_tanf+0x178>)
 8005716:	428a      	cmp	r2, r1
 8005718:	db12      	blt.n	8005740 <__kernel_tanf+0x70>
 800571a:	2b00      	cmp	r3, #0
 800571c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800584c <__kernel_tanf+0x17c>
 8005720:	bfb8      	it	lt
 8005722:	eef1 7a40 	vneglt.f32	s15, s0
 8005726:	ee37 7a67 	vsub.f32	s14, s14, s15
 800572a:	eddf 7a49 	vldr	s15, [pc, #292]	; 8005850 <__kernel_tanf+0x180>
 800572e:	bfb8      	it	lt
 8005730:	eef1 0a60 	vneglt.f32	s1, s1
 8005734:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8005738:	eddf 0a46 	vldr	s1, [pc, #280]	; 8005854 <__kernel_tanf+0x184>
 800573c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005740:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8005744:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005858 <__kernel_tanf+0x188>
 8005748:	ed9f 6a44 	vldr	s12, [pc, #272]	; 800585c <__kernel_tanf+0x18c>
 800574c:	ed9f 5a44 	vldr	s10, [pc, #272]	; 8005860 <__kernel_tanf+0x190>
 8005750:	493d      	ldr	r1, [pc, #244]	; (8005848 <__kernel_tanf+0x178>)
 8005752:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8005756:	428a      	cmp	r2, r1
 8005758:	eea7 6a25 	vfma.f32	s12, s14, s11
 800575c:	eddf 5a41 	vldr	s11, [pc, #260]	; 8005864 <__kernel_tanf+0x194>
 8005760:	eee6 5a07 	vfma.f32	s11, s12, s14
 8005764:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8005868 <__kernel_tanf+0x198>
 8005768:	eea5 6a87 	vfma.f32	s12, s11, s14
 800576c:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800586c <__kernel_tanf+0x19c>
 8005770:	eee6 5a07 	vfma.f32	s11, s12, s14
 8005774:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8005870 <__kernel_tanf+0x1a0>
 8005778:	eea5 6a87 	vfma.f32	s12, s11, s14
 800577c:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8005874 <__kernel_tanf+0x1a4>
 8005780:	eee7 5a05 	vfma.f32	s11, s14, s10
 8005784:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8005878 <__kernel_tanf+0x1a8>
 8005788:	eea5 5a87 	vfma.f32	s10, s11, s14
 800578c:	eddf 5a3b 	vldr	s11, [pc, #236]	; 800587c <__kernel_tanf+0x1ac>
 8005790:	eee5 5a07 	vfma.f32	s11, s10, s14
 8005794:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8005880 <__kernel_tanf+0x1b0>
 8005798:	eea5 5a87 	vfma.f32	s10, s11, s14
 800579c:	eddf 5a39 	vldr	s11, [pc, #228]	; 8005884 <__kernel_tanf+0x1b4>
 80057a0:	eee5 5a07 	vfma.f32	s11, s10, s14
 80057a4:	eeb0 7a46 	vmov.f32	s14, s12
 80057a8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80057ac:	ee27 5aa6 	vmul.f32	s10, s15, s13
 80057b0:	eeb0 6a60 	vmov.f32	s12, s1
 80057b4:	eea7 6a05 	vfma.f32	s12, s14, s10
 80057b8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8005888 <__kernel_tanf+0x1b8>
 80057bc:	eee6 0a26 	vfma.f32	s1, s12, s13
 80057c0:	eee5 0a07 	vfma.f32	s1, s10, s14
 80057c4:	ee77 6aa0 	vadd.f32	s13, s15, s1
 80057c8:	db1d      	blt.n	8005806 <__kernel_tanf+0x136>
 80057ca:	ee07 0a10 	vmov	s14, r0
 80057ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80057d2:	ee66 5aa6 	vmul.f32	s11, s13, s13
 80057d6:	ee76 6a87 	vadd.f32	s13, s13, s14
 80057da:	179b      	asrs	r3, r3, #30
 80057dc:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 80057e0:	f003 0302 	and.w	r3, r3, #2
 80057e4:	f1c3 0301 	rsb	r3, r3, #1
 80057e8:	ee76 6a60 	vsub.f32	s13, s12, s1
 80057ec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80057f0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80057f4:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80057f8:	ee07 3a90 	vmov	s15, r3
 80057fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005800:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005804:	e77c      	b.n	8005700 <__kernel_tanf+0x30>
 8005806:	2801      	cmp	r0, #1
 8005808:	d01b      	beq.n	8005842 <__kernel_tanf+0x172>
 800580a:	4b20      	ldr	r3, [pc, #128]	; (800588c <__kernel_tanf+0x1bc>)
 800580c:	ee16 2a90 	vmov	r2, s13
 8005810:	401a      	ands	r2, r3
 8005812:	ee05 2a90 	vmov	s11, r2
 8005816:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800581a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800581e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8005822:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8005826:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 800582a:	ee16 2a10 	vmov	r2, s12
 800582e:	4013      	ands	r3, r2
 8005830:	ee07 3a90 	vmov	s15, r3
 8005834:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8005838:	eea0 7aa7 	vfma.f32	s14, s1, s15
 800583c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8005840:	e75e      	b.n	8005700 <__kernel_tanf+0x30>
 8005842:	eef0 7a66 	vmov.f32	s15, s13
 8005846:	e75b      	b.n	8005700 <__kernel_tanf+0x30>
 8005848:	3f2ca140 	.word	0x3f2ca140
 800584c:	3f490fda 	.word	0x3f490fda
 8005850:	33222168 	.word	0x33222168
 8005854:	00000000 	.word	0x00000000
 8005858:	b79bae5f 	.word	0xb79bae5f
 800585c:	38a3f445 	.word	0x38a3f445
 8005860:	37d95384 	.word	0x37d95384
 8005864:	3a1a26c8 	.word	0x3a1a26c8
 8005868:	3b6b6916 	.word	0x3b6b6916
 800586c:	3cb327a4 	.word	0x3cb327a4
 8005870:	3e088889 	.word	0x3e088889
 8005874:	3895c07a 	.word	0x3895c07a
 8005878:	398137b9 	.word	0x398137b9
 800587c:	3abede48 	.word	0x3abede48
 8005880:	3c11371f 	.word	0x3c11371f
 8005884:	3d5d0dd1 	.word	0x3d5d0dd1
 8005888:	3eaaaaab 	.word	0x3eaaaaab
 800588c:	fffff000 	.word	0xfffff000

08005890 <__ieee754_rem_pio2f>:
 8005890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005892:	ee10 6a10 	vmov	r6, s0
 8005896:	4b86      	ldr	r3, [pc, #536]	; (8005ab0 <__ieee754_rem_pio2f+0x220>)
 8005898:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800589c:	429d      	cmp	r5, r3
 800589e:	b087      	sub	sp, #28
 80058a0:	4604      	mov	r4, r0
 80058a2:	dc05      	bgt.n	80058b0 <__ieee754_rem_pio2f+0x20>
 80058a4:	2300      	movs	r3, #0
 80058a6:	ed80 0a00 	vstr	s0, [r0]
 80058aa:	6043      	str	r3, [r0, #4]
 80058ac:	2000      	movs	r0, #0
 80058ae:	e020      	b.n	80058f2 <__ieee754_rem_pio2f+0x62>
 80058b0:	4b80      	ldr	r3, [pc, #512]	; (8005ab4 <__ieee754_rem_pio2f+0x224>)
 80058b2:	429d      	cmp	r5, r3
 80058b4:	dc38      	bgt.n	8005928 <__ieee754_rem_pio2f+0x98>
 80058b6:	2e00      	cmp	r6, #0
 80058b8:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8005ab8 <__ieee754_rem_pio2f+0x228>
 80058bc:	4b7f      	ldr	r3, [pc, #508]	; (8005abc <__ieee754_rem_pio2f+0x22c>)
 80058be:	f025 050f 	bic.w	r5, r5, #15
 80058c2:	dd18      	ble.n	80058f6 <__ieee754_rem_pio2f+0x66>
 80058c4:	429d      	cmp	r5, r3
 80058c6:	ee70 7a47 	vsub.f32	s15, s0, s14
 80058ca:	bf09      	itett	eq
 80058cc:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8005ac0 <__ieee754_rem_pio2f+0x230>
 80058d0:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8005ac4 <__ieee754_rem_pio2f+0x234>
 80058d4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80058d8:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8005ac8 <__ieee754_rem_pio2f+0x238>
 80058dc:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80058e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80058e4:	edc0 6a00 	vstr	s13, [r0]
 80058e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80058ec:	edc0 7a01 	vstr	s15, [r0, #4]
 80058f0:	2001      	movs	r0, #1
 80058f2:	b007      	add	sp, #28
 80058f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058f6:	429d      	cmp	r5, r3
 80058f8:	ee70 7a07 	vadd.f32	s15, s0, s14
 80058fc:	bf09      	itett	eq
 80058fe:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8005ac0 <__ieee754_rem_pio2f+0x230>
 8005902:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8005ac4 <__ieee754_rem_pio2f+0x234>
 8005906:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800590a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8005ac8 <__ieee754_rem_pio2f+0x238>
 800590e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005912:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005916:	edc0 6a00 	vstr	s13, [r0]
 800591a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800591e:	edc0 7a01 	vstr	s15, [r0, #4]
 8005922:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005926:	e7e4      	b.n	80058f2 <__ieee754_rem_pio2f+0x62>
 8005928:	4b68      	ldr	r3, [pc, #416]	; (8005acc <__ieee754_rem_pio2f+0x23c>)
 800592a:	429d      	cmp	r5, r3
 800592c:	dc71      	bgt.n	8005a12 <__ieee754_rem_pio2f+0x182>
 800592e:	f000 f8db 	bl	8005ae8 <fabsf>
 8005932:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8005ad0 <__ieee754_rem_pio2f+0x240>
 8005936:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800593a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800593e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005942:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005946:	ee17 0a90 	vmov	r0, s15
 800594a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8005ab8 <__ieee754_rem_pio2f+0x228>
 800594e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8005952:	281f      	cmp	r0, #31
 8005954:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8005ac4 <__ieee754_rem_pio2f+0x234>
 8005958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800595c:	eeb1 6a47 	vneg.f32	s12, s14
 8005960:	ee70 6a67 	vsub.f32	s13, s0, s15
 8005964:	ee16 2a90 	vmov	r2, s13
 8005968:	dc1c      	bgt.n	80059a4 <__ieee754_rem_pio2f+0x114>
 800596a:	495a      	ldr	r1, [pc, #360]	; (8005ad4 <__ieee754_rem_pio2f+0x244>)
 800596c:	1e47      	subs	r7, r0, #1
 800596e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8005972:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8005976:	428b      	cmp	r3, r1
 8005978:	d014      	beq.n	80059a4 <__ieee754_rem_pio2f+0x114>
 800597a:	6022      	str	r2, [r4, #0]
 800597c:	ed94 7a00 	vldr	s14, [r4]
 8005980:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005984:	2e00      	cmp	r6, #0
 8005986:	ee30 0a67 	vsub.f32	s0, s0, s15
 800598a:	ed84 0a01 	vstr	s0, [r4, #4]
 800598e:	dab0      	bge.n	80058f2 <__ieee754_rem_pio2f+0x62>
 8005990:	eeb1 7a47 	vneg.f32	s14, s14
 8005994:	eeb1 0a40 	vneg.f32	s0, s0
 8005998:	ed84 7a00 	vstr	s14, [r4]
 800599c:	ed84 0a01 	vstr	s0, [r4, #4]
 80059a0:	4240      	negs	r0, r0
 80059a2:	e7a6      	b.n	80058f2 <__ieee754_rem_pio2f+0x62>
 80059a4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80059a8:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 80059ac:	2908      	cmp	r1, #8
 80059ae:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80059b2:	dde2      	ble.n	800597a <__ieee754_rem_pio2f+0xea>
 80059b4:	eddf 5a42 	vldr	s11, [pc, #264]	; 8005ac0 <__ieee754_rem_pio2f+0x230>
 80059b8:	eef0 6a40 	vmov.f32	s13, s0
 80059bc:	eee6 6a25 	vfma.f32	s13, s12, s11
 80059c0:	ee70 7a66 	vsub.f32	s15, s0, s13
 80059c4:	eee6 7a25 	vfma.f32	s15, s12, s11
 80059c8:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005ac8 <__ieee754_rem_pio2f+0x238>
 80059cc:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80059d0:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80059d4:	ee15 2a90 	vmov	r2, s11
 80059d8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80059dc:	1a5b      	subs	r3, r3, r1
 80059de:	2b19      	cmp	r3, #25
 80059e0:	dc04      	bgt.n	80059ec <__ieee754_rem_pio2f+0x15c>
 80059e2:	edc4 5a00 	vstr	s11, [r4]
 80059e6:	eeb0 0a66 	vmov.f32	s0, s13
 80059ea:	e7c7      	b.n	800597c <__ieee754_rem_pio2f+0xec>
 80059ec:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8005ad8 <__ieee754_rem_pio2f+0x248>
 80059f0:	eeb0 0a66 	vmov.f32	s0, s13
 80059f4:	eea6 0a25 	vfma.f32	s0, s12, s11
 80059f8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80059fc:	eddf 6a37 	vldr	s13, [pc, #220]	; 8005adc <__ieee754_rem_pio2f+0x24c>
 8005a00:	eee6 7a25 	vfma.f32	s15, s12, s11
 8005a04:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8005a08:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005a0c:	ed84 7a00 	vstr	s14, [r4]
 8005a10:	e7b4      	b.n	800597c <__ieee754_rem_pio2f+0xec>
 8005a12:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8005a16:	db06      	blt.n	8005a26 <__ieee754_rem_pio2f+0x196>
 8005a18:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005a1c:	edc0 7a01 	vstr	s15, [r0, #4]
 8005a20:	edc0 7a00 	vstr	s15, [r0]
 8005a24:	e742      	b.n	80058ac <__ieee754_rem_pio2f+0x1c>
 8005a26:	15ea      	asrs	r2, r5, #23
 8005a28:	3a86      	subs	r2, #134	; 0x86
 8005a2a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8005a2e:	ee07 3a90 	vmov	s15, r3
 8005a32:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005a36:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8005ae0 <__ieee754_rem_pio2f+0x250>
 8005a3a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005a3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a42:	ed8d 7a03 	vstr	s14, [sp, #12]
 8005a46:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005a4a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005a4e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005a52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a56:	ed8d 7a04 	vstr	s14, [sp, #16]
 8005a5a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005a5e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a66:	edcd 7a05 	vstr	s15, [sp, #20]
 8005a6a:	d11e      	bne.n	8005aaa <__ieee754_rem_pio2f+0x21a>
 8005a6c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a74:	bf14      	ite	ne
 8005a76:	2302      	movne	r3, #2
 8005a78:	2301      	moveq	r3, #1
 8005a7a:	491a      	ldr	r1, [pc, #104]	; (8005ae4 <__ieee754_rem_pio2f+0x254>)
 8005a7c:	9101      	str	r1, [sp, #4]
 8005a7e:	2102      	movs	r1, #2
 8005a80:	9100      	str	r1, [sp, #0]
 8005a82:	a803      	add	r0, sp, #12
 8005a84:	4621      	mov	r1, r4
 8005a86:	f000 f837 	bl	8005af8 <__kernel_rem_pio2f>
 8005a8a:	2e00      	cmp	r6, #0
 8005a8c:	f6bf af31 	bge.w	80058f2 <__ieee754_rem_pio2f+0x62>
 8005a90:	edd4 7a00 	vldr	s15, [r4]
 8005a94:	eef1 7a67 	vneg.f32	s15, s15
 8005a98:	edc4 7a00 	vstr	s15, [r4]
 8005a9c:	edd4 7a01 	vldr	s15, [r4, #4]
 8005aa0:	eef1 7a67 	vneg.f32	s15, s15
 8005aa4:	edc4 7a01 	vstr	s15, [r4, #4]
 8005aa8:	e77a      	b.n	80059a0 <__ieee754_rem_pio2f+0x110>
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e7e5      	b.n	8005a7a <__ieee754_rem_pio2f+0x1ea>
 8005aae:	bf00      	nop
 8005ab0:	3f490fd8 	.word	0x3f490fd8
 8005ab4:	4016cbe3 	.word	0x4016cbe3
 8005ab8:	3fc90f80 	.word	0x3fc90f80
 8005abc:	3fc90fd0 	.word	0x3fc90fd0
 8005ac0:	37354400 	.word	0x37354400
 8005ac4:	37354443 	.word	0x37354443
 8005ac8:	2e85a308 	.word	0x2e85a308
 8005acc:	43490f80 	.word	0x43490f80
 8005ad0:	3f22f984 	.word	0x3f22f984
 8005ad4:	0800ab18 	.word	0x0800ab18
 8005ad8:	2e85a300 	.word	0x2e85a300
 8005adc:	248d3132 	.word	0x248d3132
 8005ae0:	43800000 	.word	0x43800000
 8005ae4:	0800ab98 	.word	0x0800ab98

08005ae8 <fabsf>:
 8005ae8:	ee10 3a10 	vmov	r3, s0
 8005aec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005af0:	ee00 3a10 	vmov	s0, r3
 8005af4:	4770      	bx	lr
	...

08005af8 <__kernel_rem_pio2f>:
 8005af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005afc:	ed2d 8b04 	vpush	{d8-d9}
 8005b00:	b0d9      	sub	sp, #356	; 0x164
 8005b02:	4688      	mov	r8, r1
 8005b04:	9002      	str	r0, [sp, #8]
 8005b06:	49b8      	ldr	r1, [pc, #736]	; (8005de8 <__kernel_rem_pio2f+0x2f0>)
 8005b08:	9866      	ldr	r0, [sp, #408]	; 0x198
 8005b0a:	9301      	str	r3, [sp, #4]
 8005b0c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8005b10:	9901      	ldr	r1, [sp, #4]
 8005b12:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8005b14:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 8005b18:	1d11      	adds	r1, r2, #4
 8005b1a:	db25      	blt.n	8005b68 <__kernel_rem_pio2f+0x70>
 8005b1c:	1ed0      	subs	r0, r2, #3
 8005b1e:	bf48      	it	mi
 8005b20:	1d10      	addmi	r0, r2, #4
 8005b22:	10c0      	asrs	r0, r0, #3
 8005b24:	1c45      	adds	r5, r0, #1
 8005b26:	00e9      	lsls	r1, r5, #3
 8005b28:	eba0 070b 	sub.w	r7, r0, fp
 8005b2c:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8005df8 <__kernel_rem_pio2f+0x300>
 8005b30:	9103      	str	r1, [sp, #12]
 8005b32:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8005b36:	eb0a 0c0b 	add.w	ip, sl, fp
 8005b3a:	ae1c      	add	r6, sp, #112	; 0x70
 8005b3c:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8005b40:	2400      	movs	r4, #0
 8005b42:	4564      	cmp	r4, ip
 8005b44:	dd12      	ble.n	8005b6c <__kernel_rem_pio2f+0x74>
 8005b46:	9901      	ldr	r1, [sp, #4]
 8005b48:	ac1c      	add	r4, sp, #112	; 0x70
 8005b4a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8005b4e:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8005b52:	f04f 0c00 	mov.w	ip, #0
 8005b56:	45d4      	cmp	ip, sl
 8005b58:	dc27      	bgt.n	8005baa <__kernel_rem_pio2f+0xb2>
 8005b5a:	f8dd e008 	ldr.w	lr, [sp, #8]
 8005b5e:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8005df8 <__kernel_rem_pio2f+0x300>
 8005b62:	4627      	mov	r7, r4
 8005b64:	2600      	movs	r6, #0
 8005b66:	e016      	b.n	8005b96 <__kernel_rem_pio2f+0x9e>
 8005b68:	2000      	movs	r0, #0
 8005b6a:	e7db      	b.n	8005b24 <__kernel_rem_pio2f+0x2c>
 8005b6c:	42e7      	cmn	r7, r4
 8005b6e:	bf5d      	ittte	pl
 8005b70:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 8005b74:	ee07 1a90 	vmovpl	s15, r1
 8005b78:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8005b7c:	eef0 7a47 	vmovmi.f32	s15, s14
 8005b80:	ece6 7a01 	vstmia	r6!, {s15}
 8005b84:	3401      	adds	r4, #1
 8005b86:	e7dc      	b.n	8005b42 <__kernel_rem_pio2f+0x4a>
 8005b88:	ecfe 6a01 	vldmia	lr!, {s13}
 8005b8c:	ed97 7a00 	vldr	s14, [r7]
 8005b90:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005b94:	3601      	adds	r6, #1
 8005b96:	455e      	cmp	r6, fp
 8005b98:	f1a7 0704 	sub.w	r7, r7, #4
 8005b9c:	ddf4      	ble.n	8005b88 <__kernel_rem_pio2f+0x90>
 8005b9e:	ece9 7a01 	vstmia	r9!, {s15}
 8005ba2:	f10c 0c01 	add.w	ip, ip, #1
 8005ba6:	3404      	adds	r4, #4
 8005ba8:	e7d5      	b.n	8005b56 <__kernel_rem_pio2f+0x5e>
 8005baa:	a908      	add	r1, sp, #32
 8005bac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005bb0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8005bb4:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8005df4 <__kernel_rem_pio2f+0x2fc>
 8005bb8:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8005df0 <__kernel_rem_pio2f+0x2f8>
 8005bbc:	9105      	str	r1, [sp, #20]
 8005bbe:	9304      	str	r3, [sp, #16]
 8005bc0:	4656      	mov	r6, sl
 8005bc2:	00b3      	lsls	r3, r6, #2
 8005bc4:	9306      	str	r3, [sp, #24]
 8005bc6:	ab58      	add	r3, sp, #352	; 0x160
 8005bc8:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8005bcc:	ac08      	add	r4, sp, #32
 8005bce:	ab44      	add	r3, sp, #272	; 0x110
 8005bd0:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8005bd4:	46a4      	mov	ip, r4
 8005bd6:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8005bda:	4637      	mov	r7, r6
 8005bdc:	2f00      	cmp	r7, #0
 8005bde:	f1a0 0004 	sub.w	r0, r0, #4
 8005be2:	dc4a      	bgt.n	8005c7a <__kernel_rem_pio2f+0x182>
 8005be4:	4628      	mov	r0, r5
 8005be6:	9207      	str	r2, [sp, #28]
 8005be8:	f000 f9f8 	bl	8005fdc <scalbnf>
 8005bec:	eeb0 8a40 	vmov.f32	s16, s0
 8005bf0:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8005bf4:	ee28 0a00 	vmul.f32	s0, s16, s0
 8005bf8:	f000 fa56 	bl	80060a8 <floorf>
 8005bfc:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8005c00:	eea0 8a67 	vfms.f32	s16, s0, s15
 8005c04:	2d00      	cmp	r5, #0
 8005c06:	9a07      	ldr	r2, [sp, #28]
 8005c08:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8005c0c:	ee17 9a90 	vmov	r9, s15
 8005c10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c14:	ee38 8a67 	vsub.f32	s16, s16, s15
 8005c18:	dd41      	ble.n	8005c9e <__kernel_rem_pio2f+0x1a6>
 8005c1a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8005c1e:	ab08      	add	r3, sp, #32
 8005c20:	f1c5 0e08 	rsb	lr, r5, #8
 8005c24:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8005c28:	fa47 f00e 	asr.w	r0, r7, lr
 8005c2c:	4481      	add	r9, r0
 8005c2e:	fa00 f00e 	lsl.w	r0, r0, lr
 8005c32:	1a3f      	subs	r7, r7, r0
 8005c34:	f1c5 0007 	rsb	r0, r5, #7
 8005c38:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8005c3c:	4107      	asrs	r7, r0
 8005c3e:	2f00      	cmp	r7, #0
 8005c40:	dd3c      	ble.n	8005cbc <__kernel_rem_pio2f+0x1c4>
 8005c42:	f04f 0e00 	mov.w	lr, #0
 8005c46:	f109 0901 	add.w	r9, r9, #1
 8005c4a:	4671      	mov	r1, lr
 8005c4c:	4576      	cmp	r6, lr
 8005c4e:	dc67      	bgt.n	8005d20 <__kernel_rem_pio2f+0x228>
 8005c50:	2d00      	cmp	r5, #0
 8005c52:	dd03      	ble.n	8005c5c <__kernel_rem_pio2f+0x164>
 8005c54:	2d01      	cmp	r5, #1
 8005c56:	d074      	beq.n	8005d42 <__kernel_rem_pio2f+0x24a>
 8005c58:	2d02      	cmp	r5, #2
 8005c5a:	d07b      	beq.n	8005d54 <__kernel_rem_pio2f+0x25c>
 8005c5c:	2f02      	cmp	r7, #2
 8005c5e:	d12d      	bne.n	8005cbc <__kernel_rem_pio2f+0x1c4>
 8005c60:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005c64:	ee30 8a48 	vsub.f32	s16, s0, s16
 8005c68:	b341      	cbz	r1, 8005cbc <__kernel_rem_pio2f+0x1c4>
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	9207      	str	r2, [sp, #28]
 8005c6e:	f000 f9b5 	bl	8005fdc <scalbnf>
 8005c72:	9a07      	ldr	r2, [sp, #28]
 8005c74:	ee38 8a40 	vsub.f32	s16, s16, s0
 8005c78:	e020      	b.n	8005cbc <__kernel_rem_pio2f+0x1c4>
 8005c7a:	ee60 7a28 	vmul.f32	s15, s0, s17
 8005c7e:	3f01      	subs	r7, #1
 8005c80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c88:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8005c8c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005c90:	ecac 0a01 	vstmia	ip!, {s0}
 8005c94:	ed90 0a00 	vldr	s0, [r0]
 8005c98:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005c9c:	e79e      	b.n	8005bdc <__kernel_rem_pio2f+0xe4>
 8005c9e:	d105      	bne.n	8005cac <__kernel_rem_pio2f+0x1b4>
 8005ca0:	1e70      	subs	r0, r6, #1
 8005ca2:	ab08      	add	r3, sp, #32
 8005ca4:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8005ca8:	11ff      	asrs	r7, r7, #7
 8005caa:	e7c8      	b.n	8005c3e <__kernel_rem_pio2f+0x146>
 8005cac:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005cb0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cb8:	da30      	bge.n	8005d1c <__kernel_rem_pio2f+0x224>
 8005cba:	2700      	movs	r7, #0
 8005cbc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8005cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cc4:	f040 809a 	bne.w	8005dfc <__kernel_rem_pio2f+0x304>
 8005cc8:	1e74      	subs	r4, r6, #1
 8005cca:	46a4      	mov	ip, r4
 8005ccc:	2100      	movs	r1, #0
 8005cce:	45d4      	cmp	ip, sl
 8005cd0:	da47      	bge.n	8005d62 <__kernel_rem_pio2f+0x26a>
 8005cd2:	2900      	cmp	r1, #0
 8005cd4:	d063      	beq.n	8005d9e <__kernel_rem_pio2f+0x2a6>
 8005cd6:	ab08      	add	r3, sp, #32
 8005cd8:	3d08      	subs	r5, #8
 8005cda:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d07f      	beq.n	8005de2 <__kernel_rem_pio2f+0x2ea>
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005ce8:	f000 f978 	bl	8005fdc <scalbnf>
 8005cec:	1c63      	adds	r3, r4, #1
 8005cee:	aa44      	add	r2, sp, #272	; 0x110
 8005cf0:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8005df4 <__kernel_rem_pio2f+0x2fc>
 8005cf4:	0099      	lsls	r1, r3, #2
 8005cf6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005cfa:	4623      	mov	r3, r4
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f280 80ad 	bge.w	8005e5c <__kernel_rem_pio2f+0x364>
 8005d02:	4623      	mov	r3, r4
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f2c0 80cb 	blt.w	8005ea0 <__kernel_rem_pio2f+0x3a8>
 8005d0a:	aa44      	add	r2, sp, #272	; 0x110
 8005d0c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8005d10:	4e36      	ldr	r6, [pc, #216]	; (8005dec <__kernel_rem_pio2f+0x2f4>)
 8005d12:	eddf 7a39 	vldr	s15, [pc, #228]	; 8005df8 <__kernel_rem_pio2f+0x300>
 8005d16:	2000      	movs	r0, #0
 8005d18:	1ae2      	subs	r2, r4, r3
 8005d1a:	e0b6      	b.n	8005e8a <__kernel_rem_pio2f+0x392>
 8005d1c:	2702      	movs	r7, #2
 8005d1e:	e790      	b.n	8005c42 <__kernel_rem_pio2f+0x14a>
 8005d20:	6820      	ldr	r0, [r4, #0]
 8005d22:	b949      	cbnz	r1, 8005d38 <__kernel_rem_pio2f+0x240>
 8005d24:	b118      	cbz	r0, 8005d2e <__kernel_rem_pio2f+0x236>
 8005d26:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8005d2a:	6020      	str	r0, [r4, #0]
 8005d2c:	2001      	movs	r0, #1
 8005d2e:	f10e 0e01 	add.w	lr, lr, #1
 8005d32:	3404      	adds	r4, #4
 8005d34:	4601      	mov	r1, r0
 8005d36:	e789      	b.n	8005c4c <__kernel_rem_pio2f+0x154>
 8005d38:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8005d3c:	6020      	str	r0, [r4, #0]
 8005d3e:	4608      	mov	r0, r1
 8005d40:	e7f5      	b.n	8005d2e <__kernel_rem_pio2f+0x236>
 8005d42:	1e74      	subs	r4, r6, #1
 8005d44:	ab08      	add	r3, sp, #32
 8005d46:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005d4a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8005d4e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005d52:	e783      	b.n	8005c5c <__kernel_rem_pio2f+0x164>
 8005d54:	1e74      	subs	r4, r6, #1
 8005d56:	ab08      	add	r3, sp, #32
 8005d58:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005d5c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8005d60:	e7f5      	b.n	8005d4e <__kernel_rem_pio2f+0x256>
 8005d62:	ab08      	add	r3, sp, #32
 8005d64:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8005d68:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8005d6c:	4301      	orrs	r1, r0
 8005d6e:	e7ae      	b.n	8005cce <__kernel_rem_pio2f+0x1d6>
 8005d70:	3001      	adds	r0, #1
 8005d72:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 8005d76:	2f00      	cmp	r7, #0
 8005d78:	d0fa      	beq.n	8005d70 <__kernel_rem_pio2f+0x278>
 8005d7a:	9b06      	ldr	r3, [sp, #24]
 8005d7c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8005d80:	eb0d 0403 	add.w	r4, sp, r3
 8005d84:	9b01      	ldr	r3, [sp, #4]
 8005d86:	18f7      	adds	r7, r6, r3
 8005d88:	ab1c      	add	r3, sp, #112	; 0x70
 8005d8a:	f106 0c01 	add.w	ip, r6, #1
 8005d8e:	3c4c      	subs	r4, #76	; 0x4c
 8005d90:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005d94:	4430      	add	r0, r6
 8005d96:	4560      	cmp	r0, ip
 8005d98:	da04      	bge.n	8005da4 <__kernel_rem_pio2f+0x2ac>
 8005d9a:	4606      	mov	r6, r0
 8005d9c:	e711      	b.n	8005bc2 <__kernel_rem_pio2f+0xca>
 8005d9e:	9c05      	ldr	r4, [sp, #20]
 8005da0:	2001      	movs	r0, #1
 8005da2:	e7e6      	b.n	8005d72 <__kernel_rem_pio2f+0x27a>
 8005da4:	9b04      	ldr	r3, [sp, #16]
 8005da6:	f8dd e008 	ldr.w	lr, [sp, #8]
 8005daa:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8005dae:	9306      	str	r3, [sp, #24]
 8005db0:	ee07 3a90 	vmov	s15, r3
 8005db4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005db8:	2600      	movs	r6, #0
 8005dba:	ece7 7a01 	vstmia	r7!, {s15}
 8005dbe:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8005df8 <__kernel_rem_pio2f+0x300>
 8005dc2:	46b9      	mov	r9, r7
 8005dc4:	455e      	cmp	r6, fp
 8005dc6:	dd04      	ble.n	8005dd2 <__kernel_rem_pio2f+0x2da>
 8005dc8:	ece4 7a01 	vstmia	r4!, {s15}
 8005dcc:	f10c 0c01 	add.w	ip, ip, #1
 8005dd0:	e7e1      	b.n	8005d96 <__kernel_rem_pio2f+0x29e>
 8005dd2:	ecfe 6a01 	vldmia	lr!, {s13}
 8005dd6:	ed39 7a01 	vldmdb	r9!, {s14}
 8005dda:	3601      	adds	r6, #1
 8005ddc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005de0:	e7f0      	b.n	8005dc4 <__kernel_rem_pio2f+0x2cc>
 8005de2:	3c01      	subs	r4, #1
 8005de4:	e777      	b.n	8005cd6 <__kernel_rem_pio2f+0x1de>
 8005de6:	bf00      	nop
 8005de8:	0800aedc 	.word	0x0800aedc
 8005dec:	0800aeb0 	.word	0x0800aeb0
 8005df0:	43800000 	.word	0x43800000
 8005df4:	3b800000 	.word	0x3b800000
 8005df8:	00000000 	.word	0x00000000
 8005dfc:	9b03      	ldr	r3, [sp, #12]
 8005dfe:	eeb0 0a48 	vmov.f32	s0, s16
 8005e02:	1a98      	subs	r0, r3, r2
 8005e04:	f000 f8ea 	bl	8005fdc <scalbnf>
 8005e08:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8005df0 <__kernel_rem_pio2f+0x2f8>
 8005e0c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8005e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e14:	db19      	blt.n	8005e4a <__kernel_rem_pio2f+0x352>
 8005e16:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8005df4 <__kernel_rem_pio2f+0x2fc>
 8005e1a:	ee60 7a27 	vmul.f32	s15, s0, s15
 8005e1e:	aa08      	add	r2, sp, #32
 8005e20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e24:	1c74      	adds	r4, r6, #1
 8005e26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e2a:	3508      	adds	r5, #8
 8005e2c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8005e30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e34:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005e38:	ee10 3a10 	vmov	r3, s0
 8005e3c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8005e40:	ee17 3a90 	vmov	r3, s15
 8005e44:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8005e48:	e74b      	b.n	8005ce2 <__kernel_rem_pio2f+0x1ea>
 8005e4a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005e4e:	aa08      	add	r2, sp, #32
 8005e50:	ee10 3a10 	vmov	r3, s0
 8005e54:	4634      	mov	r4, r6
 8005e56:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8005e5a:	e742      	b.n	8005ce2 <__kernel_rem_pio2f+0x1ea>
 8005e5c:	a808      	add	r0, sp, #32
 8005e5e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8005e62:	9001      	str	r0, [sp, #4]
 8005e64:	ee07 0a90 	vmov	s15, r0
 8005e68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005e72:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005e76:	ed62 7a01 	vstmdb	r2!, {s15}
 8005e7a:	e73f      	b.n	8005cfc <__kernel_rem_pio2f+0x204>
 8005e7c:	ecf6 6a01 	vldmia	r6!, {s13}
 8005e80:	ecb5 7a01 	vldmia	r5!, {s14}
 8005e84:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005e88:	3001      	adds	r0, #1
 8005e8a:	4550      	cmp	r0, sl
 8005e8c:	dc01      	bgt.n	8005e92 <__kernel_rem_pio2f+0x39a>
 8005e8e:	4290      	cmp	r0, r2
 8005e90:	ddf4      	ble.n	8005e7c <__kernel_rem_pio2f+0x384>
 8005e92:	a858      	add	r0, sp, #352	; 0x160
 8005e94:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005e98:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	e731      	b.n	8005d04 <__kernel_rem_pio2f+0x20c>
 8005ea0:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	dc09      	bgt.n	8005eba <__kernel_rem_pio2f+0x3c2>
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	dc2b      	bgt.n	8005f02 <__kernel_rem_pio2f+0x40a>
 8005eaa:	d044      	beq.n	8005f36 <__kernel_rem_pio2f+0x43e>
 8005eac:	f009 0007 	and.w	r0, r9, #7
 8005eb0:	b059      	add	sp, #356	; 0x164
 8005eb2:	ecbd 8b04 	vpop	{d8-d9}
 8005eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eba:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8005ebc:	2b03      	cmp	r3, #3
 8005ebe:	d1f5      	bne.n	8005eac <__kernel_rem_pio2f+0x3b4>
 8005ec0:	aa30      	add	r2, sp, #192	; 0xc0
 8005ec2:	1f0b      	subs	r3, r1, #4
 8005ec4:	4413      	add	r3, r2
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	4620      	mov	r0, r4
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	f1a2 0204 	sub.w	r2, r2, #4
 8005ed0:	dc52      	bgt.n	8005f78 <__kernel_rem_pio2f+0x480>
 8005ed2:	4622      	mov	r2, r4
 8005ed4:	2a01      	cmp	r2, #1
 8005ed6:	f1a3 0304 	sub.w	r3, r3, #4
 8005eda:	dc5d      	bgt.n	8005f98 <__kernel_rem_pio2f+0x4a0>
 8005edc:	ab30      	add	r3, sp, #192	; 0xc0
 8005ede:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8005df8 <__kernel_rem_pio2f+0x300>
 8005ee2:	440b      	add	r3, r1
 8005ee4:	2c01      	cmp	r4, #1
 8005ee6:	dc67      	bgt.n	8005fb8 <__kernel_rem_pio2f+0x4c0>
 8005ee8:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8005eec:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8005ef0:	2f00      	cmp	r7, #0
 8005ef2:	d167      	bne.n	8005fc4 <__kernel_rem_pio2f+0x4cc>
 8005ef4:	edc8 6a00 	vstr	s13, [r8]
 8005ef8:	ed88 7a01 	vstr	s14, [r8, #4]
 8005efc:	edc8 7a02 	vstr	s15, [r8, #8]
 8005f00:	e7d4      	b.n	8005eac <__kernel_rem_pio2f+0x3b4>
 8005f02:	ab30      	add	r3, sp, #192	; 0xc0
 8005f04:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8005df8 <__kernel_rem_pio2f+0x300>
 8005f08:	440b      	add	r3, r1
 8005f0a:	4622      	mov	r2, r4
 8005f0c:	2a00      	cmp	r2, #0
 8005f0e:	da24      	bge.n	8005f5a <__kernel_rem_pio2f+0x462>
 8005f10:	b34f      	cbz	r7, 8005f66 <__kernel_rem_pio2f+0x46e>
 8005f12:	eef1 7a47 	vneg.f32	s15, s14
 8005f16:	edc8 7a00 	vstr	s15, [r8]
 8005f1a:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8005f1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005f22:	aa31      	add	r2, sp, #196	; 0xc4
 8005f24:	2301      	movs	r3, #1
 8005f26:	429c      	cmp	r4, r3
 8005f28:	da20      	bge.n	8005f6c <__kernel_rem_pio2f+0x474>
 8005f2a:	b10f      	cbz	r7, 8005f30 <__kernel_rem_pio2f+0x438>
 8005f2c:	eef1 7a67 	vneg.f32	s15, s15
 8005f30:	edc8 7a01 	vstr	s15, [r8, #4]
 8005f34:	e7ba      	b.n	8005eac <__kernel_rem_pio2f+0x3b4>
 8005f36:	ab30      	add	r3, sp, #192	; 0xc0
 8005f38:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8005df8 <__kernel_rem_pio2f+0x300>
 8005f3c:	440b      	add	r3, r1
 8005f3e:	2c00      	cmp	r4, #0
 8005f40:	da05      	bge.n	8005f4e <__kernel_rem_pio2f+0x456>
 8005f42:	b10f      	cbz	r7, 8005f48 <__kernel_rem_pio2f+0x450>
 8005f44:	eef1 7a67 	vneg.f32	s15, s15
 8005f48:	edc8 7a00 	vstr	s15, [r8]
 8005f4c:	e7ae      	b.n	8005eac <__kernel_rem_pio2f+0x3b4>
 8005f4e:	ed33 7a01 	vldmdb	r3!, {s14}
 8005f52:	3c01      	subs	r4, #1
 8005f54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f58:	e7f1      	b.n	8005f3e <__kernel_rem_pio2f+0x446>
 8005f5a:	ed73 7a01 	vldmdb	r3!, {s15}
 8005f5e:	3a01      	subs	r2, #1
 8005f60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f64:	e7d2      	b.n	8005f0c <__kernel_rem_pio2f+0x414>
 8005f66:	eef0 7a47 	vmov.f32	s15, s14
 8005f6a:	e7d4      	b.n	8005f16 <__kernel_rem_pio2f+0x41e>
 8005f6c:	ecb2 7a01 	vldmia	r2!, {s14}
 8005f70:	3301      	adds	r3, #1
 8005f72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f76:	e7d6      	b.n	8005f26 <__kernel_rem_pio2f+0x42e>
 8005f78:	edd2 7a00 	vldr	s15, [r2]
 8005f7c:	edd2 6a01 	vldr	s13, [r2, #4]
 8005f80:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005f84:	3801      	subs	r0, #1
 8005f86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005f8a:	ed82 7a00 	vstr	s14, [r2]
 8005f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f92:	edc2 7a01 	vstr	s15, [r2, #4]
 8005f96:	e798      	b.n	8005eca <__kernel_rem_pio2f+0x3d2>
 8005f98:	edd3 7a00 	vldr	s15, [r3]
 8005f9c:	edd3 6a01 	vldr	s13, [r3, #4]
 8005fa0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005fa4:	3a01      	subs	r2, #1
 8005fa6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005faa:	ed83 7a00 	vstr	s14, [r3]
 8005fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fb2:	edc3 7a01 	vstr	s15, [r3, #4]
 8005fb6:	e78d      	b.n	8005ed4 <__kernel_rem_pio2f+0x3dc>
 8005fb8:	ed33 7a01 	vldmdb	r3!, {s14}
 8005fbc:	3c01      	subs	r4, #1
 8005fbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005fc2:	e78f      	b.n	8005ee4 <__kernel_rem_pio2f+0x3ec>
 8005fc4:	eef1 6a66 	vneg.f32	s13, s13
 8005fc8:	eeb1 7a47 	vneg.f32	s14, s14
 8005fcc:	edc8 6a00 	vstr	s13, [r8]
 8005fd0:	ed88 7a01 	vstr	s14, [r8, #4]
 8005fd4:	eef1 7a67 	vneg.f32	s15, s15
 8005fd8:	e790      	b.n	8005efc <__kernel_rem_pio2f+0x404>
 8005fda:	bf00      	nop

08005fdc <scalbnf>:
 8005fdc:	ee10 3a10 	vmov	r3, s0
 8005fe0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8005fe4:	d02b      	beq.n	800603e <scalbnf+0x62>
 8005fe6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005fea:	d302      	bcc.n	8005ff2 <scalbnf+0x16>
 8005fec:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005ff0:	4770      	bx	lr
 8005ff2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8005ff6:	d123      	bne.n	8006040 <scalbnf+0x64>
 8005ff8:	4b24      	ldr	r3, [pc, #144]	; (800608c <scalbnf+0xb0>)
 8005ffa:	eddf 7a25 	vldr	s15, [pc, #148]	; 8006090 <scalbnf+0xb4>
 8005ffe:	4298      	cmp	r0, r3
 8006000:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006004:	db17      	blt.n	8006036 <scalbnf+0x5a>
 8006006:	ee10 3a10 	vmov	r3, s0
 800600a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800600e:	3a19      	subs	r2, #25
 8006010:	f24c 3150 	movw	r1, #50000	; 0xc350
 8006014:	4288      	cmp	r0, r1
 8006016:	dd15      	ble.n	8006044 <scalbnf+0x68>
 8006018:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8006094 <scalbnf+0xb8>
 800601c:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8006098 <scalbnf+0xbc>
 8006020:	ee10 3a10 	vmov	r3, s0
 8006024:	eeb0 7a67 	vmov.f32	s14, s15
 8006028:	2b00      	cmp	r3, #0
 800602a:	bfb8      	it	lt
 800602c:	eef0 7a66 	vmovlt.f32	s15, s13
 8006030:	ee27 0a87 	vmul.f32	s0, s15, s14
 8006034:	4770      	bx	lr
 8006036:	eddf 7a19 	vldr	s15, [pc, #100]	; 800609c <scalbnf+0xc0>
 800603a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800603e:	4770      	bx	lr
 8006040:	0dd2      	lsrs	r2, r2, #23
 8006042:	e7e5      	b.n	8006010 <scalbnf+0x34>
 8006044:	4410      	add	r0, r2
 8006046:	28fe      	cmp	r0, #254	; 0xfe
 8006048:	dce6      	bgt.n	8006018 <scalbnf+0x3c>
 800604a:	2800      	cmp	r0, #0
 800604c:	dd06      	ble.n	800605c <scalbnf+0x80>
 800604e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006052:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006056:	ee00 3a10 	vmov	s0, r3
 800605a:	4770      	bx	lr
 800605c:	f110 0f16 	cmn.w	r0, #22
 8006060:	da09      	bge.n	8006076 <scalbnf+0x9a>
 8006062:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800609c <scalbnf+0xc0>
 8006066:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80060a0 <scalbnf+0xc4>
 800606a:	ee10 3a10 	vmov	r3, s0
 800606e:	eeb0 7a67 	vmov.f32	s14, s15
 8006072:	2b00      	cmp	r3, #0
 8006074:	e7d9      	b.n	800602a <scalbnf+0x4e>
 8006076:	3019      	adds	r0, #25
 8006078:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800607c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006080:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80060a4 <scalbnf+0xc8>
 8006084:	ee07 3a90 	vmov	s15, r3
 8006088:	e7d7      	b.n	800603a <scalbnf+0x5e>
 800608a:	bf00      	nop
 800608c:	ffff3cb0 	.word	0xffff3cb0
 8006090:	4c000000 	.word	0x4c000000
 8006094:	7149f2ca 	.word	0x7149f2ca
 8006098:	f149f2ca 	.word	0xf149f2ca
 800609c:	0da24260 	.word	0x0da24260
 80060a0:	8da24260 	.word	0x8da24260
 80060a4:	33000000 	.word	0x33000000

080060a8 <floorf>:
 80060a8:	ee10 3a10 	vmov	r3, s0
 80060ac:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80060b0:	3a7f      	subs	r2, #127	; 0x7f
 80060b2:	2a16      	cmp	r2, #22
 80060b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80060b8:	dc2a      	bgt.n	8006110 <floorf+0x68>
 80060ba:	2a00      	cmp	r2, #0
 80060bc:	da11      	bge.n	80060e2 <floorf+0x3a>
 80060be:	eddf 7a18 	vldr	s15, [pc, #96]	; 8006120 <floorf+0x78>
 80060c2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80060c6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80060ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ce:	dd05      	ble.n	80060dc <floorf+0x34>
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	da23      	bge.n	800611c <floorf+0x74>
 80060d4:	4a13      	ldr	r2, [pc, #76]	; (8006124 <floorf+0x7c>)
 80060d6:	2900      	cmp	r1, #0
 80060d8:	bf18      	it	ne
 80060da:	4613      	movne	r3, r2
 80060dc:	ee00 3a10 	vmov	s0, r3
 80060e0:	4770      	bx	lr
 80060e2:	4911      	ldr	r1, [pc, #68]	; (8006128 <floorf+0x80>)
 80060e4:	4111      	asrs	r1, r2
 80060e6:	420b      	tst	r3, r1
 80060e8:	d0fa      	beq.n	80060e0 <floorf+0x38>
 80060ea:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8006120 <floorf+0x78>
 80060ee:	ee30 0a27 	vadd.f32	s0, s0, s15
 80060f2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80060f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060fa:	ddef      	ble.n	80060dc <floorf+0x34>
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	bfbe      	ittt	lt
 8006100:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8006104:	fa40 f202 	asrlt.w	r2, r0, r2
 8006108:	189b      	addlt	r3, r3, r2
 800610a:	ea23 0301 	bic.w	r3, r3, r1
 800610e:	e7e5      	b.n	80060dc <floorf+0x34>
 8006110:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006114:	d3e4      	bcc.n	80060e0 <floorf+0x38>
 8006116:	ee30 0a00 	vadd.f32	s0, s0, s0
 800611a:	4770      	bx	lr
 800611c:	2300      	movs	r3, #0
 800611e:	e7dd      	b.n	80060dc <floorf+0x34>
 8006120:	7149f2ca 	.word	0x7149f2ca
 8006124:	bf800000 	.word	0xbf800000
 8006128:	007fffff 	.word	0x007fffff

0800612c <__cvt>:
 800612c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006130:	ec55 4b10 	vmov	r4, r5, d0
 8006134:	2d00      	cmp	r5, #0
 8006136:	460e      	mov	r6, r1
 8006138:	4619      	mov	r1, r3
 800613a:	462b      	mov	r3, r5
 800613c:	bfbb      	ittet	lt
 800613e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006142:	461d      	movlt	r5, r3
 8006144:	2300      	movge	r3, #0
 8006146:	232d      	movlt	r3, #45	; 0x2d
 8006148:	700b      	strb	r3, [r1, #0]
 800614a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800614c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006150:	4691      	mov	r9, r2
 8006152:	f023 0820 	bic.w	r8, r3, #32
 8006156:	bfbc      	itt	lt
 8006158:	4622      	movlt	r2, r4
 800615a:	4614      	movlt	r4, r2
 800615c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006160:	d005      	beq.n	800616e <__cvt+0x42>
 8006162:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006166:	d100      	bne.n	800616a <__cvt+0x3e>
 8006168:	3601      	adds	r6, #1
 800616a:	2102      	movs	r1, #2
 800616c:	e000      	b.n	8006170 <__cvt+0x44>
 800616e:	2103      	movs	r1, #3
 8006170:	ab03      	add	r3, sp, #12
 8006172:	9301      	str	r3, [sp, #4]
 8006174:	ab02      	add	r3, sp, #8
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	ec45 4b10 	vmov	d0, r4, r5
 800617c:	4653      	mov	r3, sl
 800617e:	4632      	mov	r2, r6
 8006180:	f001 f8e2 	bl	8007348 <_dtoa_r>
 8006184:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006188:	4607      	mov	r7, r0
 800618a:	d102      	bne.n	8006192 <__cvt+0x66>
 800618c:	f019 0f01 	tst.w	r9, #1
 8006190:	d022      	beq.n	80061d8 <__cvt+0xac>
 8006192:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006196:	eb07 0906 	add.w	r9, r7, r6
 800619a:	d110      	bne.n	80061be <__cvt+0x92>
 800619c:	783b      	ldrb	r3, [r7, #0]
 800619e:	2b30      	cmp	r3, #48	; 0x30
 80061a0:	d10a      	bne.n	80061b8 <__cvt+0x8c>
 80061a2:	2200      	movs	r2, #0
 80061a4:	2300      	movs	r3, #0
 80061a6:	4620      	mov	r0, r4
 80061a8:	4629      	mov	r1, r5
 80061aa:	f7fa fc8d 	bl	8000ac8 <__aeabi_dcmpeq>
 80061ae:	b918      	cbnz	r0, 80061b8 <__cvt+0x8c>
 80061b0:	f1c6 0601 	rsb	r6, r6, #1
 80061b4:	f8ca 6000 	str.w	r6, [sl]
 80061b8:	f8da 3000 	ldr.w	r3, [sl]
 80061bc:	4499      	add	r9, r3
 80061be:	2200      	movs	r2, #0
 80061c0:	2300      	movs	r3, #0
 80061c2:	4620      	mov	r0, r4
 80061c4:	4629      	mov	r1, r5
 80061c6:	f7fa fc7f 	bl	8000ac8 <__aeabi_dcmpeq>
 80061ca:	b108      	cbz	r0, 80061d0 <__cvt+0xa4>
 80061cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80061d0:	2230      	movs	r2, #48	; 0x30
 80061d2:	9b03      	ldr	r3, [sp, #12]
 80061d4:	454b      	cmp	r3, r9
 80061d6:	d307      	bcc.n	80061e8 <__cvt+0xbc>
 80061d8:	9b03      	ldr	r3, [sp, #12]
 80061da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061dc:	1bdb      	subs	r3, r3, r7
 80061de:	4638      	mov	r0, r7
 80061e0:	6013      	str	r3, [r2, #0]
 80061e2:	b004      	add	sp, #16
 80061e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061e8:	1c59      	adds	r1, r3, #1
 80061ea:	9103      	str	r1, [sp, #12]
 80061ec:	701a      	strb	r2, [r3, #0]
 80061ee:	e7f0      	b.n	80061d2 <__cvt+0xa6>

080061f0 <__exponent>:
 80061f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061f2:	4603      	mov	r3, r0
 80061f4:	2900      	cmp	r1, #0
 80061f6:	bfb8      	it	lt
 80061f8:	4249      	neglt	r1, r1
 80061fa:	f803 2b02 	strb.w	r2, [r3], #2
 80061fe:	bfb4      	ite	lt
 8006200:	222d      	movlt	r2, #45	; 0x2d
 8006202:	222b      	movge	r2, #43	; 0x2b
 8006204:	2909      	cmp	r1, #9
 8006206:	7042      	strb	r2, [r0, #1]
 8006208:	dd2a      	ble.n	8006260 <__exponent+0x70>
 800620a:	f10d 0207 	add.w	r2, sp, #7
 800620e:	4617      	mov	r7, r2
 8006210:	260a      	movs	r6, #10
 8006212:	4694      	mov	ip, r2
 8006214:	fb91 f5f6 	sdiv	r5, r1, r6
 8006218:	fb06 1415 	mls	r4, r6, r5, r1
 800621c:	3430      	adds	r4, #48	; 0x30
 800621e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006222:	460c      	mov	r4, r1
 8006224:	2c63      	cmp	r4, #99	; 0x63
 8006226:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800622a:	4629      	mov	r1, r5
 800622c:	dcf1      	bgt.n	8006212 <__exponent+0x22>
 800622e:	3130      	adds	r1, #48	; 0x30
 8006230:	f1ac 0402 	sub.w	r4, ip, #2
 8006234:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006238:	1c41      	adds	r1, r0, #1
 800623a:	4622      	mov	r2, r4
 800623c:	42ba      	cmp	r2, r7
 800623e:	d30a      	bcc.n	8006256 <__exponent+0x66>
 8006240:	f10d 0209 	add.w	r2, sp, #9
 8006244:	eba2 020c 	sub.w	r2, r2, ip
 8006248:	42bc      	cmp	r4, r7
 800624a:	bf88      	it	hi
 800624c:	2200      	movhi	r2, #0
 800624e:	4413      	add	r3, r2
 8006250:	1a18      	subs	r0, r3, r0
 8006252:	b003      	add	sp, #12
 8006254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006256:	f812 5b01 	ldrb.w	r5, [r2], #1
 800625a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800625e:	e7ed      	b.n	800623c <__exponent+0x4c>
 8006260:	2330      	movs	r3, #48	; 0x30
 8006262:	3130      	adds	r1, #48	; 0x30
 8006264:	7083      	strb	r3, [r0, #2]
 8006266:	70c1      	strb	r1, [r0, #3]
 8006268:	1d03      	adds	r3, r0, #4
 800626a:	e7f1      	b.n	8006250 <__exponent+0x60>

0800626c <_printf_float>:
 800626c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006270:	ed2d 8b02 	vpush	{d8}
 8006274:	b08d      	sub	sp, #52	; 0x34
 8006276:	460c      	mov	r4, r1
 8006278:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800627c:	4616      	mov	r6, r2
 800627e:	461f      	mov	r7, r3
 8006280:	4605      	mov	r5, r0
 8006282:	f000 fef7 	bl	8007074 <_localeconv_r>
 8006286:	f8d0 a000 	ldr.w	sl, [r0]
 800628a:	4650      	mov	r0, sl
 800628c:	f7f9 fff0 	bl	8000270 <strlen>
 8006290:	2300      	movs	r3, #0
 8006292:	930a      	str	r3, [sp, #40]	; 0x28
 8006294:	6823      	ldr	r3, [r4, #0]
 8006296:	9305      	str	r3, [sp, #20]
 8006298:	f8d8 3000 	ldr.w	r3, [r8]
 800629c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80062a0:	3307      	adds	r3, #7
 80062a2:	f023 0307 	bic.w	r3, r3, #7
 80062a6:	f103 0208 	add.w	r2, r3, #8
 80062aa:	f8c8 2000 	str.w	r2, [r8]
 80062ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80062b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80062b6:	9307      	str	r3, [sp, #28]
 80062b8:	f8cd 8018 	str.w	r8, [sp, #24]
 80062bc:	ee08 0a10 	vmov	s16, r0
 80062c0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80062c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062c8:	4b9e      	ldr	r3, [pc, #632]	; (8006544 <_printf_float+0x2d8>)
 80062ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062ce:	f7fa fc2d 	bl	8000b2c <__aeabi_dcmpun>
 80062d2:	bb88      	cbnz	r0, 8006338 <_printf_float+0xcc>
 80062d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062d8:	4b9a      	ldr	r3, [pc, #616]	; (8006544 <_printf_float+0x2d8>)
 80062da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062de:	f7fa fc07 	bl	8000af0 <__aeabi_dcmple>
 80062e2:	bb48      	cbnz	r0, 8006338 <_printf_float+0xcc>
 80062e4:	2200      	movs	r2, #0
 80062e6:	2300      	movs	r3, #0
 80062e8:	4640      	mov	r0, r8
 80062ea:	4649      	mov	r1, r9
 80062ec:	f7fa fbf6 	bl	8000adc <__aeabi_dcmplt>
 80062f0:	b110      	cbz	r0, 80062f8 <_printf_float+0x8c>
 80062f2:	232d      	movs	r3, #45	; 0x2d
 80062f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062f8:	4a93      	ldr	r2, [pc, #588]	; (8006548 <_printf_float+0x2dc>)
 80062fa:	4b94      	ldr	r3, [pc, #592]	; (800654c <_printf_float+0x2e0>)
 80062fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006300:	bf94      	ite	ls
 8006302:	4690      	movls	r8, r2
 8006304:	4698      	movhi	r8, r3
 8006306:	2303      	movs	r3, #3
 8006308:	6123      	str	r3, [r4, #16]
 800630a:	9b05      	ldr	r3, [sp, #20]
 800630c:	f023 0304 	bic.w	r3, r3, #4
 8006310:	6023      	str	r3, [r4, #0]
 8006312:	f04f 0900 	mov.w	r9, #0
 8006316:	9700      	str	r7, [sp, #0]
 8006318:	4633      	mov	r3, r6
 800631a:	aa0b      	add	r2, sp, #44	; 0x2c
 800631c:	4621      	mov	r1, r4
 800631e:	4628      	mov	r0, r5
 8006320:	f000 f9da 	bl	80066d8 <_printf_common>
 8006324:	3001      	adds	r0, #1
 8006326:	f040 8090 	bne.w	800644a <_printf_float+0x1de>
 800632a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800632e:	b00d      	add	sp, #52	; 0x34
 8006330:	ecbd 8b02 	vpop	{d8}
 8006334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006338:	4642      	mov	r2, r8
 800633a:	464b      	mov	r3, r9
 800633c:	4640      	mov	r0, r8
 800633e:	4649      	mov	r1, r9
 8006340:	f7fa fbf4 	bl	8000b2c <__aeabi_dcmpun>
 8006344:	b140      	cbz	r0, 8006358 <_printf_float+0xec>
 8006346:	464b      	mov	r3, r9
 8006348:	2b00      	cmp	r3, #0
 800634a:	bfbc      	itt	lt
 800634c:	232d      	movlt	r3, #45	; 0x2d
 800634e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006352:	4a7f      	ldr	r2, [pc, #508]	; (8006550 <_printf_float+0x2e4>)
 8006354:	4b7f      	ldr	r3, [pc, #508]	; (8006554 <_printf_float+0x2e8>)
 8006356:	e7d1      	b.n	80062fc <_printf_float+0x90>
 8006358:	6863      	ldr	r3, [r4, #4]
 800635a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800635e:	9206      	str	r2, [sp, #24]
 8006360:	1c5a      	adds	r2, r3, #1
 8006362:	d13f      	bne.n	80063e4 <_printf_float+0x178>
 8006364:	2306      	movs	r3, #6
 8006366:	6063      	str	r3, [r4, #4]
 8006368:	9b05      	ldr	r3, [sp, #20]
 800636a:	6861      	ldr	r1, [r4, #4]
 800636c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006370:	2300      	movs	r3, #0
 8006372:	9303      	str	r3, [sp, #12]
 8006374:	ab0a      	add	r3, sp, #40	; 0x28
 8006376:	e9cd b301 	strd	fp, r3, [sp, #4]
 800637a:	ab09      	add	r3, sp, #36	; 0x24
 800637c:	ec49 8b10 	vmov	d0, r8, r9
 8006380:	9300      	str	r3, [sp, #0]
 8006382:	6022      	str	r2, [r4, #0]
 8006384:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006388:	4628      	mov	r0, r5
 800638a:	f7ff fecf 	bl	800612c <__cvt>
 800638e:	9b06      	ldr	r3, [sp, #24]
 8006390:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006392:	2b47      	cmp	r3, #71	; 0x47
 8006394:	4680      	mov	r8, r0
 8006396:	d108      	bne.n	80063aa <_printf_float+0x13e>
 8006398:	1cc8      	adds	r0, r1, #3
 800639a:	db02      	blt.n	80063a2 <_printf_float+0x136>
 800639c:	6863      	ldr	r3, [r4, #4]
 800639e:	4299      	cmp	r1, r3
 80063a0:	dd41      	ble.n	8006426 <_printf_float+0x1ba>
 80063a2:	f1ab 0302 	sub.w	r3, fp, #2
 80063a6:	fa5f fb83 	uxtb.w	fp, r3
 80063aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80063ae:	d820      	bhi.n	80063f2 <_printf_float+0x186>
 80063b0:	3901      	subs	r1, #1
 80063b2:	465a      	mov	r2, fp
 80063b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80063b8:	9109      	str	r1, [sp, #36]	; 0x24
 80063ba:	f7ff ff19 	bl	80061f0 <__exponent>
 80063be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063c0:	1813      	adds	r3, r2, r0
 80063c2:	2a01      	cmp	r2, #1
 80063c4:	4681      	mov	r9, r0
 80063c6:	6123      	str	r3, [r4, #16]
 80063c8:	dc02      	bgt.n	80063d0 <_printf_float+0x164>
 80063ca:	6822      	ldr	r2, [r4, #0]
 80063cc:	07d2      	lsls	r2, r2, #31
 80063ce:	d501      	bpl.n	80063d4 <_printf_float+0x168>
 80063d0:	3301      	adds	r3, #1
 80063d2:	6123      	str	r3, [r4, #16]
 80063d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d09c      	beq.n	8006316 <_printf_float+0xaa>
 80063dc:	232d      	movs	r3, #45	; 0x2d
 80063de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063e2:	e798      	b.n	8006316 <_printf_float+0xaa>
 80063e4:	9a06      	ldr	r2, [sp, #24]
 80063e6:	2a47      	cmp	r2, #71	; 0x47
 80063e8:	d1be      	bne.n	8006368 <_printf_float+0xfc>
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1bc      	bne.n	8006368 <_printf_float+0xfc>
 80063ee:	2301      	movs	r3, #1
 80063f0:	e7b9      	b.n	8006366 <_printf_float+0xfa>
 80063f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80063f6:	d118      	bne.n	800642a <_printf_float+0x1be>
 80063f8:	2900      	cmp	r1, #0
 80063fa:	6863      	ldr	r3, [r4, #4]
 80063fc:	dd0b      	ble.n	8006416 <_printf_float+0x1aa>
 80063fe:	6121      	str	r1, [r4, #16]
 8006400:	b913      	cbnz	r3, 8006408 <_printf_float+0x19c>
 8006402:	6822      	ldr	r2, [r4, #0]
 8006404:	07d0      	lsls	r0, r2, #31
 8006406:	d502      	bpl.n	800640e <_printf_float+0x1a2>
 8006408:	3301      	adds	r3, #1
 800640a:	440b      	add	r3, r1
 800640c:	6123      	str	r3, [r4, #16]
 800640e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006410:	f04f 0900 	mov.w	r9, #0
 8006414:	e7de      	b.n	80063d4 <_printf_float+0x168>
 8006416:	b913      	cbnz	r3, 800641e <_printf_float+0x1b2>
 8006418:	6822      	ldr	r2, [r4, #0]
 800641a:	07d2      	lsls	r2, r2, #31
 800641c:	d501      	bpl.n	8006422 <_printf_float+0x1b6>
 800641e:	3302      	adds	r3, #2
 8006420:	e7f4      	b.n	800640c <_printf_float+0x1a0>
 8006422:	2301      	movs	r3, #1
 8006424:	e7f2      	b.n	800640c <_printf_float+0x1a0>
 8006426:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800642a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800642c:	4299      	cmp	r1, r3
 800642e:	db05      	blt.n	800643c <_printf_float+0x1d0>
 8006430:	6823      	ldr	r3, [r4, #0]
 8006432:	6121      	str	r1, [r4, #16]
 8006434:	07d8      	lsls	r0, r3, #31
 8006436:	d5ea      	bpl.n	800640e <_printf_float+0x1a2>
 8006438:	1c4b      	adds	r3, r1, #1
 800643a:	e7e7      	b.n	800640c <_printf_float+0x1a0>
 800643c:	2900      	cmp	r1, #0
 800643e:	bfd4      	ite	le
 8006440:	f1c1 0202 	rsble	r2, r1, #2
 8006444:	2201      	movgt	r2, #1
 8006446:	4413      	add	r3, r2
 8006448:	e7e0      	b.n	800640c <_printf_float+0x1a0>
 800644a:	6823      	ldr	r3, [r4, #0]
 800644c:	055a      	lsls	r2, r3, #21
 800644e:	d407      	bmi.n	8006460 <_printf_float+0x1f4>
 8006450:	6923      	ldr	r3, [r4, #16]
 8006452:	4642      	mov	r2, r8
 8006454:	4631      	mov	r1, r6
 8006456:	4628      	mov	r0, r5
 8006458:	47b8      	blx	r7
 800645a:	3001      	adds	r0, #1
 800645c:	d12c      	bne.n	80064b8 <_printf_float+0x24c>
 800645e:	e764      	b.n	800632a <_printf_float+0xbe>
 8006460:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006464:	f240 80e0 	bls.w	8006628 <_printf_float+0x3bc>
 8006468:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800646c:	2200      	movs	r2, #0
 800646e:	2300      	movs	r3, #0
 8006470:	f7fa fb2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006474:	2800      	cmp	r0, #0
 8006476:	d034      	beq.n	80064e2 <_printf_float+0x276>
 8006478:	4a37      	ldr	r2, [pc, #220]	; (8006558 <_printf_float+0x2ec>)
 800647a:	2301      	movs	r3, #1
 800647c:	4631      	mov	r1, r6
 800647e:	4628      	mov	r0, r5
 8006480:	47b8      	blx	r7
 8006482:	3001      	adds	r0, #1
 8006484:	f43f af51 	beq.w	800632a <_printf_float+0xbe>
 8006488:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800648c:	429a      	cmp	r2, r3
 800648e:	db02      	blt.n	8006496 <_printf_float+0x22a>
 8006490:	6823      	ldr	r3, [r4, #0]
 8006492:	07d8      	lsls	r0, r3, #31
 8006494:	d510      	bpl.n	80064b8 <_printf_float+0x24c>
 8006496:	ee18 3a10 	vmov	r3, s16
 800649a:	4652      	mov	r2, sl
 800649c:	4631      	mov	r1, r6
 800649e:	4628      	mov	r0, r5
 80064a0:	47b8      	blx	r7
 80064a2:	3001      	adds	r0, #1
 80064a4:	f43f af41 	beq.w	800632a <_printf_float+0xbe>
 80064a8:	f04f 0800 	mov.w	r8, #0
 80064ac:	f104 091a 	add.w	r9, r4, #26
 80064b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064b2:	3b01      	subs	r3, #1
 80064b4:	4543      	cmp	r3, r8
 80064b6:	dc09      	bgt.n	80064cc <_printf_float+0x260>
 80064b8:	6823      	ldr	r3, [r4, #0]
 80064ba:	079b      	lsls	r3, r3, #30
 80064bc:	f100 8107 	bmi.w	80066ce <_printf_float+0x462>
 80064c0:	68e0      	ldr	r0, [r4, #12]
 80064c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064c4:	4298      	cmp	r0, r3
 80064c6:	bfb8      	it	lt
 80064c8:	4618      	movlt	r0, r3
 80064ca:	e730      	b.n	800632e <_printf_float+0xc2>
 80064cc:	2301      	movs	r3, #1
 80064ce:	464a      	mov	r2, r9
 80064d0:	4631      	mov	r1, r6
 80064d2:	4628      	mov	r0, r5
 80064d4:	47b8      	blx	r7
 80064d6:	3001      	adds	r0, #1
 80064d8:	f43f af27 	beq.w	800632a <_printf_float+0xbe>
 80064dc:	f108 0801 	add.w	r8, r8, #1
 80064e0:	e7e6      	b.n	80064b0 <_printf_float+0x244>
 80064e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	dc39      	bgt.n	800655c <_printf_float+0x2f0>
 80064e8:	4a1b      	ldr	r2, [pc, #108]	; (8006558 <_printf_float+0x2ec>)
 80064ea:	2301      	movs	r3, #1
 80064ec:	4631      	mov	r1, r6
 80064ee:	4628      	mov	r0, r5
 80064f0:	47b8      	blx	r7
 80064f2:	3001      	adds	r0, #1
 80064f4:	f43f af19 	beq.w	800632a <_printf_float+0xbe>
 80064f8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80064fc:	4313      	orrs	r3, r2
 80064fe:	d102      	bne.n	8006506 <_printf_float+0x29a>
 8006500:	6823      	ldr	r3, [r4, #0]
 8006502:	07d9      	lsls	r1, r3, #31
 8006504:	d5d8      	bpl.n	80064b8 <_printf_float+0x24c>
 8006506:	ee18 3a10 	vmov	r3, s16
 800650a:	4652      	mov	r2, sl
 800650c:	4631      	mov	r1, r6
 800650e:	4628      	mov	r0, r5
 8006510:	47b8      	blx	r7
 8006512:	3001      	adds	r0, #1
 8006514:	f43f af09 	beq.w	800632a <_printf_float+0xbe>
 8006518:	f04f 0900 	mov.w	r9, #0
 800651c:	f104 0a1a 	add.w	sl, r4, #26
 8006520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006522:	425b      	negs	r3, r3
 8006524:	454b      	cmp	r3, r9
 8006526:	dc01      	bgt.n	800652c <_printf_float+0x2c0>
 8006528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800652a:	e792      	b.n	8006452 <_printf_float+0x1e6>
 800652c:	2301      	movs	r3, #1
 800652e:	4652      	mov	r2, sl
 8006530:	4631      	mov	r1, r6
 8006532:	4628      	mov	r0, r5
 8006534:	47b8      	blx	r7
 8006536:	3001      	adds	r0, #1
 8006538:	f43f aef7 	beq.w	800632a <_printf_float+0xbe>
 800653c:	f109 0901 	add.w	r9, r9, #1
 8006540:	e7ee      	b.n	8006520 <_printf_float+0x2b4>
 8006542:	bf00      	nop
 8006544:	7fefffff 	.word	0x7fefffff
 8006548:	0800aee8 	.word	0x0800aee8
 800654c:	0800aeec 	.word	0x0800aeec
 8006550:	0800aef0 	.word	0x0800aef0
 8006554:	0800aef4 	.word	0x0800aef4
 8006558:	0800aef8 	.word	0x0800aef8
 800655c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800655e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006560:	429a      	cmp	r2, r3
 8006562:	bfa8      	it	ge
 8006564:	461a      	movge	r2, r3
 8006566:	2a00      	cmp	r2, #0
 8006568:	4691      	mov	r9, r2
 800656a:	dc37      	bgt.n	80065dc <_printf_float+0x370>
 800656c:	f04f 0b00 	mov.w	fp, #0
 8006570:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006574:	f104 021a 	add.w	r2, r4, #26
 8006578:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800657a:	9305      	str	r3, [sp, #20]
 800657c:	eba3 0309 	sub.w	r3, r3, r9
 8006580:	455b      	cmp	r3, fp
 8006582:	dc33      	bgt.n	80065ec <_printf_float+0x380>
 8006584:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006588:	429a      	cmp	r2, r3
 800658a:	db3b      	blt.n	8006604 <_printf_float+0x398>
 800658c:	6823      	ldr	r3, [r4, #0]
 800658e:	07da      	lsls	r2, r3, #31
 8006590:	d438      	bmi.n	8006604 <_printf_float+0x398>
 8006592:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006596:	eba2 0903 	sub.w	r9, r2, r3
 800659a:	9b05      	ldr	r3, [sp, #20]
 800659c:	1ad2      	subs	r2, r2, r3
 800659e:	4591      	cmp	r9, r2
 80065a0:	bfa8      	it	ge
 80065a2:	4691      	movge	r9, r2
 80065a4:	f1b9 0f00 	cmp.w	r9, #0
 80065a8:	dc35      	bgt.n	8006616 <_printf_float+0x3aa>
 80065aa:	f04f 0800 	mov.w	r8, #0
 80065ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065b2:	f104 0a1a 	add.w	sl, r4, #26
 80065b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065ba:	1a9b      	subs	r3, r3, r2
 80065bc:	eba3 0309 	sub.w	r3, r3, r9
 80065c0:	4543      	cmp	r3, r8
 80065c2:	f77f af79 	ble.w	80064b8 <_printf_float+0x24c>
 80065c6:	2301      	movs	r3, #1
 80065c8:	4652      	mov	r2, sl
 80065ca:	4631      	mov	r1, r6
 80065cc:	4628      	mov	r0, r5
 80065ce:	47b8      	blx	r7
 80065d0:	3001      	adds	r0, #1
 80065d2:	f43f aeaa 	beq.w	800632a <_printf_float+0xbe>
 80065d6:	f108 0801 	add.w	r8, r8, #1
 80065da:	e7ec      	b.n	80065b6 <_printf_float+0x34a>
 80065dc:	4613      	mov	r3, r2
 80065de:	4631      	mov	r1, r6
 80065e0:	4642      	mov	r2, r8
 80065e2:	4628      	mov	r0, r5
 80065e4:	47b8      	blx	r7
 80065e6:	3001      	adds	r0, #1
 80065e8:	d1c0      	bne.n	800656c <_printf_float+0x300>
 80065ea:	e69e      	b.n	800632a <_printf_float+0xbe>
 80065ec:	2301      	movs	r3, #1
 80065ee:	4631      	mov	r1, r6
 80065f0:	4628      	mov	r0, r5
 80065f2:	9205      	str	r2, [sp, #20]
 80065f4:	47b8      	blx	r7
 80065f6:	3001      	adds	r0, #1
 80065f8:	f43f ae97 	beq.w	800632a <_printf_float+0xbe>
 80065fc:	9a05      	ldr	r2, [sp, #20]
 80065fe:	f10b 0b01 	add.w	fp, fp, #1
 8006602:	e7b9      	b.n	8006578 <_printf_float+0x30c>
 8006604:	ee18 3a10 	vmov	r3, s16
 8006608:	4652      	mov	r2, sl
 800660a:	4631      	mov	r1, r6
 800660c:	4628      	mov	r0, r5
 800660e:	47b8      	blx	r7
 8006610:	3001      	adds	r0, #1
 8006612:	d1be      	bne.n	8006592 <_printf_float+0x326>
 8006614:	e689      	b.n	800632a <_printf_float+0xbe>
 8006616:	9a05      	ldr	r2, [sp, #20]
 8006618:	464b      	mov	r3, r9
 800661a:	4442      	add	r2, r8
 800661c:	4631      	mov	r1, r6
 800661e:	4628      	mov	r0, r5
 8006620:	47b8      	blx	r7
 8006622:	3001      	adds	r0, #1
 8006624:	d1c1      	bne.n	80065aa <_printf_float+0x33e>
 8006626:	e680      	b.n	800632a <_printf_float+0xbe>
 8006628:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800662a:	2a01      	cmp	r2, #1
 800662c:	dc01      	bgt.n	8006632 <_printf_float+0x3c6>
 800662e:	07db      	lsls	r3, r3, #31
 8006630:	d53a      	bpl.n	80066a8 <_printf_float+0x43c>
 8006632:	2301      	movs	r3, #1
 8006634:	4642      	mov	r2, r8
 8006636:	4631      	mov	r1, r6
 8006638:	4628      	mov	r0, r5
 800663a:	47b8      	blx	r7
 800663c:	3001      	adds	r0, #1
 800663e:	f43f ae74 	beq.w	800632a <_printf_float+0xbe>
 8006642:	ee18 3a10 	vmov	r3, s16
 8006646:	4652      	mov	r2, sl
 8006648:	4631      	mov	r1, r6
 800664a:	4628      	mov	r0, r5
 800664c:	47b8      	blx	r7
 800664e:	3001      	adds	r0, #1
 8006650:	f43f ae6b 	beq.w	800632a <_printf_float+0xbe>
 8006654:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006658:	2200      	movs	r2, #0
 800665a:	2300      	movs	r3, #0
 800665c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006660:	f7fa fa32 	bl	8000ac8 <__aeabi_dcmpeq>
 8006664:	b9d8      	cbnz	r0, 800669e <_printf_float+0x432>
 8006666:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800666a:	f108 0201 	add.w	r2, r8, #1
 800666e:	4631      	mov	r1, r6
 8006670:	4628      	mov	r0, r5
 8006672:	47b8      	blx	r7
 8006674:	3001      	adds	r0, #1
 8006676:	d10e      	bne.n	8006696 <_printf_float+0x42a>
 8006678:	e657      	b.n	800632a <_printf_float+0xbe>
 800667a:	2301      	movs	r3, #1
 800667c:	4652      	mov	r2, sl
 800667e:	4631      	mov	r1, r6
 8006680:	4628      	mov	r0, r5
 8006682:	47b8      	blx	r7
 8006684:	3001      	adds	r0, #1
 8006686:	f43f ae50 	beq.w	800632a <_printf_float+0xbe>
 800668a:	f108 0801 	add.w	r8, r8, #1
 800668e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006690:	3b01      	subs	r3, #1
 8006692:	4543      	cmp	r3, r8
 8006694:	dcf1      	bgt.n	800667a <_printf_float+0x40e>
 8006696:	464b      	mov	r3, r9
 8006698:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800669c:	e6da      	b.n	8006454 <_printf_float+0x1e8>
 800669e:	f04f 0800 	mov.w	r8, #0
 80066a2:	f104 0a1a 	add.w	sl, r4, #26
 80066a6:	e7f2      	b.n	800668e <_printf_float+0x422>
 80066a8:	2301      	movs	r3, #1
 80066aa:	4642      	mov	r2, r8
 80066ac:	e7df      	b.n	800666e <_printf_float+0x402>
 80066ae:	2301      	movs	r3, #1
 80066b0:	464a      	mov	r2, r9
 80066b2:	4631      	mov	r1, r6
 80066b4:	4628      	mov	r0, r5
 80066b6:	47b8      	blx	r7
 80066b8:	3001      	adds	r0, #1
 80066ba:	f43f ae36 	beq.w	800632a <_printf_float+0xbe>
 80066be:	f108 0801 	add.w	r8, r8, #1
 80066c2:	68e3      	ldr	r3, [r4, #12]
 80066c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80066c6:	1a5b      	subs	r3, r3, r1
 80066c8:	4543      	cmp	r3, r8
 80066ca:	dcf0      	bgt.n	80066ae <_printf_float+0x442>
 80066cc:	e6f8      	b.n	80064c0 <_printf_float+0x254>
 80066ce:	f04f 0800 	mov.w	r8, #0
 80066d2:	f104 0919 	add.w	r9, r4, #25
 80066d6:	e7f4      	b.n	80066c2 <_printf_float+0x456>

080066d8 <_printf_common>:
 80066d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066dc:	4616      	mov	r6, r2
 80066de:	4699      	mov	r9, r3
 80066e0:	688a      	ldr	r2, [r1, #8]
 80066e2:	690b      	ldr	r3, [r1, #16]
 80066e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066e8:	4293      	cmp	r3, r2
 80066ea:	bfb8      	it	lt
 80066ec:	4613      	movlt	r3, r2
 80066ee:	6033      	str	r3, [r6, #0]
 80066f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066f4:	4607      	mov	r7, r0
 80066f6:	460c      	mov	r4, r1
 80066f8:	b10a      	cbz	r2, 80066fe <_printf_common+0x26>
 80066fa:	3301      	adds	r3, #1
 80066fc:	6033      	str	r3, [r6, #0]
 80066fe:	6823      	ldr	r3, [r4, #0]
 8006700:	0699      	lsls	r1, r3, #26
 8006702:	bf42      	ittt	mi
 8006704:	6833      	ldrmi	r3, [r6, #0]
 8006706:	3302      	addmi	r3, #2
 8006708:	6033      	strmi	r3, [r6, #0]
 800670a:	6825      	ldr	r5, [r4, #0]
 800670c:	f015 0506 	ands.w	r5, r5, #6
 8006710:	d106      	bne.n	8006720 <_printf_common+0x48>
 8006712:	f104 0a19 	add.w	sl, r4, #25
 8006716:	68e3      	ldr	r3, [r4, #12]
 8006718:	6832      	ldr	r2, [r6, #0]
 800671a:	1a9b      	subs	r3, r3, r2
 800671c:	42ab      	cmp	r3, r5
 800671e:	dc26      	bgt.n	800676e <_printf_common+0x96>
 8006720:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006724:	1e13      	subs	r3, r2, #0
 8006726:	6822      	ldr	r2, [r4, #0]
 8006728:	bf18      	it	ne
 800672a:	2301      	movne	r3, #1
 800672c:	0692      	lsls	r2, r2, #26
 800672e:	d42b      	bmi.n	8006788 <_printf_common+0xb0>
 8006730:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006734:	4649      	mov	r1, r9
 8006736:	4638      	mov	r0, r7
 8006738:	47c0      	blx	r8
 800673a:	3001      	adds	r0, #1
 800673c:	d01e      	beq.n	800677c <_printf_common+0xa4>
 800673e:	6823      	ldr	r3, [r4, #0]
 8006740:	6922      	ldr	r2, [r4, #16]
 8006742:	f003 0306 	and.w	r3, r3, #6
 8006746:	2b04      	cmp	r3, #4
 8006748:	bf02      	ittt	eq
 800674a:	68e5      	ldreq	r5, [r4, #12]
 800674c:	6833      	ldreq	r3, [r6, #0]
 800674e:	1aed      	subeq	r5, r5, r3
 8006750:	68a3      	ldr	r3, [r4, #8]
 8006752:	bf0c      	ite	eq
 8006754:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006758:	2500      	movne	r5, #0
 800675a:	4293      	cmp	r3, r2
 800675c:	bfc4      	itt	gt
 800675e:	1a9b      	subgt	r3, r3, r2
 8006760:	18ed      	addgt	r5, r5, r3
 8006762:	2600      	movs	r6, #0
 8006764:	341a      	adds	r4, #26
 8006766:	42b5      	cmp	r5, r6
 8006768:	d11a      	bne.n	80067a0 <_printf_common+0xc8>
 800676a:	2000      	movs	r0, #0
 800676c:	e008      	b.n	8006780 <_printf_common+0xa8>
 800676e:	2301      	movs	r3, #1
 8006770:	4652      	mov	r2, sl
 8006772:	4649      	mov	r1, r9
 8006774:	4638      	mov	r0, r7
 8006776:	47c0      	blx	r8
 8006778:	3001      	adds	r0, #1
 800677a:	d103      	bne.n	8006784 <_printf_common+0xac>
 800677c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006784:	3501      	adds	r5, #1
 8006786:	e7c6      	b.n	8006716 <_printf_common+0x3e>
 8006788:	18e1      	adds	r1, r4, r3
 800678a:	1c5a      	adds	r2, r3, #1
 800678c:	2030      	movs	r0, #48	; 0x30
 800678e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006792:	4422      	add	r2, r4
 8006794:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006798:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800679c:	3302      	adds	r3, #2
 800679e:	e7c7      	b.n	8006730 <_printf_common+0x58>
 80067a0:	2301      	movs	r3, #1
 80067a2:	4622      	mov	r2, r4
 80067a4:	4649      	mov	r1, r9
 80067a6:	4638      	mov	r0, r7
 80067a8:	47c0      	blx	r8
 80067aa:	3001      	adds	r0, #1
 80067ac:	d0e6      	beq.n	800677c <_printf_common+0xa4>
 80067ae:	3601      	adds	r6, #1
 80067b0:	e7d9      	b.n	8006766 <_printf_common+0x8e>
	...

080067b4 <_printf_i>:
 80067b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067b8:	7e0f      	ldrb	r7, [r1, #24]
 80067ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067bc:	2f78      	cmp	r7, #120	; 0x78
 80067be:	4691      	mov	r9, r2
 80067c0:	4680      	mov	r8, r0
 80067c2:	460c      	mov	r4, r1
 80067c4:	469a      	mov	sl, r3
 80067c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80067ca:	d807      	bhi.n	80067dc <_printf_i+0x28>
 80067cc:	2f62      	cmp	r7, #98	; 0x62
 80067ce:	d80a      	bhi.n	80067e6 <_printf_i+0x32>
 80067d0:	2f00      	cmp	r7, #0
 80067d2:	f000 80d4 	beq.w	800697e <_printf_i+0x1ca>
 80067d6:	2f58      	cmp	r7, #88	; 0x58
 80067d8:	f000 80c0 	beq.w	800695c <_printf_i+0x1a8>
 80067dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067e4:	e03a      	b.n	800685c <_printf_i+0xa8>
 80067e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067ea:	2b15      	cmp	r3, #21
 80067ec:	d8f6      	bhi.n	80067dc <_printf_i+0x28>
 80067ee:	a101      	add	r1, pc, #4	; (adr r1, 80067f4 <_printf_i+0x40>)
 80067f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067f4:	0800684d 	.word	0x0800684d
 80067f8:	08006861 	.word	0x08006861
 80067fc:	080067dd 	.word	0x080067dd
 8006800:	080067dd 	.word	0x080067dd
 8006804:	080067dd 	.word	0x080067dd
 8006808:	080067dd 	.word	0x080067dd
 800680c:	08006861 	.word	0x08006861
 8006810:	080067dd 	.word	0x080067dd
 8006814:	080067dd 	.word	0x080067dd
 8006818:	080067dd 	.word	0x080067dd
 800681c:	080067dd 	.word	0x080067dd
 8006820:	08006965 	.word	0x08006965
 8006824:	0800688d 	.word	0x0800688d
 8006828:	0800691f 	.word	0x0800691f
 800682c:	080067dd 	.word	0x080067dd
 8006830:	080067dd 	.word	0x080067dd
 8006834:	08006987 	.word	0x08006987
 8006838:	080067dd 	.word	0x080067dd
 800683c:	0800688d 	.word	0x0800688d
 8006840:	080067dd 	.word	0x080067dd
 8006844:	080067dd 	.word	0x080067dd
 8006848:	08006927 	.word	0x08006927
 800684c:	682b      	ldr	r3, [r5, #0]
 800684e:	1d1a      	adds	r2, r3, #4
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	602a      	str	r2, [r5, #0]
 8006854:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006858:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800685c:	2301      	movs	r3, #1
 800685e:	e09f      	b.n	80069a0 <_printf_i+0x1ec>
 8006860:	6820      	ldr	r0, [r4, #0]
 8006862:	682b      	ldr	r3, [r5, #0]
 8006864:	0607      	lsls	r7, r0, #24
 8006866:	f103 0104 	add.w	r1, r3, #4
 800686a:	6029      	str	r1, [r5, #0]
 800686c:	d501      	bpl.n	8006872 <_printf_i+0xbe>
 800686e:	681e      	ldr	r6, [r3, #0]
 8006870:	e003      	b.n	800687a <_printf_i+0xc6>
 8006872:	0646      	lsls	r6, r0, #25
 8006874:	d5fb      	bpl.n	800686e <_printf_i+0xba>
 8006876:	f9b3 6000 	ldrsh.w	r6, [r3]
 800687a:	2e00      	cmp	r6, #0
 800687c:	da03      	bge.n	8006886 <_printf_i+0xd2>
 800687e:	232d      	movs	r3, #45	; 0x2d
 8006880:	4276      	negs	r6, r6
 8006882:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006886:	485a      	ldr	r0, [pc, #360]	; (80069f0 <_printf_i+0x23c>)
 8006888:	230a      	movs	r3, #10
 800688a:	e012      	b.n	80068b2 <_printf_i+0xfe>
 800688c:	682b      	ldr	r3, [r5, #0]
 800688e:	6820      	ldr	r0, [r4, #0]
 8006890:	1d19      	adds	r1, r3, #4
 8006892:	6029      	str	r1, [r5, #0]
 8006894:	0605      	lsls	r5, r0, #24
 8006896:	d501      	bpl.n	800689c <_printf_i+0xe8>
 8006898:	681e      	ldr	r6, [r3, #0]
 800689a:	e002      	b.n	80068a2 <_printf_i+0xee>
 800689c:	0641      	lsls	r1, r0, #25
 800689e:	d5fb      	bpl.n	8006898 <_printf_i+0xe4>
 80068a0:	881e      	ldrh	r6, [r3, #0]
 80068a2:	4853      	ldr	r0, [pc, #332]	; (80069f0 <_printf_i+0x23c>)
 80068a4:	2f6f      	cmp	r7, #111	; 0x6f
 80068a6:	bf0c      	ite	eq
 80068a8:	2308      	moveq	r3, #8
 80068aa:	230a      	movne	r3, #10
 80068ac:	2100      	movs	r1, #0
 80068ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068b2:	6865      	ldr	r5, [r4, #4]
 80068b4:	60a5      	str	r5, [r4, #8]
 80068b6:	2d00      	cmp	r5, #0
 80068b8:	bfa2      	ittt	ge
 80068ba:	6821      	ldrge	r1, [r4, #0]
 80068bc:	f021 0104 	bicge.w	r1, r1, #4
 80068c0:	6021      	strge	r1, [r4, #0]
 80068c2:	b90e      	cbnz	r6, 80068c8 <_printf_i+0x114>
 80068c4:	2d00      	cmp	r5, #0
 80068c6:	d04b      	beq.n	8006960 <_printf_i+0x1ac>
 80068c8:	4615      	mov	r5, r2
 80068ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80068ce:	fb03 6711 	mls	r7, r3, r1, r6
 80068d2:	5dc7      	ldrb	r7, [r0, r7]
 80068d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068d8:	4637      	mov	r7, r6
 80068da:	42bb      	cmp	r3, r7
 80068dc:	460e      	mov	r6, r1
 80068de:	d9f4      	bls.n	80068ca <_printf_i+0x116>
 80068e0:	2b08      	cmp	r3, #8
 80068e2:	d10b      	bne.n	80068fc <_printf_i+0x148>
 80068e4:	6823      	ldr	r3, [r4, #0]
 80068e6:	07de      	lsls	r6, r3, #31
 80068e8:	d508      	bpl.n	80068fc <_printf_i+0x148>
 80068ea:	6923      	ldr	r3, [r4, #16]
 80068ec:	6861      	ldr	r1, [r4, #4]
 80068ee:	4299      	cmp	r1, r3
 80068f0:	bfde      	ittt	le
 80068f2:	2330      	movle	r3, #48	; 0x30
 80068f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068f8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80068fc:	1b52      	subs	r2, r2, r5
 80068fe:	6122      	str	r2, [r4, #16]
 8006900:	f8cd a000 	str.w	sl, [sp]
 8006904:	464b      	mov	r3, r9
 8006906:	aa03      	add	r2, sp, #12
 8006908:	4621      	mov	r1, r4
 800690a:	4640      	mov	r0, r8
 800690c:	f7ff fee4 	bl	80066d8 <_printf_common>
 8006910:	3001      	adds	r0, #1
 8006912:	d14a      	bne.n	80069aa <_printf_i+0x1f6>
 8006914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006918:	b004      	add	sp, #16
 800691a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800691e:	6823      	ldr	r3, [r4, #0]
 8006920:	f043 0320 	orr.w	r3, r3, #32
 8006924:	6023      	str	r3, [r4, #0]
 8006926:	4833      	ldr	r0, [pc, #204]	; (80069f4 <_printf_i+0x240>)
 8006928:	2778      	movs	r7, #120	; 0x78
 800692a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800692e:	6823      	ldr	r3, [r4, #0]
 8006930:	6829      	ldr	r1, [r5, #0]
 8006932:	061f      	lsls	r7, r3, #24
 8006934:	f851 6b04 	ldr.w	r6, [r1], #4
 8006938:	d402      	bmi.n	8006940 <_printf_i+0x18c>
 800693a:	065f      	lsls	r7, r3, #25
 800693c:	bf48      	it	mi
 800693e:	b2b6      	uxthmi	r6, r6
 8006940:	07df      	lsls	r7, r3, #31
 8006942:	bf48      	it	mi
 8006944:	f043 0320 	orrmi.w	r3, r3, #32
 8006948:	6029      	str	r1, [r5, #0]
 800694a:	bf48      	it	mi
 800694c:	6023      	strmi	r3, [r4, #0]
 800694e:	b91e      	cbnz	r6, 8006958 <_printf_i+0x1a4>
 8006950:	6823      	ldr	r3, [r4, #0]
 8006952:	f023 0320 	bic.w	r3, r3, #32
 8006956:	6023      	str	r3, [r4, #0]
 8006958:	2310      	movs	r3, #16
 800695a:	e7a7      	b.n	80068ac <_printf_i+0xf8>
 800695c:	4824      	ldr	r0, [pc, #144]	; (80069f0 <_printf_i+0x23c>)
 800695e:	e7e4      	b.n	800692a <_printf_i+0x176>
 8006960:	4615      	mov	r5, r2
 8006962:	e7bd      	b.n	80068e0 <_printf_i+0x12c>
 8006964:	682b      	ldr	r3, [r5, #0]
 8006966:	6826      	ldr	r6, [r4, #0]
 8006968:	6961      	ldr	r1, [r4, #20]
 800696a:	1d18      	adds	r0, r3, #4
 800696c:	6028      	str	r0, [r5, #0]
 800696e:	0635      	lsls	r5, r6, #24
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	d501      	bpl.n	8006978 <_printf_i+0x1c4>
 8006974:	6019      	str	r1, [r3, #0]
 8006976:	e002      	b.n	800697e <_printf_i+0x1ca>
 8006978:	0670      	lsls	r0, r6, #25
 800697a:	d5fb      	bpl.n	8006974 <_printf_i+0x1c0>
 800697c:	8019      	strh	r1, [r3, #0]
 800697e:	2300      	movs	r3, #0
 8006980:	6123      	str	r3, [r4, #16]
 8006982:	4615      	mov	r5, r2
 8006984:	e7bc      	b.n	8006900 <_printf_i+0x14c>
 8006986:	682b      	ldr	r3, [r5, #0]
 8006988:	1d1a      	adds	r2, r3, #4
 800698a:	602a      	str	r2, [r5, #0]
 800698c:	681d      	ldr	r5, [r3, #0]
 800698e:	6862      	ldr	r2, [r4, #4]
 8006990:	2100      	movs	r1, #0
 8006992:	4628      	mov	r0, r5
 8006994:	f7f9 fc1c 	bl	80001d0 <memchr>
 8006998:	b108      	cbz	r0, 800699e <_printf_i+0x1ea>
 800699a:	1b40      	subs	r0, r0, r5
 800699c:	6060      	str	r0, [r4, #4]
 800699e:	6863      	ldr	r3, [r4, #4]
 80069a0:	6123      	str	r3, [r4, #16]
 80069a2:	2300      	movs	r3, #0
 80069a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069a8:	e7aa      	b.n	8006900 <_printf_i+0x14c>
 80069aa:	6923      	ldr	r3, [r4, #16]
 80069ac:	462a      	mov	r2, r5
 80069ae:	4649      	mov	r1, r9
 80069b0:	4640      	mov	r0, r8
 80069b2:	47d0      	blx	sl
 80069b4:	3001      	adds	r0, #1
 80069b6:	d0ad      	beq.n	8006914 <_printf_i+0x160>
 80069b8:	6823      	ldr	r3, [r4, #0]
 80069ba:	079b      	lsls	r3, r3, #30
 80069bc:	d413      	bmi.n	80069e6 <_printf_i+0x232>
 80069be:	68e0      	ldr	r0, [r4, #12]
 80069c0:	9b03      	ldr	r3, [sp, #12]
 80069c2:	4298      	cmp	r0, r3
 80069c4:	bfb8      	it	lt
 80069c6:	4618      	movlt	r0, r3
 80069c8:	e7a6      	b.n	8006918 <_printf_i+0x164>
 80069ca:	2301      	movs	r3, #1
 80069cc:	4632      	mov	r2, r6
 80069ce:	4649      	mov	r1, r9
 80069d0:	4640      	mov	r0, r8
 80069d2:	47d0      	blx	sl
 80069d4:	3001      	adds	r0, #1
 80069d6:	d09d      	beq.n	8006914 <_printf_i+0x160>
 80069d8:	3501      	adds	r5, #1
 80069da:	68e3      	ldr	r3, [r4, #12]
 80069dc:	9903      	ldr	r1, [sp, #12]
 80069de:	1a5b      	subs	r3, r3, r1
 80069e0:	42ab      	cmp	r3, r5
 80069e2:	dcf2      	bgt.n	80069ca <_printf_i+0x216>
 80069e4:	e7eb      	b.n	80069be <_printf_i+0x20a>
 80069e6:	2500      	movs	r5, #0
 80069e8:	f104 0619 	add.w	r6, r4, #25
 80069ec:	e7f5      	b.n	80069da <_printf_i+0x226>
 80069ee:	bf00      	nop
 80069f0:	0800aefa 	.word	0x0800aefa
 80069f4:	0800af0b 	.word	0x0800af0b

080069f8 <_scanf_float>:
 80069f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069fc:	b087      	sub	sp, #28
 80069fe:	4617      	mov	r7, r2
 8006a00:	9303      	str	r3, [sp, #12]
 8006a02:	688b      	ldr	r3, [r1, #8]
 8006a04:	1e5a      	subs	r2, r3, #1
 8006a06:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006a0a:	bf83      	ittte	hi
 8006a0c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006a10:	195b      	addhi	r3, r3, r5
 8006a12:	9302      	strhi	r3, [sp, #8]
 8006a14:	2300      	movls	r3, #0
 8006a16:	bf86      	itte	hi
 8006a18:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006a1c:	608b      	strhi	r3, [r1, #8]
 8006a1e:	9302      	strls	r3, [sp, #8]
 8006a20:	680b      	ldr	r3, [r1, #0]
 8006a22:	468b      	mov	fp, r1
 8006a24:	2500      	movs	r5, #0
 8006a26:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006a2a:	f84b 3b1c 	str.w	r3, [fp], #28
 8006a2e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006a32:	4680      	mov	r8, r0
 8006a34:	460c      	mov	r4, r1
 8006a36:	465e      	mov	r6, fp
 8006a38:	46aa      	mov	sl, r5
 8006a3a:	46a9      	mov	r9, r5
 8006a3c:	9501      	str	r5, [sp, #4]
 8006a3e:	68a2      	ldr	r2, [r4, #8]
 8006a40:	b152      	cbz	r2, 8006a58 <_scanf_float+0x60>
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	2b4e      	cmp	r3, #78	; 0x4e
 8006a48:	d864      	bhi.n	8006b14 <_scanf_float+0x11c>
 8006a4a:	2b40      	cmp	r3, #64	; 0x40
 8006a4c:	d83c      	bhi.n	8006ac8 <_scanf_float+0xd0>
 8006a4e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006a52:	b2c8      	uxtb	r0, r1
 8006a54:	280e      	cmp	r0, #14
 8006a56:	d93a      	bls.n	8006ace <_scanf_float+0xd6>
 8006a58:	f1b9 0f00 	cmp.w	r9, #0
 8006a5c:	d003      	beq.n	8006a66 <_scanf_float+0x6e>
 8006a5e:	6823      	ldr	r3, [r4, #0]
 8006a60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a64:	6023      	str	r3, [r4, #0]
 8006a66:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006a6a:	f1ba 0f01 	cmp.w	sl, #1
 8006a6e:	f200 8113 	bhi.w	8006c98 <_scanf_float+0x2a0>
 8006a72:	455e      	cmp	r6, fp
 8006a74:	f200 8105 	bhi.w	8006c82 <_scanf_float+0x28a>
 8006a78:	2501      	movs	r5, #1
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	b007      	add	sp, #28
 8006a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a82:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006a86:	2a0d      	cmp	r2, #13
 8006a88:	d8e6      	bhi.n	8006a58 <_scanf_float+0x60>
 8006a8a:	a101      	add	r1, pc, #4	; (adr r1, 8006a90 <_scanf_float+0x98>)
 8006a8c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006a90:	08006bcf 	.word	0x08006bcf
 8006a94:	08006a59 	.word	0x08006a59
 8006a98:	08006a59 	.word	0x08006a59
 8006a9c:	08006a59 	.word	0x08006a59
 8006aa0:	08006c2f 	.word	0x08006c2f
 8006aa4:	08006c07 	.word	0x08006c07
 8006aa8:	08006a59 	.word	0x08006a59
 8006aac:	08006a59 	.word	0x08006a59
 8006ab0:	08006bdd 	.word	0x08006bdd
 8006ab4:	08006a59 	.word	0x08006a59
 8006ab8:	08006a59 	.word	0x08006a59
 8006abc:	08006a59 	.word	0x08006a59
 8006ac0:	08006a59 	.word	0x08006a59
 8006ac4:	08006b95 	.word	0x08006b95
 8006ac8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006acc:	e7db      	b.n	8006a86 <_scanf_float+0x8e>
 8006ace:	290e      	cmp	r1, #14
 8006ad0:	d8c2      	bhi.n	8006a58 <_scanf_float+0x60>
 8006ad2:	a001      	add	r0, pc, #4	; (adr r0, 8006ad8 <_scanf_float+0xe0>)
 8006ad4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006ad8:	08006b87 	.word	0x08006b87
 8006adc:	08006a59 	.word	0x08006a59
 8006ae0:	08006b87 	.word	0x08006b87
 8006ae4:	08006c1b 	.word	0x08006c1b
 8006ae8:	08006a59 	.word	0x08006a59
 8006aec:	08006b35 	.word	0x08006b35
 8006af0:	08006b71 	.word	0x08006b71
 8006af4:	08006b71 	.word	0x08006b71
 8006af8:	08006b71 	.word	0x08006b71
 8006afc:	08006b71 	.word	0x08006b71
 8006b00:	08006b71 	.word	0x08006b71
 8006b04:	08006b71 	.word	0x08006b71
 8006b08:	08006b71 	.word	0x08006b71
 8006b0c:	08006b71 	.word	0x08006b71
 8006b10:	08006b71 	.word	0x08006b71
 8006b14:	2b6e      	cmp	r3, #110	; 0x6e
 8006b16:	d809      	bhi.n	8006b2c <_scanf_float+0x134>
 8006b18:	2b60      	cmp	r3, #96	; 0x60
 8006b1a:	d8b2      	bhi.n	8006a82 <_scanf_float+0x8a>
 8006b1c:	2b54      	cmp	r3, #84	; 0x54
 8006b1e:	d077      	beq.n	8006c10 <_scanf_float+0x218>
 8006b20:	2b59      	cmp	r3, #89	; 0x59
 8006b22:	d199      	bne.n	8006a58 <_scanf_float+0x60>
 8006b24:	2d07      	cmp	r5, #7
 8006b26:	d197      	bne.n	8006a58 <_scanf_float+0x60>
 8006b28:	2508      	movs	r5, #8
 8006b2a:	e029      	b.n	8006b80 <_scanf_float+0x188>
 8006b2c:	2b74      	cmp	r3, #116	; 0x74
 8006b2e:	d06f      	beq.n	8006c10 <_scanf_float+0x218>
 8006b30:	2b79      	cmp	r3, #121	; 0x79
 8006b32:	e7f6      	b.n	8006b22 <_scanf_float+0x12a>
 8006b34:	6821      	ldr	r1, [r4, #0]
 8006b36:	05c8      	lsls	r0, r1, #23
 8006b38:	d51a      	bpl.n	8006b70 <_scanf_float+0x178>
 8006b3a:	9b02      	ldr	r3, [sp, #8]
 8006b3c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006b40:	6021      	str	r1, [r4, #0]
 8006b42:	f109 0901 	add.w	r9, r9, #1
 8006b46:	b11b      	cbz	r3, 8006b50 <_scanf_float+0x158>
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	3201      	adds	r2, #1
 8006b4c:	9302      	str	r3, [sp, #8]
 8006b4e:	60a2      	str	r2, [r4, #8]
 8006b50:	68a3      	ldr	r3, [r4, #8]
 8006b52:	3b01      	subs	r3, #1
 8006b54:	60a3      	str	r3, [r4, #8]
 8006b56:	6923      	ldr	r3, [r4, #16]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	6123      	str	r3, [r4, #16]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	607b      	str	r3, [r7, #4]
 8006b64:	f340 8084 	ble.w	8006c70 <_scanf_float+0x278>
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	603b      	str	r3, [r7, #0]
 8006b6e:	e766      	b.n	8006a3e <_scanf_float+0x46>
 8006b70:	eb1a 0f05 	cmn.w	sl, r5
 8006b74:	f47f af70 	bne.w	8006a58 <_scanf_float+0x60>
 8006b78:	6822      	ldr	r2, [r4, #0]
 8006b7a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006b7e:	6022      	str	r2, [r4, #0]
 8006b80:	f806 3b01 	strb.w	r3, [r6], #1
 8006b84:	e7e4      	b.n	8006b50 <_scanf_float+0x158>
 8006b86:	6822      	ldr	r2, [r4, #0]
 8006b88:	0610      	lsls	r0, r2, #24
 8006b8a:	f57f af65 	bpl.w	8006a58 <_scanf_float+0x60>
 8006b8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b92:	e7f4      	b.n	8006b7e <_scanf_float+0x186>
 8006b94:	f1ba 0f00 	cmp.w	sl, #0
 8006b98:	d10e      	bne.n	8006bb8 <_scanf_float+0x1c0>
 8006b9a:	f1b9 0f00 	cmp.w	r9, #0
 8006b9e:	d10e      	bne.n	8006bbe <_scanf_float+0x1c6>
 8006ba0:	6822      	ldr	r2, [r4, #0]
 8006ba2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006ba6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006baa:	d108      	bne.n	8006bbe <_scanf_float+0x1c6>
 8006bac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006bb0:	6022      	str	r2, [r4, #0]
 8006bb2:	f04f 0a01 	mov.w	sl, #1
 8006bb6:	e7e3      	b.n	8006b80 <_scanf_float+0x188>
 8006bb8:	f1ba 0f02 	cmp.w	sl, #2
 8006bbc:	d055      	beq.n	8006c6a <_scanf_float+0x272>
 8006bbe:	2d01      	cmp	r5, #1
 8006bc0:	d002      	beq.n	8006bc8 <_scanf_float+0x1d0>
 8006bc2:	2d04      	cmp	r5, #4
 8006bc4:	f47f af48 	bne.w	8006a58 <_scanf_float+0x60>
 8006bc8:	3501      	adds	r5, #1
 8006bca:	b2ed      	uxtb	r5, r5
 8006bcc:	e7d8      	b.n	8006b80 <_scanf_float+0x188>
 8006bce:	f1ba 0f01 	cmp.w	sl, #1
 8006bd2:	f47f af41 	bne.w	8006a58 <_scanf_float+0x60>
 8006bd6:	f04f 0a02 	mov.w	sl, #2
 8006bda:	e7d1      	b.n	8006b80 <_scanf_float+0x188>
 8006bdc:	b97d      	cbnz	r5, 8006bfe <_scanf_float+0x206>
 8006bde:	f1b9 0f00 	cmp.w	r9, #0
 8006be2:	f47f af3c 	bne.w	8006a5e <_scanf_float+0x66>
 8006be6:	6822      	ldr	r2, [r4, #0]
 8006be8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006bec:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006bf0:	f47f af39 	bne.w	8006a66 <_scanf_float+0x6e>
 8006bf4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006bf8:	6022      	str	r2, [r4, #0]
 8006bfa:	2501      	movs	r5, #1
 8006bfc:	e7c0      	b.n	8006b80 <_scanf_float+0x188>
 8006bfe:	2d03      	cmp	r5, #3
 8006c00:	d0e2      	beq.n	8006bc8 <_scanf_float+0x1d0>
 8006c02:	2d05      	cmp	r5, #5
 8006c04:	e7de      	b.n	8006bc4 <_scanf_float+0x1cc>
 8006c06:	2d02      	cmp	r5, #2
 8006c08:	f47f af26 	bne.w	8006a58 <_scanf_float+0x60>
 8006c0c:	2503      	movs	r5, #3
 8006c0e:	e7b7      	b.n	8006b80 <_scanf_float+0x188>
 8006c10:	2d06      	cmp	r5, #6
 8006c12:	f47f af21 	bne.w	8006a58 <_scanf_float+0x60>
 8006c16:	2507      	movs	r5, #7
 8006c18:	e7b2      	b.n	8006b80 <_scanf_float+0x188>
 8006c1a:	6822      	ldr	r2, [r4, #0]
 8006c1c:	0591      	lsls	r1, r2, #22
 8006c1e:	f57f af1b 	bpl.w	8006a58 <_scanf_float+0x60>
 8006c22:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006c26:	6022      	str	r2, [r4, #0]
 8006c28:	f8cd 9004 	str.w	r9, [sp, #4]
 8006c2c:	e7a8      	b.n	8006b80 <_scanf_float+0x188>
 8006c2e:	6822      	ldr	r2, [r4, #0]
 8006c30:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006c34:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006c38:	d006      	beq.n	8006c48 <_scanf_float+0x250>
 8006c3a:	0550      	lsls	r0, r2, #21
 8006c3c:	f57f af0c 	bpl.w	8006a58 <_scanf_float+0x60>
 8006c40:	f1b9 0f00 	cmp.w	r9, #0
 8006c44:	f43f af0f 	beq.w	8006a66 <_scanf_float+0x6e>
 8006c48:	0591      	lsls	r1, r2, #22
 8006c4a:	bf58      	it	pl
 8006c4c:	9901      	ldrpl	r1, [sp, #4]
 8006c4e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c52:	bf58      	it	pl
 8006c54:	eba9 0101 	subpl.w	r1, r9, r1
 8006c58:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006c5c:	bf58      	it	pl
 8006c5e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006c62:	6022      	str	r2, [r4, #0]
 8006c64:	f04f 0900 	mov.w	r9, #0
 8006c68:	e78a      	b.n	8006b80 <_scanf_float+0x188>
 8006c6a:	f04f 0a03 	mov.w	sl, #3
 8006c6e:	e787      	b.n	8006b80 <_scanf_float+0x188>
 8006c70:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006c74:	4639      	mov	r1, r7
 8006c76:	4640      	mov	r0, r8
 8006c78:	4798      	blx	r3
 8006c7a:	2800      	cmp	r0, #0
 8006c7c:	f43f aedf 	beq.w	8006a3e <_scanf_float+0x46>
 8006c80:	e6ea      	b.n	8006a58 <_scanf_float+0x60>
 8006c82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c86:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c8a:	463a      	mov	r2, r7
 8006c8c:	4640      	mov	r0, r8
 8006c8e:	4798      	blx	r3
 8006c90:	6923      	ldr	r3, [r4, #16]
 8006c92:	3b01      	subs	r3, #1
 8006c94:	6123      	str	r3, [r4, #16]
 8006c96:	e6ec      	b.n	8006a72 <_scanf_float+0x7a>
 8006c98:	1e6b      	subs	r3, r5, #1
 8006c9a:	2b06      	cmp	r3, #6
 8006c9c:	d825      	bhi.n	8006cea <_scanf_float+0x2f2>
 8006c9e:	2d02      	cmp	r5, #2
 8006ca0:	d836      	bhi.n	8006d10 <_scanf_float+0x318>
 8006ca2:	455e      	cmp	r6, fp
 8006ca4:	f67f aee8 	bls.w	8006a78 <_scanf_float+0x80>
 8006ca8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006cac:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006cb0:	463a      	mov	r2, r7
 8006cb2:	4640      	mov	r0, r8
 8006cb4:	4798      	blx	r3
 8006cb6:	6923      	ldr	r3, [r4, #16]
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	6123      	str	r3, [r4, #16]
 8006cbc:	e7f1      	b.n	8006ca2 <_scanf_float+0x2aa>
 8006cbe:	9802      	ldr	r0, [sp, #8]
 8006cc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006cc4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006cc8:	9002      	str	r0, [sp, #8]
 8006cca:	463a      	mov	r2, r7
 8006ccc:	4640      	mov	r0, r8
 8006cce:	4798      	blx	r3
 8006cd0:	6923      	ldr	r3, [r4, #16]
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	6123      	str	r3, [r4, #16]
 8006cd6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006cda:	fa5f fa8a 	uxtb.w	sl, sl
 8006cde:	f1ba 0f02 	cmp.w	sl, #2
 8006ce2:	d1ec      	bne.n	8006cbe <_scanf_float+0x2c6>
 8006ce4:	3d03      	subs	r5, #3
 8006ce6:	b2ed      	uxtb	r5, r5
 8006ce8:	1b76      	subs	r6, r6, r5
 8006cea:	6823      	ldr	r3, [r4, #0]
 8006cec:	05da      	lsls	r2, r3, #23
 8006cee:	d52f      	bpl.n	8006d50 <_scanf_float+0x358>
 8006cf0:	055b      	lsls	r3, r3, #21
 8006cf2:	d510      	bpl.n	8006d16 <_scanf_float+0x31e>
 8006cf4:	455e      	cmp	r6, fp
 8006cf6:	f67f aebf 	bls.w	8006a78 <_scanf_float+0x80>
 8006cfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006cfe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d02:	463a      	mov	r2, r7
 8006d04:	4640      	mov	r0, r8
 8006d06:	4798      	blx	r3
 8006d08:	6923      	ldr	r3, [r4, #16]
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	6123      	str	r3, [r4, #16]
 8006d0e:	e7f1      	b.n	8006cf4 <_scanf_float+0x2fc>
 8006d10:	46aa      	mov	sl, r5
 8006d12:	9602      	str	r6, [sp, #8]
 8006d14:	e7df      	b.n	8006cd6 <_scanf_float+0x2de>
 8006d16:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006d1a:	6923      	ldr	r3, [r4, #16]
 8006d1c:	2965      	cmp	r1, #101	; 0x65
 8006d1e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8006d22:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8006d26:	6123      	str	r3, [r4, #16]
 8006d28:	d00c      	beq.n	8006d44 <_scanf_float+0x34c>
 8006d2a:	2945      	cmp	r1, #69	; 0x45
 8006d2c:	d00a      	beq.n	8006d44 <_scanf_float+0x34c>
 8006d2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d32:	463a      	mov	r2, r7
 8006d34:	4640      	mov	r0, r8
 8006d36:	4798      	blx	r3
 8006d38:	6923      	ldr	r3, [r4, #16]
 8006d3a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	1eb5      	subs	r5, r6, #2
 8006d42:	6123      	str	r3, [r4, #16]
 8006d44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d48:	463a      	mov	r2, r7
 8006d4a:	4640      	mov	r0, r8
 8006d4c:	4798      	blx	r3
 8006d4e:	462e      	mov	r6, r5
 8006d50:	6825      	ldr	r5, [r4, #0]
 8006d52:	f015 0510 	ands.w	r5, r5, #16
 8006d56:	d158      	bne.n	8006e0a <_scanf_float+0x412>
 8006d58:	7035      	strb	r5, [r6, #0]
 8006d5a:	6823      	ldr	r3, [r4, #0]
 8006d5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d64:	d11c      	bne.n	8006da0 <_scanf_float+0x3a8>
 8006d66:	9b01      	ldr	r3, [sp, #4]
 8006d68:	454b      	cmp	r3, r9
 8006d6a:	eba3 0209 	sub.w	r2, r3, r9
 8006d6e:	d124      	bne.n	8006dba <_scanf_float+0x3c2>
 8006d70:	2200      	movs	r2, #0
 8006d72:	4659      	mov	r1, fp
 8006d74:	4640      	mov	r0, r8
 8006d76:	f002 fc93 	bl	80096a0 <_strtod_r>
 8006d7a:	9b03      	ldr	r3, [sp, #12]
 8006d7c:	6821      	ldr	r1, [r4, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f011 0f02 	tst.w	r1, #2
 8006d84:	ec57 6b10 	vmov	r6, r7, d0
 8006d88:	f103 0204 	add.w	r2, r3, #4
 8006d8c:	d020      	beq.n	8006dd0 <_scanf_float+0x3d8>
 8006d8e:	9903      	ldr	r1, [sp, #12]
 8006d90:	600a      	str	r2, [r1, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	e9c3 6700 	strd	r6, r7, [r3]
 8006d98:	68e3      	ldr	r3, [r4, #12]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	60e3      	str	r3, [r4, #12]
 8006d9e:	e66c      	b.n	8006a7a <_scanf_float+0x82>
 8006da0:	9b04      	ldr	r3, [sp, #16]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d0e4      	beq.n	8006d70 <_scanf_float+0x378>
 8006da6:	9905      	ldr	r1, [sp, #20]
 8006da8:	230a      	movs	r3, #10
 8006daa:	462a      	mov	r2, r5
 8006dac:	3101      	adds	r1, #1
 8006dae:	4640      	mov	r0, r8
 8006db0:	f002 fcfe 	bl	80097b0 <_strtol_r>
 8006db4:	9b04      	ldr	r3, [sp, #16]
 8006db6:	9e05      	ldr	r6, [sp, #20]
 8006db8:	1ac2      	subs	r2, r0, r3
 8006dba:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006dbe:	429e      	cmp	r6, r3
 8006dc0:	bf28      	it	cs
 8006dc2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006dc6:	4912      	ldr	r1, [pc, #72]	; (8006e10 <_scanf_float+0x418>)
 8006dc8:	4630      	mov	r0, r6
 8006dca:	f000 f8e7 	bl	8006f9c <siprintf>
 8006dce:	e7cf      	b.n	8006d70 <_scanf_float+0x378>
 8006dd0:	f011 0f04 	tst.w	r1, #4
 8006dd4:	9903      	ldr	r1, [sp, #12]
 8006dd6:	600a      	str	r2, [r1, #0]
 8006dd8:	d1db      	bne.n	8006d92 <_scanf_float+0x39a>
 8006dda:	f8d3 8000 	ldr.w	r8, [r3]
 8006dde:	ee10 2a10 	vmov	r2, s0
 8006de2:	ee10 0a10 	vmov	r0, s0
 8006de6:	463b      	mov	r3, r7
 8006de8:	4639      	mov	r1, r7
 8006dea:	f7f9 fe9f 	bl	8000b2c <__aeabi_dcmpun>
 8006dee:	b128      	cbz	r0, 8006dfc <_scanf_float+0x404>
 8006df0:	4808      	ldr	r0, [pc, #32]	; (8006e14 <_scanf_float+0x41c>)
 8006df2:	f000 fa1b 	bl	800722c <nanf>
 8006df6:	ed88 0a00 	vstr	s0, [r8]
 8006dfa:	e7cd      	b.n	8006d98 <_scanf_float+0x3a0>
 8006dfc:	4630      	mov	r0, r6
 8006dfe:	4639      	mov	r1, r7
 8006e00:	f7f9 fef2 	bl	8000be8 <__aeabi_d2f>
 8006e04:	f8c8 0000 	str.w	r0, [r8]
 8006e08:	e7c6      	b.n	8006d98 <_scanf_float+0x3a0>
 8006e0a:	2500      	movs	r5, #0
 8006e0c:	e635      	b.n	8006a7a <_scanf_float+0x82>
 8006e0e:	bf00      	nop
 8006e10:	0800af1c 	.word	0x0800af1c
 8006e14:	0800b2ad 	.word	0x0800b2ad

08006e18 <std>:
 8006e18:	2300      	movs	r3, #0
 8006e1a:	b510      	push	{r4, lr}
 8006e1c:	4604      	mov	r4, r0
 8006e1e:	e9c0 3300 	strd	r3, r3, [r0]
 8006e22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e26:	6083      	str	r3, [r0, #8]
 8006e28:	8181      	strh	r1, [r0, #12]
 8006e2a:	6643      	str	r3, [r0, #100]	; 0x64
 8006e2c:	81c2      	strh	r2, [r0, #14]
 8006e2e:	6183      	str	r3, [r0, #24]
 8006e30:	4619      	mov	r1, r3
 8006e32:	2208      	movs	r2, #8
 8006e34:	305c      	adds	r0, #92	; 0x5c
 8006e36:	f000 f914 	bl	8007062 <memset>
 8006e3a:	4b0d      	ldr	r3, [pc, #52]	; (8006e70 <std+0x58>)
 8006e3c:	6263      	str	r3, [r4, #36]	; 0x24
 8006e3e:	4b0d      	ldr	r3, [pc, #52]	; (8006e74 <std+0x5c>)
 8006e40:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e42:	4b0d      	ldr	r3, [pc, #52]	; (8006e78 <std+0x60>)
 8006e44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e46:	4b0d      	ldr	r3, [pc, #52]	; (8006e7c <std+0x64>)
 8006e48:	6323      	str	r3, [r4, #48]	; 0x30
 8006e4a:	4b0d      	ldr	r3, [pc, #52]	; (8006e80 <std+0x68>)
 8006e4c:	6224      	str	r4, [r4, #32]
 8006e4e:	429c      	cmp	r4, r3
 8006e50:	d006      	beq.n	8006e60 <std+0x48>
 8006e52:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006e56:	4294      	cmp	r4, r2
 8006e58:	d002      	beq.n	8006e60 <std+0x48>
 8006e5a:	33d0      	adds	r3, #208	; 0xd0
 8006e5c:	429c      	cmp	r4, r3
 8006e5e:	d105      	bne.n	8006e6c <std+0x54>
 8006e60:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e68:	f000 b9ce 	b.w	8007208 <__retarget_lock_init_recursive>
 8006e6c:	bd10      	pop	{r4, pc}
 8006e6e:	bf00      	nop
 8006e70:	08006fdd 	.word	0x08006fdd
 8006e74:	08006fff 	.word	0x08006fff
 8006e78:	08007037 	.word	0x08007037
 8006e7c:	0800705b 	.word	0x0800705b
 8006e80:	2000455c 	.word	0x2000455c

08006e84 <stdio_exit_handler>:
 8006e84:	4a02      	ldr	r2, [pc, #8]	; (8006e90 <stdio_exit_handler+0xc>)
 8006e86:	4903      	ldr	r1, [pc, #12]	; (8006e94 <stdio_exit_handler+0x10>)
 8006e88:	4803      	ldr	r0, [pc, #12]	; (8006e98 <stdio_exit_handler+0x14>)
 8006e8a:	f000 b869 	b.w	8006f60 <_fwalk_sglue>
 8006e8e:	bf00      	nop
 8006e90:	20000030 	.word	0x20000030
 8006e94:	08009b71 	.word	0x08009b71
 8006e98:	2000003c 	.word	0x2000003c

08006e9c <cleanup_stdio>:
 8006e9c:	6841      	ldr	r1, [r0, #4]
 8006e9e:	4b0c      	ldr	r3, [pc, #48]	; (8006ed0 <cleanup_stdio+0x34>)
 8006ea0:	4299      	cmp	r1, r3
 8006ea2:	b510      	push	{r4, lr}
 8006ea4:	4604      	mov	r4, r0
 8006ea6:	d001      	beq.n	8006eac <cleanup_stdio+0x10>
 8006ea8:	f002 fe62 	bl	8009b70 <_fflush_r>
 8006eac:	68a1      	ldr	r1, [r4, #8]
 8006eae:	4b09      	ldr	r3, [pc, #36]	; (8006ed4 <cleanup_stdio+0x38>)
 8006eb0:	4299      	cmp	r1, r3
 8006eb2:	d002      	beq.n	8006eba <cleanup_stdio+0x1e>
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	f002 fe5b 	bl	8009b70 <_fflush_r>
 8006eba:	68e1      	ldr	r1, [r4, #12]
 8006ebc:	4b06      	ldr	r3, [pc, #24]	; (8006ed8 <cleanup_stdio+0x3c>)
 8006ebe:	4299      	cmp	r1, r3
 8006ec0:	d004      	beq.n	8006ecc <cleanup_stdio+0x30>
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ec8:	f002 be52 	b.w	8009b70 <_fflush_r>
 8006ecc:	bd10      	pop	{r4, pc}
 8006ece:	bf00      	nop
 8006ed0:	2000455c 	.word	0x2000455c
 8006ed4:	200045c4 	.word	0x200045c4
 8006ed8:	2000462c 	.word	0x2000462c

08006edc <global_stdio_init.part.0>:
 8006edc:	b510      	push	{r4, lr}
 8006ede:	4b0b      	ldr	r3, [pc, #44]	; (8006f0c <global_stdio_init.part.0+0x30>)
 8006ee0:	4c0b      	ldr	r4, [pc, #44]	; (8006f10 <global_stdio_init.part.0+0x34>)
 8006ee2:	4a0c      	ldr	r2, [pc, #48]	; (8006f14 <global_stdio_init.part.0+0x38>)
 8006ee4:	601a      	str	r2, [r3, #0]
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	2200      	movs	r2, #0
 8006eea:	2104      	movs	r1, #4
 8006eec:	f7ff ff94 	bl	8006e18 <std>
 8006ef0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	2109      	movs	r1, #9
 8006ef8:	f7ff ff8e 	bl	8006e18 <std>
 8006efc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006f00:	2202      	movs	r2, #2
 8006f02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f06:	2112      	movs	r1, #18
 8006f08:	f7ff bf86 	b.w	8006e18 <std>
 8006f0c:	20004694 	.word	0x20004694
 8006f10:	2000455c 	.word	0x2000455c
 8006f14:	08006e85 	.word	0x08006e85

08006f18 <__sfp_lock_acquire>:
 8006f18:	4801      	ldr	r0, [pc, #4]	; (8006f20 <__sfp_lock_acquire+0x8>)
 8006f1a:	f000 b976 	b.w	800720a <__retarget_lock_acquire_recursive>
 8006f1e:	bf00      	nop
 8006f20:	2000469d 	.word	0x2000469d

08006f24 <__sfp_lock_release>:
 8006f24:	4801      	ldr	r0, [pc, #4]	; (8006f2c <__sfp_lock_release+0x8>)
 8006f26:	f000 b971 	b.w	800720c <__retarget_lock_release_recursive>
 8006f2a:	bf00      	nop
 8006f2c:	2000469d 	.word	0x2000469d

08006f30 <__sinit>:
 8006f30:	b510      	push	{r4, lr}
 8006f32:	4604      	mov	r4, r0
 8006f34:	f7ff fff0 	bl	8006f18 <__sfp_lock_acquire>
 8006f38:	6a23      	ldr	r3, [r4, #32]
 8006f3a:	b11b      	cbz	r3, 8006f44 <__sinit+0x14>
 8006f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f40:	f7ff bff0 	b.w	8006f24 <__sfp_lock_release>
 8006f44:	4b04      	ldr	r3, [pc, #16]	; (8006f58 <__sinit+0x28>)
 8006f46:	6223      	str	r3, [r4, #32]
 8006f48:	4b04      	ldr	r3, [pc, #16]	; (8006f5c <__sinit+0x2c>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1f5      	bne.n	8006f3c <__sinit+0xc>
 8006f50:	f7ff ffc4 	bl	8006edc <global_stdio_init.part.0>
 8006f54:	e7f2      	b.n	8006f3c <__sinit+0xc>
 8006f56:	bf00      	nop
 8006f58:	08006e9d 	.word	0x08006e9d
 8006f5c:	20004694 	.word	0x20004694

08006f60 <_fwalk_sglue>:
 8006f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f64:	4607      	mov	r7, r0
 8006f66:	4688      	mov	r8, r1
 8006f68:	4614      	mov	r4, r2
 8006f6a:	2600      	movs	r6, #0
 8006f6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f70:	f1b9 0901 	subs.w	r9, r9, #1
 8006f74:	d505      	bpl.n	8006f82 <_fwalk_sglue+0x22>
 8006f76:	6824      	ldr	r4, [r4, #0]
 8006f78:	2c00      	cmp	r4, #0
 8006f7a:	d1f7      	bne.n	8006f6c <_fwalk_sglue+0xc>
 8006f7c:	4630      	mov	r0, r6
 8006f7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f82:	89ab      	ldrh	r3, [r5, #12]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d907      	bls.n	8006f98 <_fwalk_sglue+0x38>
 8006f88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	d003      	beq.n	8006f98 <_fwalk_sglue+0x38>
 8006f90:	4629      	mov	r1, r5
 8006f92:	4638      	mov	r0, r7
 8006f94:	47c0      	blx	r8
 8006f96:	4306      	orrs	r6, r0
 8006f98:	3568      	adds	r5, #104	; 0x68
 8006f9a:	e7e9      	b.n	8006f70 <_fwalk_sglue+0x10>

08006f9c <siprintf>:
 8006f9c:	b40e      	push	{r1, r2, r3}
 8006f9e:	b500      	push	{lr}
 8006fa0:	b09c      	sub	sp, #112	; 0x70
 8006fa2:	ab1d      	add	r3, sp, #116	; 0x74
 8006fa4:	9002      	str	r0, [sp, #8]
 8006fa6:	9006      	str	r0, [sp, #24]
 8006fa8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006fac:	4809      	ldr	r0, [pc, #36]	; (8006fd4 <siprintf+0x38>)
 8006fae:	9107      	str	r1, [sp, #28]
 8006fb0:	9104      	str	r1, [sp, #16]
 8006fb2:	4909      	ldr	r1, [pc, #36]	; (8006fd8 <siprintf+0x3c>)
 8006fb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fb8:	9105      	str	r1, [sp, #20]
 8006fba:	6800      	ldr	r0, [r0, #0]
 8006fbc:	9301      	str	r3, [sp, #4]
 8006fbe:	a902      	add	r1, sp, #8
 8006fc0:	f002 fc52 	bl	8009868 <_svfiprintf_r>
 8006fc4:	9b02      	ldr	r3, [sp, #8]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	701a      	strb	r2, [r3, #0]
 8006fca:	b01c      	add	sp, #112	; 0x70
 8006fcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fd0:	b003      	add	sp, #12
 8006fd2:	4770      	bx	lr
 8006fd4:	20000088 	.word	0x20000088
 8006fd8:	ffff0208 	.word	0xffff0208

08006fdc <__sread>:
 8006fdc:	b510      	push	{r4, lr}
 8006fde:	460c      	mov	r4, r1
 8006fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fe4:	f000 f8c2 	bl	800716c <_read_r>
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	bfab      	itete	ge
 8006fec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006fee:	89a3      	ldrhlt	r3, [r4, #12]
 8006ff0:	181b      	addge	r3, r3, r0
 8006ff2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ff6:	bfac      	ite	ge
 8006ff8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ffa:	81a3      	strhlt	r3, [r4, #12]
 8006ffc:	bd10      	pop	{r4, pc}

08006ffe <__swrite>:
 8006ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007002:	461f      	mov	r7, r3
 8007004:	898b      	ldrh	r3, [r1, #12]
 8007006:	05db      	lsls	r3, r3, #23
 8007008:	4605      	mov	r5, r0
 800700a:	460c      	mov	r4, r1
 800700c:	4616      	mov	r6, r2
 800700e:	d505      	bpl.n	800701c <__swrite+0x1e>
 8007010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007014:	2302      	movs	r3, #2
 8007016:	2200      	movs	r2, #0
 8007018:	f000 f896 	bl	8007148 <_lseek_r>
 800701c:	89a3      	ldrh	r3, [r4, #12]
 800701e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007022:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007026:	81a3      	strh	r3, [r4, #12]
 8007028:	4632      	mov	r2, r6
 800702a:	463b      	mov	r3, r7
 800702c:	4628      	mov	r0, r5
 800702e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007032:	f000 b8ad 	b.w	8007190 <_write_r>

08007036 <__sseek>:
 8007036:	b510      	push	{r4, lr}
 8007038:	460c      	mov	r4, r1
 800703a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800703e:	f000 f883 	bl	8007148 <_lseek_r>
 8007042:	1c43      	adds	r3, r0, #1
 8007044:	89a3      	ldrh	r3, [r4, #12]
 8007046:	bf15      	itete	ne
 8007048:	6560      	strne	r0, [r4, #84]	; 0x54
 800704a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800704e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007052:	81a3      	strheq	r3, [r4, #12]
 8007054:	bf18      	it	ne
 8007056:	81a3      	strhne	r3, [r4, #12]
 8007058:	bd10      	pop	{r4, pc}

0800705a <__sclose>:
 800705a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800705e:	f000 b80d 	b.w	800707c <_close_r>

08007062 <memset>:
 8007062:	4402      	add	r2, r0
 8007064:	4603      	mov	r3, r0
 8007066:	4293      	cmp	r3, r2
 8007068:	d100      	bne.n	800706c <memset+0xa>
 800706a:	4770      	bx	lr
 800706c:	f803 1b01 	strb.w	r1, [r3], #1
 8007070:	e7f9      	b.n	8007066 <memset+0x4>
	...

08007074 <_localeconv_r>:
 8007074:	4800      	ldr	r0, [pc, #0]	; (8007078 <_localeconv_r+0x4>)
 8007076:	4770      	bx	lr
 8007078:	2000017c 	.word	0x2000017c

0800707c <_close_r>:
 800707c:	b538      	push	{r3, r4, r5, lr}
 800707e:	4d06      	ldr	r5, [pc, #24]	; (8007098 <_close_r+0x1c>)
 8007080:	2300      	movs	r3, #0
 8007082:	4604      	mov	r4, r0
 8007084:	4608      	mov	r0, r1
 8007086:	602b      	str	r3, [r5, #0]
 8007088:	f7fb fa12 	bl	80024b0 <_close>
 800708c:	1c43      	adds	r3, r0, #1
 800708e:	d102      	bne.n	8007096 <_close_r+0x1a>
 8007090:	682b      	ldr	r3, [r5, #0]
 8007092:	b103      	cbz	r3, 8007096 <_close_r+0x1a>
 8007094:	6023      	str	r3, [r4, #0]
 8007096:	bd38      	pop	{r3, r4, r5, pc}
 8007098:	20004698 	.word	0x20004698

0800709c <_reclaim_reent>:
 800709c:	4b29      	ldr	r3, [pc, #164]	; (8007144 <_reclaim_reent+0xa8>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4283      	cmp	r3, r0
 80070a2:	b570      	push	{r4, r5, r6, lr}
 80070a4:	4604      	mov	r4, r0
 80070a6:	d04b      	beq.n	8007140 <_reclaim_reent+0xa4>
 80070a8:	69c3      	ldr	r3, [r0, #28]
 80070aa:	b143      	cbz	r3, 80070be <_reclaim_reent+0x22>
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d144      	bne.n	800713c <_reclaim_reent+0xa0>
 80070b2:	69e3      	ldr	r3, [r4, #28]
 80070b4:	6819      	ldr	r1, [r3, #0]
 80070b6:	b111      	cbz	r1, 80070be <_reclaim_reent+0x22>
 80070b8:	4620      	mov	r0, r4
 80070ba:	f000 ff37 	bl	8007f2c <_free_r>
 80070be:	6961      	ldr	r1, [r4, #20]
 80070c0:	b111      	cbz	r1, 80070c8 <_reclaim_reent+0x2c>
 80070c2:	4620      	mov	r0, r4
 80070c4:	f000 ff32 	bl	8007f2c <_free_r>
 80070c8:	69e1      	ldr	r1, [r4, #28]
 80070ca:	b111      	cbz	r1, 80070d2 <_reclaim_reent+0x36>
 80070cc:	4620      	mov	r0, r4
 80070ce:	f000 ff2d 	bl	8007f2c <_free_r>
 80070d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80070d4:	b111      	cbz	r1, 80070dc <_reclaim_reent+0x40>
 80070d6:	4620      	mov	r0, r4
 80070d8:	f000 ff28 	bl	8007f2c <_free_r>
 80070dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070de:	b111      	cbz	r1, 80070e6 <_reclaim_reent+0x4a>
 80070e0:	4620      	mov	r0, r4
 80070e2:	f000 ff23 	bl	8007f2c <_free_r>
 80070e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80070e8:	b111      	cbz	r1, 80070f0 <_reclaim_reent+0x54>
 80070ea:	4620      	mov	r0, r4
 80070ec:	f000 ff1e 	bl	8007f2c <_free_r>
 80070f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80070f2:	b111      	cbz	r1, 80070fa <_reclaim_reent+0x5e>
 80070f4:	4620      	mov	r0, r4
 80070f6:	f000 ff19 	bl	8007f2c <_free_r>
 80070fa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80070fc:	b111      	cbz	r1, 8007104 <_reclaim_reent+0x68>
 80070fe:	4620      	mov	r0, r4
 8007100:	f000 ff14 	bl	8007f2c <_free_r>
 8007104:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007106:	b111      	cbz	r1, 800710e <_reclaim_reent+0x72>
 8007108:	4620      	mov	r0, r4
 800710a:	f000 ff0f 	bl	8007f2c <_free_r>
 800710e:	6a23      	ldr	r3, [r4, #32]
 8007110:	b1b3      	cbz	r3, 8007140 <_reclaim_reent+0xa4>
 8007112:	4620      	mov	r0, r4
 8007114:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007118:	4718      	bx	r3
 800711a:	5949      	ldr	r1, [r1, r5]
 800711c:	b941      	cbnz	r1, 8007130 <_reclaim_reent+0x94>
 800711e:	3504      	adds	r5, #4
 8007120:	69e3      	ldr	r3, [r4, #28]
 8007122:	2d80      	cmp	r5, #128	; 0x80
 8007124:	68d9      	ldr	r1, [r3, #12]
 8007126:	d1f8      	bne.n	800711a <_reclaim_reent+0x7e>
 8007128:	4620      	mov	r0, r4
 800712a:	f000 feff 	bl	8007f2c <_free_r>
 800712e:	e7c0      	b.n	80070b2 <_reclaim_reent+0x16>
 8007130:	680e      	ldr	r6, [r1, #0]
 8007132:	4620      	mov	r0, r4
 8007134:	f000 fefa 	bl	8007f2c <_free_r>
 8007138:	4631      	mov	r1, r6
 800713a:	e7ef      	b.n	800711c <_reclaim_reent+0x80>
 800713c:	2500      	movs	r5, #0
 800713e:	e7ef      	b.n	8007120 <_reclaim_reent+0x84>
 8007140:	bd70      	pop	{r4, r5, r6, pc}
 8007142:	bf00      	nop
 8007144:	20000088 	.word	0x20000088

08007148 <_lseek_r>:
 8007148:	b538      	push	{r3, r4, r5, lr}
 800714a:	4d07      	ldr	r5, [pc, #28]	; (8007168 <_lseek_r+0x20>)
 800714c:	4604      	mov	r4, r0
 800714e:	4608      	mov	r0, r1
 8007150:	4611      	mov	r1, r2
 8007152:	2200      	movs	r2, #0
 8007154:	602a      	str	r2, [r5, #0]
 8007156:	461a      	mov	r2, r3
 8007158:	f7fb f9b6 	bl	80024c8 <_lseek>
 800715c:	1c43      	adds	r3, r0, #1
 800715e:	d102      	bne.n	8007166 <_lseek_r+0x1e>
 8007160:	682b      	ldr	r3, [r5, #0]
 8007162:	b103      	cbz	r3, 8007166 <_lseek_r+0x1e>
 8007164:	6023      	str	r3, [r4, #0]
 8007166:	bd38      	pop	{r3, r4, r5, pc}
 8007168:	20004698 	.word	0x20004698

0800716c <_read_r>:
 800716c:	b538      	push	{r3, r4, r5, lr}
 800716e:	4d07      	ldr	r5, [pc, #28]	; (800718c <_read_r+0x20>)
 8007170:	4604      	mov	r4, r0
 8007172:	4608      	mov	r0, r1
 8007174:	4611      	mov	r1, r2
 8007176:	2200      	movs	r2, #0
 8007178:	602a      	str	r2, [r5, #0]
 800717a:	461a      	mov	r2, r3
 800717c:	f7fb f97c 	bl	8002478 <_read>
 8007180:	1c43      	adds	r3, r0, #1
 8007182:	d102      	bne.n	800718a <_read_r+0x1e>
 8007184:	682b      	ldr	r3, [r5, #0]
 8007186:	b103      	cbz	r3, 800718a <_read_r+0x1e>
 8007188:	6023      	str	r3, [r4, #0]
 800718a:	bd38      	pop	{r3, r4, r5, pc}
 800718c:	20004698 	.word	0x20004698

08007190 <_write_r>:
 8007190:	b538      	push	{r3, r4, r5, lr}
 8007192:	4d07      	ldr	r5, [pc, #28]	; (80071b0 <_write_r+0x20>)
 8007194:	4604      	mov	r4, r0
 8007196:	4608      	mov	r0, r1
 8007198:	4611      	mov	r1, r2
 800719a:	2200      	movs	r2, #0
 800719c:	602a      	str	r2, [r5, #0]
 800719e:	461a      	mov	r2, r3
 80071a0:	f7fb f978 	bl	8002494 <_write>
 80071a4:	1c43      	adds	r3, r0, #1
 80071a6:	d102      	bne.n	80071ae <_write_r+0x1e>
 80071a8:	682b      	ldr	r3, [r5, #0]
 80071aa:	b103      	cbz	r3, 80071ae <_write_r+0x1e>
 80071ac:	6023      	str	r3, [r4, #0]
 80071ae:	bd38      	pop	{r3, r4, r5, pc}
 80071b0:	20004698 	.word	0x20004698

080071b4 <__errno>:
 80071b4:	4b01      	ldr	r3, [pc, #4]	; (80071bc <__errno+0x8>)
 80071b6:	6818      	ldr	r0, [r3, #0]
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	20000088 	.word	0x20000088

080071c0 <__libc_init_array>:
 80071c0:	b570      	push	{r4, r5, r6, lr}
 80071c2:	4d0d      	ldr	r5, [pc, #52]	; (80071f8 <__libc_init_array+0x38>)
 80071c4:	4c0d      	ldr	r4, [pc, #52]	; (80071fc <__libc_init_array+0x3c>)
 80071c6:	1b64      	subs	r4, r4, r5
 80071c8:	10a4      	asrs	r4, r4, #2
 80071ca:	2600      	movs	r6, #0
 80071cc:	42a6      	cmp	r6, r4
 80071ce:	d109      	bne.n	80071e4 <__libc_init_array+0x24>
 80071d0:	4d0b      	ldr	r5, [pc, #44]	; (8007200 <__libc_init_array+0x40>)
 80071d2:	4c0c      	ldr	r4, [pc, #48]	; (8007204 <__libc_init_array+0x44>)
 80071d4:	f003 fbd4 	bl	800a980 <_init>
 80071d8:	1b64      	subs	r4, r4, r5
 80071da:	10a4      	asrs	r4, r4, #2
 80071dc:	2600      	movs	r6, #0
 80071de:	42a6      	cmp	r6, r4
 80071e0:	d105      	bne.n	80071ee <__libc_init_array+0x2e>
 80071e2:	bd70      	pop	{r4, r5, r6, pc}
 80071e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80071e8:	4798      	blx	r3
 80071ea:	3601      	adds	r6, #1
 80071ec:	e7ee      	b.n	80071cc <__libc_init_array+0xc>
 80071ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80071f2:	4798      	blx	r3
 80071f4:	3601      	adds	r6, #1
 80071f6:	e7f2      	b.n	80071de <__libc_init_array+0x1e>
 80071f8:	0800b318 	.word	0x0800b318
 80071fc:	0800b318 	.word	0x0800b318
 8007200:	0800b318 	.word	0x0800b318
 8007204:	0800b31c 	.word	0x0800b31c

08007208 <__retarget_lock_init_recursive>:
 8007208:	4770      	bx	lr

0800720a <__retarget_lock_acquire_recursive>:
 800720a:	4770      	bx	lr

0800720c <__retarget_lock_release_recursive>:
 800720c:	4770      	bx	lr

0800720e <memcpy>:
 800720e:	440a      	add	r2, r1
 8007210:	4291      	cmp	r1, r2
 8007212:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007216:	d100      	bne.n	800721a <memcpy+0xc>
 8007218:	4770      	bx	lr
 800721a:	b510      	push	{r4, lr}
 800721c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007220:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007224:	4291      	cmp	r1, r2
 8007226:	d1f9      	bne.n	800721c <memcpy+0xe>
 8007228:	bd10      	pop	{r4, pc}
	...

0800722c <nanf>:
 800722c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007234 <nanf+0x8>
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	7fc00000 	.word	0x7fc00000

08007238 <quorem>:
 8007238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800723c:	6903      	ldr	r3, [r0, #16]
 800723e:	690c      	ldr	r4, [r1, #16]
 8007240:	42a3      	cmp	r3, r4
 8007242:	4607      	mov	r7, r0
 8007244:	db7e      	blt.n	8007344 <quorem+0x10c>
 8007246:	3c01      	subs	r4, #1
 8007248:	f101 0814 	add.w	r8, r1, #20
 800724c:	f100 0514 	add.w	r5, r0, #20
 8007250:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007254:	9301      	str	r3, [sp, #4]
 8007256:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800725a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800725e:	3301      	adds	r3, #1
 8007260:	429a      	cmp	r2, r3
 8007262:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007266:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800726a:	fbb2 f6f3 	udiv	r6, r2, r3
 800726e:	d331      	bcc.n	80072d4 <quorem+0x9c>
 8007270:	f04f 0e00 	mov.w	lr, #0
 8007274:	4640      	mov	r0, r8
 8007276:	46ac      	mov	ip, r5
 8007278:	46f2      	mov	sl, lr
 800727a:	f850 2b04 	ldr.w	r2, [r0], #4
 800727e:	b293      	uxth	r3, r2
 8007280:	fb06 e303 	mla	r3, r6, r3, lr
 8007284:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007288:	0c1a      	lsrs	r2, r3, #16
 800728a:	b29b      	uxth	r3, r3
 800728c:	ebaa 0303 	sub.w	r3, sl, r3
 8007290:	f8dc a000 	ldr.w	sl, [ip]
 8007294:	fa13 f38a 	uxtah	r3, r3, sl
 8007298:	fb06 220e 	mla	r2, r6, lr, r2
 800729c:	9300      	str	r3, [sp, #0]
 800729e:	9b00      	ldr	r3, [sp, #0]
 80072a0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80072a4:	b292      	uxth	r2, r2
 80072a6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80072aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80072ae:	f8bd 3000 	ldrh.w	r3, [sp]
 80072b2:	4581      	cmp	r9, r0
 80072b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072b8:	f84c 3b04 	str.w	r3, [ip], #4
 80072bc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80072c0:	d2db      	bcs.n	800727a <quorem+0x42>
 80072c2:	f855 300b 	ldr.w	r3, [r5, fp]
 80072c6:	b92b      	cbnz	r3, 80072d4 <quorem+0x9c>
 80072c8:	9b01      	ldr	r3, [sp, #4]
 80072ca:	3b04      	subs	r3, #4
 80072cc:	429d      	cmp	r5, r3
 80072ce:	461a      	mov	r2, r3
 80072d0:	d32c      	bcc.n	800732c <quorem+0xf4>
 80072d2:	613c      	str	r4, [r7, #16]
 80072d4:	4638      	mov	r0, r7
 80072d6:	f001 f9ef 	bl	80086b8 <__mcmp>
 80072da:	2800      	cmp	r0, #0
 80072dc:	db22      	blt.n	8007324 <quorem+0xec>
 80072de:	3601      	adds	r6, #1
 80072e0:	4629      	mov	r1, r5
 80072e2:	2000      	movs	r0, #0
 80072e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80072e8:	f8d1 c000 	ldr.w	ip, [r1]
 80072ec:	b293      	uxth	r3, r2
 80072ee:	1ac3      	subs	r3, r0, r3
 80072f0:	0c12      	lsrs	r2, r2, #16
 80072f2:	fa13 f38c 	uxtah	r3, r3, ip
 80072f6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80072fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80072fe:	b29b      	uxth	r3, r3
 8007300:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007304:	45c1      	cmp	r9, r8
 8007306:	f841 3b04 	str.w	r3, [r1], #4
 800730a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800730e:	d2e9      	bcs.n	80072e4 <quorem+0xac>
 8007310:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007314:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007318:	b922      	cbnz	r2, 8007324 <quorem+0xec>
 800731a:	3b04      	subs	r3, #4
 800731c:	429d      	cmp	r5, r3
 800731e:	461a      	mov	r2, r3
 8007320:	d30a      	bcc.n	8007338 <quorem+0x100>
 8007322:	613c      	str	r4, [r7, #16]
 8007324:	4630      	mov	r0, r6
 8007326:	b003      	add	sp, #12
 8007328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800732c:	6812      	ldr	r2, [r2, #0]
 800732e:	3b04      	subs	r3, #4
 8007330:	2a00      	cmp	r2, #0
 8007332:	d1ce      	bne.n	80072d2 <quorem+0x9a>
 8007334:	3c01      	subs	r4, #1
 8007336:	e7c9      	b.n	80072cc <quorem+0x94>
 8007338:	6812      	ldr	r2, [r2, #0]
 800733a:	3b04      	subs	r3, #4
 800733c:	2a00      	cmp	r2, #0
 800733e:	d1f0      	bne.n	8007322 <quorem+0xea>
 8007340:	3c01      	subs	r4, #1
 8007342:	e7eb      	b.n	800731c <quorem+0xe4>
 8007344:	2000      	movs	r0, #0
 8007346:	e7ee      	b.n	8007326 <quorem+0xee>

08007348 <_dtoa_r>:
 8007348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800734c:	ed2d 8b04 	vpush	{d8-d9}
 8007350:	69c5      	ldr	r5, [r0, #28]
 8007352:	b093      	sub	sp, #76	; 0x4c
 8007354:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007358:	ec57 6b10 	vmov	r6, r7, d0
 800735c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007360:	9107      	str	r1, [sp, #28]
 8007362:	4604      	mov	r4, r0
 8007364:	920a      	str	r2, [sp, #40]	; 0x28
 8007366:	930d      	str	r3, [sp, #52]	; 0x34
 8007368:	b975      	cbnz	r5, 8007388 <_dtoa_r+0x40>
 800736a:	2010      	movs	r0, #16
 800736c:	f000 fe2a 	bl	8007fc4 <malloc>
 8007370:	4602      	mov	r2, r0
 8007372:	61e0      	str	r0, [r4, #28]
 8007374:	b920      	cbnz	r0, 8007380 <_dtoa_r+0x38>
 8007376:	4bae      	ldr	r3, [pc, #696]	; (8007630 <_dtoa_r+0x2e8>)
 8007378:	21ef      	movs	r1, #239	; 0xef
 800737a:	48ae      	ldr	r0, [pc, #696]	; (8007634 <_dtoa_r+0x2ec>)
 800737c:	f002 fc64 	bl	8009c48 <__assert_func>
 8007380:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007384:	6005      	str	r5, [r0, #0]
 8007386:	60c5      	str	r5, [r0, #12]
 8007388:	69e3      	ldr	r3, [r4, #28]
 800738a:	6819      	ldr	r1, [r3, #0]
 800738c:	b151      	cbz	r1, 80073a4 <_dtoa_r+0x5c>
 800738e:	685a      	ldr	r2, [r3, #4]
 8007390:	604a      	str	r2, [r1, #4]
 8007392:	2301      	movs	r3, #1
 8007394:	4093      	lsls	r3, r2
 8007396:	608b      	str	r3, [r1, #8]
 8007398:	4620      	mov	r0, r4
 800739a:	f000 ff07 	bl	80081ac <_Bfree>
 800739e:	69e3      	ldr	r3, [r4, #28]
 80073a0:	2200      	movs	r2, #0
 80073a2:	601a      	str	r2, [r3, #0]
 80073a4:	1e3b      	subs	r3, r7, #0
 80073a6:	bfbb      	ittet	lt
 80073a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80073ac:	9303      	strlt	r3, [sp, #12]
 80073ae:	2300      	movge	r3, #0
 80073b0:	2201      	movlt	r2, #1
 80073b2:	bfac      	ite	ge
 80073b4:	f8c8 3000 	strge.w	r3, [r8]
 80073b8:	f8c8 2000 	strlt.w	r2, [r8]
 80073bc:	4b9e      	ldr	r3, [pc, #632]	; (8007638 <_dtoa_r+0x2f0>)
 80073be:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80073c2:	ea33 0308 	bics.w	r3, r3, r8
 80073c6:	d11b      	bne.n	8007400 <_dtoa_r+0xb8>
 80073c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80073ce:	6013      	str	r3, [r2, #0]
 80073d0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80073d4:	4333      	orrs	r3, r6
 80073d6:	f000 8593 	beq.w	8007f00 <_dtoa_r+0xbb8>
 80073da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073dc:	b963      	cbnz	r3, 80073f8 <_dtoa_r+0xb0>
 80073de:	4b97      	ldr	r3, [pc, #604]	; (800763c <_dtoa_r+0x2f4>)
 80073e0:	e027      	b.n	8007432 <_dtoa_r+0xea>
 80073e2:	4b97      	ldr	r3, [pc, #604]	; (8007640 <_dtoa_r+0x2f8>)
 80073e4:	9300      	str	r3, [sp, #0]
 80073e6:	3308      	adds	r3, #8
 80073e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80073ea:	6013      	str	r3, [r2, #0]
 80073ec:	9800      	ldr	r0, [sp, #0]
 80073ee:	b013      	add	sp, #76	; 0x4c
 80073f0:	ecbd 8b04 	vpop	{d8-d9}
 80073f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073f8:	4b90      	ldr	r3, [pc, #576]	; (800763c <_dtoa_r+0x2f4>)
 80073fa:	9300      	str	r3, [sp, #0]
 80073fc:	3303      	adds	r3, #3
 80073fe:	e7f3      	b.n	80073e8 <_dtoa_r+0xa0>
 8007400:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007404:	2200      	movs	r2, #0
 8007406:	ec51 0b17 	vmov	r0, r1, d7
 800740a:	eeb0 8a47 	vmov.f32	s16, s14
 800740e:	eef0 8a67 	vmov.f32	s17, s15
 8007412:	2300      	movs	r3, #0
 8007414:	f7f9 fb58 	bl	8000ac8 <__aeabi_dcmpeq>
 8007418:	4681      	mov	r9, r0
 800741a:	b160      	cbz	r0, 8007436 <_dtoa_r+0xee>
 800741c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800741e:	2301      	movs	r3, #1
 8007420:	6013      	str	r3, [r2, #0]
 8007422:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 8568 	beq.w	8007efa <_dtoa_r+0xbb2>
 800742a:	4b86      	ldr	r3, [pc, #536]	; (8007644 <_dtoa_r+0x2fc>)
 800742c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800742e:	6013      	str	r3, [r2, #0]
 8007430:	3b01      	subs	r3, #1
 8007432:	9300      	str	r3, [sp, #0]
 8007434:	e7da      	b.n	80073ec <_dtoa_r+0xa4>
 8007436:	aa10      	add	r2, sp, #64	; 0x40
 8007438:	a911      	add	r1, sp, #68	; 0x44
 800743a:	4620      	mov	r0, r4
 800743c:	eeb0 0a48 	vmov.f32	s0, s16
 8007440:	eef0 0a68 	vmov.f32	s1, s17
 8007444:	f001 fa4e 	bl	80088e4 <__d2b>
 8007448:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800744c:	4682      	mov	sl, r0
 800744e:	2d00      	cmp	r5, #0
 8007450:	d07f      	beq.n	8007552 <_dtoa_r+0x20a>
 8007452:	ee18 3a90 	vmov	r3, s17
 8007456:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800745a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800745e:	ec51 0b18 	vmov	r0, r1, d8
 8007462:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007466:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800746a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800746e:	4619      	mov	r1, r3
 8007470:	2200      	movs	r2, #0
 8007472:	4b75      	ldr	r3, [pc, #468]	; (8007648 <_dtoa_r+0x300>)
 8007474:	f7f8 ff08 	bl	8000288 <__aeabi_dsub>
 8007478:	a367      	add	r3, pc, #412	; (adr r3, 8007618 <_dtoa_r+0x2d0>)
 800747a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747e:	f7f9 f8bb 	bl	80005f8 <__aeabi_dmul>
 8007482:	a367      	add	r3, pc, #412	; (adr r3, 8007620 <_dtoa_r+0x2d8>)
 8007484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007488:	f7f8 ff00 	bl	800028c <__adddf3>
 800748c:	4606      	mov	r6, r0
 800748e:	4628      	mov	r0, r5
 8007490:	460f      	mov	r7, r1
 8007492:	f7f9 f847 	bl	8000524 <__aeabi_i2d>
 8007496:	a364      	add	r3, pc, #400	; (adr r3, 8007628 <_dtoa_r+0x2e0>)
 8007498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749c:	f7f9 f8ac 	bl	80005f8 <__aeabi_dmul>
 80074a0:	4602      	mov	r2, r0
 80074a2:	460b      	mov	r3, r1
 80074a4:	4630      	mov	r0, r6
 80074a6:	4639      	mov	r1, r7
 80074a8:	f7f8 fef0 	bl	800028c <__adddf3>
 80074ac:	4606      	mov	r6, r0
 80074ae:	460f      	mov	r7, r1
 80074b0:	f7f9 fb52 	bl	8000b58 <__aeabi_d2iz>
 80074b4:	2200      	movs	r2, #0
 80074b6:	4683      	mov	fp, r0
 80074b8:	2300      	movs	r3, #0
 80074ba:	4630      	mov	r0, r6
 80074bc:	4639      	mov	r1, r7
 80074be:	f7f9 fb0d 	bl	8000adc <__aeabi_dcmplt>
 80074c2:	b148      	cbz	r0, 80074d8 <_dtoa_r+0x190>
 80074c4:	4658      	mov	r0, fp
 80074c6:	f7f9 f82d 	bl	8000524 <__aeabi_i2d>
 80074ca:	4632      	mov	r2, r6
 80074cc:	463b      	mov	r3, r7
 80074ce:	f7f9 fafb 	bl	8000ac8 <__aeabi_dcmpeq>
 80074d2:	b908      	cbnz	r0, 80074d8 <_dtoa_r+0x190>
 80074d4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80074d8:	f1bb 0f16 	cmp.w	fp, #22
 80074dc:	d857      	bhi.n	800758e <_dtoa_r+0x246>
 80074de:	4b5b      	ldr	r3, [pc, #364]	; (800764c <_dtoa_r+0x304>)
 80074e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80074e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e8:	ec51 0b18 	vmov	r0, r1, d8
 80074ec:	f7f9 faf6 	bl	8000adc <__aeabi_dcmplt>
 80074f0:	2800      	cmp	r0, #0
 80074f2:	d04e      	beq.n	8007592 <_dtoa_r+0x24a>
 80074f4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80074f8:	2300      	movs	r3, #0
 80074fa:	930c      	str	r3, [sp, #48]	; 0x30
 80074fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80074fe:	1b5b      	subs	r3, r3, r5
 8007500:	1e5a      	subs	r2, r3, #1
 8007502:	bf45      	ittet	mi
 8007504:	f1c3 0301 	rsbmi	r3, r3, #1
 8007508:	9305      	strmi	r3, [sp, #20]
 800750a:	2300      	movpl	r3, #0
 800750c:	2300      	movmi	r3, #0
 800750e:	9206      	str	r2, [sp, #24]
 8007510:	bf54      	ite	pl
 8007512:	9305      	strpl	r3, [sp, #20]
 8007514:	9306      	strmi	r3, [sp, #24]
 8007516:	f1bb 0f00 	cmp.w	fp, #0
 800751a:	db3c      	blt.n	8007596 <_dtoa_r+0x24e>
 800751c:	9b06      	ldr	r3, [sp, #24]
 800751e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007522:	445b      	add	r3, fp
 8007524:	9306      	str	r3, [sp, #24]
 8007526:	2300      	movs	r3, #0
 8007528:	9308      	str	r3, [sp, #32]
 800752a:	9b07      	ldr	r3, [sp, #28]
 800752c:	2b09      	cmp	r3, #9
 800752e:	d868      	bhi.n	8007602 <_dtoa_r+0x2ba>
 8007530:	2b05      	cmp	r3, #5
 8007532:	bfc4      	itt	gt
 8007534:	3b04      	subgt	r3, #4
 8007536:	9307      	strgt	r3, [sp, #28]
 8007538:	9b07      	ldr	r3, [sp, #28]
 800753a:	f1a3 0302 	sub.w	r3, r3, #2
 800753e:	bfcc      	ite	gt
 8007540:	2500      	movgt	r5, #0
 8007542:	2501      	movle	r5, #1
 8007544:	2b03      	cmp	r3, #3
 8007546:	f200 8085 	bhi.w	8007654 <_dtoa_r+0x30c>
 800754a:	e8df f003 	tbb	[pc, r3]
 800754e:	3b2e      	.short	0x3b2e
 8007550:	5839      	.short	0x5839
 8007552:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007556:	441d      	add	r5, r3
 8007558:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800755c:	2b20      	cmp	r3, #32
 800755e:	bfc1      	itttt	gt
 8007560:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007564:	fa08 f803 	lslgt.w	r8, r8, r3
 8007568:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800756c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007570:	bfd6      	itet	le
 8007572:	f1c3 0320 	rsble	r3, r3, #32
 8007576:	ea48 0003 	orrgt.w	r0, r8, r3
 800757a:	fa06 f003 	lslle.w	r0, r6, r3
 800757e:	f7f8 ffc1 	bl	8000504 <__aeabi_ui2d>
 8007582:	2201      	movs	r2, #1
 8007584:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007588:	3d01      	subs	r5, #1
 800758a:	920e      	str	r2, [sp, #56]	; 0x38
 800758c:	e76f      	b.n	800746e <_dtoa_r+0x126>
 800758e:	2301      	movs	r3, #1
 8007590:	e7b3      	b.n	80074fa <_dtoa_r+0x1b2>
 8007592:	900c      	str	r0, [sp, #48]	; 0x30
 8007594:	e7b2      	b.n	80074fc <_dtoa_r+0x1b4>
 8007596:	9b05      	ldr	r3, [sp, #20]
 8007598:	eba3 030b 	sub.w	r3, r3, fp
 800759c:	9305      	str	r3, [sp, #20]
 800759e:	f1cb 0300 	rsb	r3, fp, #0
 80075a2:	9308      	str	r3, [sp, #32]
 80075a4:	2300      	movs	r3, #0
 80075a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80075a8:	e7bf      	b.n	800752a <_dtoa_r+0x1e2>
 80075aa:	2300      	movs	r3, #0
 80075ac:	9309      	str	r3, [sp, #36]	; 0x24
 80075ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	dc52      	bgt.n	800765a <_dtoa_r+0x312>
 80075b4:	2301      	movs	r3, #1
 80075b6:	9301      	str	r3, [sp, #4]
 80075b8:	9304      	str	r3, [sp, #16]
 80075ba:	461a      	mov	r2, r3
 80075bc:	920a      	str	r2, [sp, #40]	; 0x28
 80075be:	e00b      	b.n	80075d8 <_dtoa_r+0x290>
 80075c0:	2301      	movs	r3, #1
 80075c2:	e7f3      	b.n	80075ac <_dtoa_r+0x264>
 80075c4:	2300      	movs	r3, #0
 80075c6:	9309      	str	r3, [sp, #36]	; 0x24
 80075c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075ca:	445b      	add	r3, fp
 80075cc:	9301      	str	r3, [sp, #4]
 80075ce:	3301      	adds	r3, #1
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	9304      	str	r3, [sp, #16]
 80075d4:	bfb8      	it	lt
 80075d6:	2301      	movlt	r3, #1
 80075d8:	69e0      	ldr	r0, [r4, #28]
 80075da:	2100      	movs	r1, #0
 80075dc:	2204      	movs	r2, #4
 80075de:	f102 0614 	add.w	r6, r2, #20
 80075e2:	429e      	cmp	r6, r3
 80075e4:	d93d      	bls.n	8007662 <_dtoa_r+0x31a>
 80075e6:	6041      	str	r1, [r0, #4]
 80075e8:	4620      	mov	r0, r4
 80075ea:	f000 fd9f 	bl	800812c <_Balloc>
 80075ee:	9000      	str	r0, [sp, #0]
 80075f0:	2800      	cmp	r0, #0
 80075f2:	d139      	bne.n	8007668 <_dtoa_r+0x320>
 80075f4:	4b16      	ldr	r3, [pc, #88]	; (8007650 <_dtoa_r+0x308>)
 80075f6:	4602      	mov	r2, r0
 80075f8:	f240 11af 	movw	r1, #431	; 0x1af
 80075fc:	e6bd      	b.n	800737a <_dtoa_r+0x32>
 80075fe:	2301      	movs	r3, #1
 8007600:	e7e1      	b.n	80075c6 <_dtoa_r+0x27e>
 8007602:	2501      	movs	r5, #1
 8007604:	2300      	movs	r3, #0
 8007606:	9307      	str	r3, [sp, #28]
 8007608:	9509      	str	r5, [sp, #36]	; 0x24
 800760a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800760e:	9301      	str	r3, [sp, #4]
 8007610:	9304      	str	r3, [sp, #16]
 8007612:	2200      	movs	r2, #0
 8007614:	2312      	movs	r3, #18
 8007616:	e7d1      	b.n	80075bc <_dtoa_r+0x274>
 8007618:	636f4361 	.word	0x636f4361
 800761c:	3fd287a7 	.word	0x3fd287a7
 8007620:	8b60c8b3 	.word	0x8b60c8b3
 8007624:	3fc68a28 	.word	0x3fc68a28
 8007628:	509f79fb 	.word	0x509f79fb
 800762c:	3fd34413 	.word	0x3fd34413
 8007630:	0800af2e 	.word	0x0800af2e
 8007634:	0800af45 	.word	0x0800af45
 8007638:	7ff00000 	.word	0x7ff00000
 800763c:	0800af2a 	.word	0x0800af2a
 8007640:	0800af21 	.word	0x0800af21
 8007644:	0800aef9 	.word	0x0800aef9
 8007648:	3ff80000 	.word	0x3ff80000
 800764c:	0800b030 	.word	0x0800b030
 8007650:	0800af9d 	.word	0x0800af9d
 8007654:	2301      	movs	r3, #1
 8007656:	9309      	str	r3, [sp, #36]	; 0x24
 8007658:	e7d7      	b.n	800760a <_dtoa_r+0x2c2>
 800765a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800765c:	9301      	str	r3, [sp, #4]
 800765e:	9304      	str	r3, [sp, #16]
 8007660:	e7ba      	b.n	80075d8 <_dtoa_r+0x290>
 8007662:	3101      	adds	r1, #1
 8007664:	0052      	lsls	r2, r2, #1
 8007666:	e7ba      	b.n	80075de <_dtoa_r+0x296>
 8007668:	69e3      	ldr	r3, [r4, #28]
 800766a:	9a00      	ldr	r2, [sp, #0]
 800766c:	601a      	str	r2, [r3, #0]
 800766e:	9b04      	ldr	r3, [sp, #16]
 8007670:	2b0e      	cmp	r3, #14
 8007672:	f200 80a8 	bhi.w	80077c6 <_dtoa_r+0x47e>
 8007676:	2d00      	cmp	r5, #0
 8007678:	f000 80a5 	beq.w	80077c6 <_dtoa_r+0x47e>
 800767c:	f1bb 0f00 	cmp.w	fp, #0
 8007680:	dd38      	ble.n	80076f4 <_dtoa_r+0x3ac>
 8007682:	4bc0      	ldr	r3, [pc, #768]	; (8007984 <_dtoa_r+0x63c>)
 8007684:	f00b 020f 	and.w	r2, fp, #15
 8007688:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800768c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007690:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007694:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007698:	d019      	beq.n	80076ce <_dtoa_r+0x386>
 800769a:	4bbb      	ldr	r3, [pc, #748]	; (8007988 <_dtoa_r+0x640>)
 800769c:	ec51 0b18 	vmov	r0, r1, d8
 80076a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80076a4:	f7f9 f8d2 	bl	800084c <__aeabi_ddiv>
 80076a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076ac:	f008 080f 	and.w	r8, r8, #15
 80076b0:	2503      	movs	r5, #3
 80076b2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007988 <_dtoa_r+0x640>
 80076b6:	f1b8 0f00 	cmp.w	r8, #0
 80076ba:	d10a      	bne.n	80076d2 <_dtoa_r+0x38a>
 80076bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076c0:	4632      	mov	r2, r6
 80076c2:	463b      	mov	r3, r7
 80076c4:	f7f9 f8c2 	bl	800084c <__aeabi_ddiv>
 80076c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076cc:	e02b      	b.n	8007726 <_dtoa_r+0x3de>
 80076ce:	2502      	movs	r5, #2
 80076d0:	e7ef      	b.n	80076b2 <_dtoa_r+0x36a>
 80076d2:	f018 0f01 	tst.w	r8, #1
 80076d6:	d008      	beq.n	80076ea <_dtoa_r+0x3a2>
 80076d8:	4630      	mov	r0, r6
 80076da:	4639      	mov	r1, r7
 80076dc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80076e0:	f7f8 ff8a 	bl	80005f8 <__aeabi_dmul>
 80076e4:	3501      	adds	r5, #1
 80076e6:	4606      	mov	r6, r0
 80076e8:	460f      	mov	r7, r1
 80076ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 80076ee:	f109 0908 	add.w	r9, r9, #8
 80076f2:	e7e0      	b.n	80076b6 <_dtoa_r+0x36e>
 80076f4:	f000 809f 	beq.w	8007836 <_dtoa_r+0x4ee>
 80076f8:	f1cb 0600 	rsb	r6, fp, #0
 80076fc:	4ba1      	ldr	r3, [pc, #644]	; (8007984 <_dtoa_r+0x63c>)
 80076fe:	4fa2      	ldr	r7, [pc, #648]	; (8007988 <_dtoa_r+0x640>)
 8007700:	f006 020f 	and.w	r2, r6, #15
 8007704:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770c:	ec51 0b18 	vmov	r0, r1, d8
 8007710:	f7f8 ff72 	bl	80005f8 <__aeabi_dmul>
 8007714:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007718:	1136      	asrs	r6, r6, #4
 800771a:	2300      	movs	r3, #0
 800771c:	2502      	movs	r5, #2
 800771e:	2e00      	cmp	r6, #0
 8007720:	d17e      	bne.n	8007820 <_dtoa_r+0x4d8>
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1d0      	bne.n	80076c8 <_dtoa_r+0x380>
 8007726:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007728:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800772c:	2b00      	cmp	r3, #0
 800772e:	f000 8084 	beq.w	800783a <_dtoa_r+0x4f2>
 8007732:	4b96      	ldr	r3, [pc, #600]	; (800798c <_dtoa_r+0x644>)
 8007734:	2200      	movs	r2, #0
 8007736:	4640      	mov	r0, r8
 8007738:	4649      	mov	r1, r9
 800773a:	f7f9 f9cf 	bl	8000adc <__aeabi_dcmplt>
 800773e:	2800      	cmp	r0, #0
 8007740:	d07b      	beq.n	800783a <_dtoa_r+0x4f2>
 8007742:	9b04      	ldr	r3, [sp, #16]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d078      	beq.n	800783a <_dtoa_r+0x4f2>
 8007748:	9b01      	ldr	r3, [sp, #4]
 800774a:	2b00      	cmp	r3, #0
 800774c:	dd39      	ble.n	80077c2 <_dtoa_r+0x47a>
 800774e:	4b90      	ldr	r3, [pc, #576]	; (8007990 <_dtoa_r+0x648>)
 8007750:	2200      	movs	r2, #0
 8007752:	4640      	mov	r0, r8
 8007754:	4649      	mov	r1, r9
 8007756:	f7f8 ff4f 	bl	80005f8 <__aeabi_dmul>
 800775a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800775e:	9e01      	ldr	r6, [sp, #4]
 8007760:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8007764:	3501      	adds	r5, #1
 8007766:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800776a:	4628      	mov	r0, r5
 800776c:	f7f8 feda 	bl	8000524 <__aeabi_i2d>
 8007770:	4642      	mov	r2, r8
 8007772:	464b      	mov	r3, r9
 8007774:	f7f8 ff40 	bl	80005f8 <__aeabi_dmul>
 8007778:	4b86      	ldr	r3, [pc, #536]	; (8007994 <_dtoa_r+0x64c>)
 800777a:	2200      	movs	r2, #0
 800777c:	f7f8 fd86 	bl	800028c <__adddf3>
 8007780:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007784:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007788:	9303      	str	r3, [sp, #12]
 800778a:	2e00      	cmp	r6, #0
 800778c:	d158      	bne.n	8007840 <_dtoa_r+0x4f8>
 800778e:	4b82      	ldr	r3, [pc, #520]	; (8007998 <_dtoa_r+0x650>)
 8007790:	2200      	movs	r2, #0
 8007792:	4640      	mov	r0, r8
 8007794:	4649      	mov	r1, r9
 8007796:	f7f8 fd77 	bl	8000288 <__aeabi_dsub>
 800779a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800779e:	4680      	mov	r8, r0
 80077a0:	4689      	mov	r9, r1
 80077a2:	f7f9 f9b9 	bl	8000b18 <__aeabi_dcmpgt>
 80077a6:	2800      	cmp	r0, #0
 80077a8:	f040 8296 	bne.w	8007cd8 <_dtoa_r+0x990>
 80077ac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80077b0:	4640      	mov	r0, r8
 80077b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80077b6:	4649      	mov	r1, r9
 80077b8:	f7f9 f990 	bl	8000adc <__aeabi_dcmplt>
 80077bc:	2800      	cmp	r0, #0
 80077be:	f040 8289 	bne.w	8007cd4 <_dtoa_r+0x98c>
 80077c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80077c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f2c0 814e 	blt.w	8007a6a <_dtoa_r+0x722>
 80077ce:	f1bb 0f0e 	cmp.w	fp, #14
 80077d2:	f300 814a 	bgt.w	8007a6a <_dtoa_r+0x722>
 80077d6:	4b6b      	ldr	r3, [pc, #428]	; (8007984 <_dtoa_r+0x63c>)
 80077d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80077dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80077e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f280 80dc 	bge.w	80079a0 <_dtoa_r+0x658>
 80077e8:	9b04      	ldr	r3, [sp, #16]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f300 80d8 	bgt.w	80079a0 <_dtoa_r+0x658>
 80077f0:	f040 826f 	bne.w	8007cd2 <_dtoa_r+0x98a>
 80077f4:	4b68      	ldr	r3, [pc, #416]	; (8007998 <_dtoa_r+0x650>)
 80077f6:	2200      	movs	r2, #0
 80077f8:	4640      	mov	r0, r8
 80077fa:	4649      	mov	r1, r9
 80077fc:	f7f8 fefc 	bl	80005f8 <__aeabi_dmul>
 8007800:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007804:	f7f9 f97e 	bl	8000b04 <__aeabi_dcmpge>
 8007808:	9e04      	ldr	r6, [sp, #16]
 800780a:	4637      	mov	r7, r6
 800780c:	2800      	cmp	r0, #0
 800780e:	f040 8245 	bne.w	8007c9c <_dtoa_r+0x954>
 8007812:	9d00      	ldr	r5, [sp, #0]
 8007814:	2331      	movs	r3, #49	; 0x31
 8007816:	f805 3b01 	strb.w	r3, [r5], #1
 800781a:	f10b 0b01 	add.w	fp, fp, #1
 800781e:	e241      	b.n	8007ca4 <_dtoa_r+0x95c>
 8007820:	07f2      	lsls	r2, r6, #31
 8007822:	d505      	bpl.n	8007830 <_dtoa_r+0x4e8>
 8007824:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007828:	f7f8 fee6 	bl	80005f8 <__aeabi_dmul>
 800782c:	3501      	adds	r5, #1
 800782e:	2301      	movs	r3, #1
 8007830:	1076      	asrs	r6, r6, #1
 8007832:	3708      	adds	r7, #8
 8007834:	e773      	b.n	800771e <_dtoa_r+0x3d6>
 8007836:	2502      	movs	r5, #2
 8007838:	e775      	b.n	8007726 <_dtoa_r+0x3de>
 800783a:	9e04      	ldr	r6, [sp, #16]
 800783c:	465f      	mov	r7, fp
 800783e:	e792      	b.n	8007766 <_dtoa_r+0x41e>
 8007840:	9900      	ldr	r1, [sp, #0]
 8007842:	4b50      	ldr	r3, [pc, #320]	; (8007984 <_dtoa_r+0x63c>)
 8007844:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007848:	4431      	add	r1, r6
 800784a:	9102      	str	r1, [sp, #8]
 800784c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800784e:	eeb0 9a47 	vmov.f32	s18, s14
 8007852:	eef0 9a67 	vmov.f32	s19, s15
 8007856:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800785a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800785e:	2900      	cmp	r1, #0
 8007860:	d044      	beq.n	80078ec <_dtoa_r+0x5a4>
 8007862:	494e      	ldr	r1, [pc, #312]	; (800799c <_dtoa_r+0x654>)
 8007864:	2000      	movs	r0, #0
 8007866:	f7f8 fff1 	bl	800084c <__aeabi_ddiv>
 800786a:	ec53 2b19 	vmov	r2, r3, d9
 800786e:	f7f8 fd0b 	bl	8000288 <__aeabi_dsub>
 8007872:	9d00      	ldr	r5, [sp, #0]
 8007874:	ec41 0b19 	vmov	d9, r0, r1
 8007878:	4649      	mov	r1, r9
 800787a:	4640      	mov	r0, r8
 800787c:	f7f9 f96c 	bl	8000b58 <__aeabi_d2iz>
 8007880:	4606      	mov	r6, r0
 8007882:	f7f8 fe4f 	bl	8000524 <__aeabi_i2d>
 8007886:	4602      	mov	r2, r0
 8007888:	460b      	mov	r3, r1
 800788a:	4640      	mov	r0, r8
 800788c:	4649      	mov	r1, r9
 800788e:	f7f8 fcfb 	bl	8000288 <__aeabi_dsub>
 8007892:	3630      	adds	r6, #48	; 0x30
 8007894:	f805 6b01 	strb.w	r6, [r5], #1
 8007898:	ec53 2b19 	vmov	r2, r3, d9
 800789c:	4680      	mov	r8, r0
 800789e:	4689      	mov	r9, r1
 80078a0:	f7f9 f91c 	bl	8000adc <__aeabi_dcmplt>
 80078a4:	2800      	cmp	r0, #0
 80078a6:	d164      	bne.n	8007972 <_dtoa_r+0x62a>
 80078a8:	4642      	mov	r2, r8
 80078aa:	464b      	mov	r3, r9
 80078ac:	4937      	ldr	r1, [pc, #220]	; (800798c <_dtoa_r+0x644>)
 80078ae:	2000      	movs	r0, #0
 80078b0:	f7f8 fcea 	bl	8000288 <__aeabi_dsub>
 80078b4:	ec53 2b19 	vmov	r2, r3, d9
 80078b8:	f7f9 f910 	bl	8000adc <__aeabi_dcmplt>
 80078bc:	2800      	cmp	r0, #0
 80078be:	f040 80b6 	bne.w	8007a2e <_dtoa_r+0x6e6>
 80078c2:	9b02      	ldr	r3, [sp, #8]
 80078c4:	429d      	cmp	r5, r3
 80078c6:	f43f af7c 	beq.w	80077c2 <_dtoa_r+0x47a>
 80078ca:	4b31      	ldr	r3, [pc, #196]	; (8007990 <_dtoa_r+0x648>)
 80078cc:	ec51 0b19 	vmov	r0, r1, d9
 80078d0:	2200      	movs	r2, #0
 80078d2:	f7f8 fe91 	bl	80005f8 <__aeabi_dmul>
 80078d6:	4b2e      	ldr	r3, [pc, #184]	; (8007990 <_dtoa_r+0x648>)
 80078d8:	ec41 0b19 	vmov	d9, r0, r1
 80078dc:	2200      	movs	r2, #0
 80078de:	4640      	mov	r0, r8
 80078e0:	4649      	mov	r1, r9
 80078e2:	f7f8 fe89 	bl	80005f8 <__aeabi_dmul>
 80078e6:	4680      	mov	r8, r0
 80078e8:	4689      	mov	r9, r1
 80078ea:	e7c5      	b.n	8007878 <_dtoa_r+0x530>
 80078ec:	ec51 0b17 	vmov	r0, r1, d7
 80078f0:	f7f8 fe82 	bl	80005f8 <__aeabi_dmul>
 80078f4:	9b02      	ldr	r3, [sp, #8]
 80078f6:	9d00      	ldr	r5, [sp, #0]
 80078f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80078fa:	ec41 0b19 	vmov	d9, r0, r1
 80078fe:	4649      	mov	r1, r9
 8007900:	4640      	mov	r0, r8
 8007902:	f7f9 f929 	bl	8000b58 <__aeabi_d2iz>
 8007906:	4606      	mov	r6, r0
 8007908:	f7f8 fe0c 	bl	8000524 <__aeabi_i2d>
 800790c:	3630      	adds	r6, #48	; 0x30
 800790e:	4602      	mov	r2, r0
 8007910:	460b      	mov	r3, r1
 8007912:	4640      	mov	r0, r8
 8007914:	4649      	mov	r1, r9
 8007916:	f7f8 fcb7 	bl	8000288 <__aeabi_dsub>
 800791a:	f805 6b01 	strb.w	r6, [r5], #1
 800791e:	9b02      	ldr	r3, [sp, #8]
 8007920:	429d      	cmp	r5, r3
 8007922:	4680      	mov	r8, r0
 8007924:	4689      	mov	r9, r1
 8007926:	f04f 0200 	mov.w	r2, #0
 800792a:	d124      	bne.n	8007976 <_dtoa_r+0x62e>
 800792c:	4b1b      	ldr	r3, [pc, #108]	; (800799c <_dtoa_r+0x654>)
 800792e:	ec51 0b19 	vmov	r0, r1, d9
 8007932:	f7f8 fcab 	bl	800028c <__adddf3>
 8007936:	4602      	mov	r2, r0
 8007938:	460b      	mov	r3, r1
 800793a:	4640      	mov	r0, r8
 800793c:	4649      	mov	r1, r9
 800793e:	f7f9 f8eb 	bl	8000b18 <__aeabi_dcmpgt>
 8007942:	2800      	cmp	r0, #0
 8007944:	d173      	bne.n	8007a2e <_dtoa_r+0x6e6>
 8007946:	ec53 2b19 	vmov	r2, r3, d9
 800794a:	4914      	ldr	r1, [pc, #80]	; (800799c <_dtoa_r+0x654>)
 800794c:	2000      	movs	r0, #0
 800794e:	f7f8 fc9b 	bl	8000288 <__aeabi_dsub>
 8007952:	4602      	mov	r2, r0
 8007954:	460b      	mov	r3, r1
 8007956:	4640      	mov	r0, r8
 8007958:	4649      	mov	r1, r9
 800795a:	f7f9 f8bf 	bl	8000adc <__aeabi_dcmplt>
 800795e:	2800      	cmp	r0, #0
 8007960:	f43f af2f 	beq.w	80077c2 <_dtoa_r+0x47a>
 8007964:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007966:	1e6b      	subs	r3, r5, #1
 8007968:	930f      	str	r3, [sp, #60]	; 0x3c
 800796a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800796e:	2b30      	cmp	r3, #48	; 0x30
 8007970:	d0f8      	beq.n	8007964 <_dtoa_r+0x61c>
 8007972:	46bb      	mov	fp, r7
 8007974:	e04a      	b.n	8007a0c <_dtoa_r+0x6c4>
 8007976:	4b06      	ldr	r3, [pc, #24]	; (8007990 <_dtoa_r+0x648>)
 8007978:	f7f8 fe3e 	bl	80005f8 <__aeabi_dmul>
 800797c:	4680      	mov	r8, r0
 800797e:	4689      	mov	r9, r1
 8007980:	e7bd      	b.n	80078fe <_dtoa_r+0x5b6>
 8007982:	bf00      	nop
 8007984:	0800b030 	.word	0x0800b030
 8007988:	0800b008 	.word	0x0800b008
 800798c:	3ff00000 	.word	0x3ff00000
 8007990:	40240000 	.word	0x40240000
 8007994:	401c0000 	.word	0x401c0000
 8007998:	40140000 	.word	0x40140000
 800799c:	3fe00000 	.word	0x3fe00000
 80079a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80079a4:	9d00      	ldr	r5, [sp, #0]
 80079a6:	4642      	mov	r2, r8
 80079a8:	464b      	mov	r3, r9
 80079aa:	4630      	mov	r0, r6
 80079ac:	4639      	mov	r1, r7
 80079ae:	f7f8 ff4d 	bl	800084c <__aeabi_ddiv>
 80079b2:	f7f9 f8d1 	bl	8000b58 <__aeabi_d2iz>
 80079b6:	9001      	str	r0, [sp, #4]
 80079b8:	f7f8 fdb4 	bl	8000524 <__aeabi_i2d>
 80079bc:	4642      	mov	r2, r8
 80079be:	464b      	mov	r3, r9
 80079c0:	f7f8 fe1a 	bl	80005f8 <__aeabi_dmul>
 80079c4:	4602      	mov	r2, r0
 80079c6:	460b      	mov	r3, r1
 80079c8:	4630      	mov	r0, r6
 80079ca:	4639      	mov	r1, r7
 80079cc:	f7f8 fc5c 	bl	8000288 <__aeabi_dsub>
 80079d0:	9e01      	ldr	r6, [sp, #4]
 80079d2:	9f04      	ldr	r7, [sp, #16]
 80079d4:	3630      	adds	r6, #48	; 0x30
 80079d6:	f805 6b01 	strb.w	r6, [r5], #1
 80079da:	9e00      	ldr	r6, [sp, #0]
 80079dc:	1bae      	subs	r6, r5, r6
 80079de:	42b7      	cmp	r7, r6
 80079e0:	4602      	mov	r2, r0
 80079e2:	460b      	mov	r3, r1
 80079e4:	d134      	bne.n	8007a50 <_dtoa_r+0x708>
 80079e6:	f7f8 fc51 	bl	800028c <__adddf3>
 80079ea:	4642      	mov	r2, r8
 80079ec:	464b      	mov	r3, r9
 80079ee:	4606      	mov	r6, r0
 80079f0:	460f      	mov	r7, r1
 80079f2:	f7f9 f891 	bl	8000b18 <__aeabi_dcmpgt>
 80079f6:	b9c8      	cbnz	r0, 8007a2c <_dtoa_r+0x6e4>
 80079f8:	4642      	mov	r2, r8
 80079fa:	464b      	mov	r3, r9
 80079fc:	4630      	mov	r0, r6
 80079fe:	4639      	mov	r1, r7
 8007a00:	f7f9 f862 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a04:	b110      	cbz	r0, 8007a0c <_dtoa_r+0x6c4>
 8007a06:	9b01      	ldr	r3, [sp, #4]
 8007a08:	07db      	lsls	r3, r3, #31
 8007a0a:	d40f      	bmi.n	8007a2c <_dtoa_r+0x6e4>
 8007a0c:	4651      	mov	r1, sl
 8007a0e:	4620      	mov	r0, r4
 8007a10:	f000 fbcc 	bl	80081ac <_Bfree>
 8007a14:	2300      	movs	r3, #0
 8007a16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a18:	702b      	strb	r3, [r5, #0]
 8007a1a:	f10b 0301 	add.w	r3, fp, #1
 8007a1e:	6013      	str	r3, [r2, #0]
 8007a20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	f43f ace2 	beq.w	80073ec <_dtoa_r+0xa4>
 8007a28:	601d      	str	r5, [r3, #0]
 8007a2a:	e4df      	b.n	80073ec <_dtoa_r+0xa4>
 8007a2c:	465f      	mov	r7, fp
 8007a2e:	462b      	mov	r3, r5
 8007a30:	461d      	mov	r5, r3
 8007a32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a36:	2a39      	cmp	r2, #57	; 0x39
 8007a38:	d106      	bne.n	8007a48 <_dtoa_r+0x700>
 8007a3a:	9a00      	ldr	r2, [sp, #0]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d1f7      	bne.n	8007a30 <_dtoa_r+0x6e8>
 8007a40:	9900      	ldr	r1, [sp, #0]
 8007a42:	2230      	movs	r2, #48	; 0x30
 8007a44:	3701      	adds	r7, #1
 8007a46:	700a      	strb	r2, [r1, #0]
 8007a48:	781a      	ldrb	r2, [r3, #0]
 8007a4a:	3201      	adds	r2, #1
 8007a4c:	701a      	strb	r2, [r3, #0]
 8007a4e:	e790      	b.n	8007972 <_dtoa_r+0x62a>
 8007a50:	4ba3      	ldr	r3, [pc, #652]	; (8007ce0 <_dtoa_r+0x998>)
 8007a52:	2200      	movs	r2, #0
 8007a54:	f7f8 fdd0 	bl	80005f8 <__aeabi_dmul>
 8007a58:	2200      	movs	r2, #0
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	4606      	mov	r6, r0
 8007a5e:	460f      	mov	r7, r1
 8007a60:	f7f9 f832 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a64:	2800      	cmp	r0, #0
 8007a66:	d09e      	beq.n	80079a6 <_dtoa_r+0x65e>
 8007a68:	e7d0      	b.n	8007a0c <_dtoa_r+0x6c4>
 8007a6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a6c:	2a00      	cmp	r2, #0
 8007a6e:	f000 80ca 	beq.w	8007c06 <_dtoa_r+0x8be>
 8007a72:	9a07      	ldr	r2, [sp, #28]
 8007a74:	2a01      	cmp	r2, #1
 8007a76:	f300 80ad 	bgt.w	8007bd4 <_dtoa_r+0x88c>
 8007a7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a7c:	2a00      	cmp	r2, #0
 8007a7e:	f000 80a5 	beq.w	8007bcc <_dtoa_r+0x884>
 8007a82:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007a86:	9e08      	ldr	r6, [sp, #32]
 8007a88:	9d05      	ldr	r5, [sp, #20]
 8007a8a:	9a05      	ldr	r2, [sp, #20]
 8007a8c:	441a      	add	r2, r3
 8007a8e:	9205      	str	r2, [sp, #20]
 8007a90:	9a06      	ldr	r2, [sp, #24]
 8007a92:	2101      	movs	r1, #1
 8007a94:	441a      	add	r2, r3
 8007a96:	4620      	mov	r0, r4
 8007a98:	9206      	str	r2, [sp, #24]
 8007a9a:	f000 fc87 	bl	80083ac <__i2b>
 8007a9e:	4607      	mov	r7, r0
 8007aa0:	b165      	cbz	r5, 8007abc <_dtoa_r+0x774>
 8007aa2:	9b06      	ldr	r3, [sp, #24]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	dd09      	ble.n	8007abc <_dtoa_r+0x774>
 8007aa8:	42ab      	cmp	r3, r5
 8007aaa:	9a05      	ldr	r2, [sp, #20]
 8007aac:	bfa8      	it	ge
 8007aae:	462b      	movge	r3, r5
 8007ab0:	1ad2      	subs	r2, r2, r3
 8007ab2:	9205      	str	r2, [sp, #20]
 8007ab4:	9a06      	ldr	r2, [sp, #24]
 8007ab6:	1aed      	subs	r5, r5, r3
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	9306      	str	r3, [sp, #24]
 8007abc:	9b08      	ldr	r3, [sp, #32]
 8007abe:	b1f3      	cbz	r3, 8007afe <_dtoa_r+0x7b6>
 8007ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	f000 80a3 	beq.w	8007c0e <_dtoa_r+0x8c6>
 8007ac8:	2e00      	cmp	r6, #0
 8007aca:	dd10      	ble.n	8007aee <_dtoa_r+0x7a6>
 8007acc:	4639      	mov	r1, r7
 8007ace:	4632      	mov	r2, r6
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	f000 fd2b 	bl	800852c <__pow5mult>
 8007ad6:	4652      	mov	r2, sl
 8007ad8:	4601      	mov	r1, r0
 8007ada:	4607      	mov	r7, r0
 8007adc:	4620      	mov	r0, r4
 8007ade:	f000 fc7b 	bl	80083d8 <__multiply>
 8007ae2:	4651      	mov	r1, sl
 8007ae4:	4680      	mov	r8, r0
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	f000 fb60 	bl	80081ac <_Bfree>
 8007aec:	46c2      	mov	sl, r8
 8007aee:	9b08      	ldr	r3, [sp, #32]
 8007af0:	1b9a      	subs	r2, r3, r6
 8007af2:	d004      	beq.n	8007afe <_dtoa_r+0x7b6>
 8007af4:	4651      	mov	r1, sl
 8007af6:	4620      	mov	r0, r4
 8007af8:	f000 fd18 	bl	800852c <__pow5mult>
 8007afc:	4682      	mov	sl, r0
 8007afe:	2101      	movs	r1, #1
 8007b00:	4620      	mov	r0, r4
 8007b02:	f000 fc53 	bl	80083ac <__i2b>
 8007b06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	4606      	mov	r6, r0
 8007b0c:	f340 8081 	ble.w	8007c12 <_dtoa_r+0x8ca>
 8007b10:	461a      	mov	r2, r3
 8007b12:	4601      	mov	r1, r0
 8007b14:	4620      	mov	r0, r4
 8007b16:	f000 fd09 	bl	800852c <__pow5mult>
 8007b1a:	9b07      	ldr	r3, [sp, #28]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	4606      	mov	r6, r0
 8007b20:	dd7a      	ble.n	8007c18 <_dtoa_r+0x8d0>
 8007b22:	f04f 0800 	mov.w	r8, #0
 8007b26:	6933      	ldr	r3, [r6, #16]
 8007b28:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007b2c:	6918      	ldr	r0, [r3, #16]
 8007b2e:	f000 fbef 	bl	8008310 <__hi0bits>
 8007b32:	f1c0 0020 	rsb	r0, r0, #32
 8007b36:	9b06      	ldr	r3, [sp, #24]
 8007b38:	4418      	add	r0, r3
 8007b3a:	f010 001f 	ands.w	r0, r0, #31
 8007b3e:	f000 8094 	beq.w	8007c6a <_dtoa_r+0x922>
 8007b42:	f1c0 0320 	rsb	r3, r0, #32
 8007b46:	2b04      	cmp	r3, #4
 8007b48:	f340 8085 	ble.w	8007c56 <_dtoa_r+0x90e>
 8007b4c:	9b05      	ldr	r3, [sp, #20]
 8007b4e:	f1c0 001c 	rsb	r0, r0, #28
 8007b52:	4403      	add	r3, r0
 8007b54:	9305      	str	r3, [sp, #20]
 8007b56:	9b06      	ldr	r3, [sp, #24]
 8007b58:	4403      	add	r3, r0
 8007b5a:	4405      	add	r5, r0
 8007b5c:	9306      	str	r3, [sp, #24]
 8007b5e:	9b05      	ldr	r3, [sp, #20]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	dd05      	ble.n	8007b70 <_dtoa_r+0x828>
 8007b64:	4651      	mov	r1, sl
 8007b66:	461a      	mov	r2, r3
 8007b68:	4620      	mov	r0, r4
 8007b6a:	f000 fd39 	bl	80085e0 <__lshift>
 8007b6e:	4682      	mov	sl, r0
 8007b70:	9b06      	ldr	r3, [sp, #24]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	dd05      	ble.n	8007b82 <_dtoa_r+0x83a>
 8007b76:	4631      	mov	r1, r6
 8007b78:	461a      	mov	r2, r3
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f000 fd30 	bl	80085e0 <__lshift>
 8007b80:	4606      	mov	r6, r0
 8007b82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d072      	beq.n	8007c6e <_dtoa_r+0x926>
 8007b88:	4631      	mov	r1, r6
 8007b8a:	4650      	mov	r0, sl
 8007b8c:	f000 fd94 	bl	80086b8 <__mcmp>
 8007b90:	2800      	cmp	r0, #0
 8007b92:	da6c      	bge.n	8007c6e <_dtoa_r+0x926>
 8007b94:	2300      	movs	r3, #0
 8007b96:	4651      	mov	r1, sl
 8007b98:	220a      	movs	r2, #10
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	f000 fb28 	bl	80081f0 <__multadd>
 8007ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ba2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007ba6:	4682      	mov	sl, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f000 81b0 	beq.w	8007f0e <_dtoa_r+0xbc6>
 8007bae:	2300      	movs	r3, #0
 8007bb0:	4639      	mov	r1, r7
 8007bb2:	220a      	movs	r2, #10
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	f000 fb1b 	bl	80081f0 <__multadd>
 8007bba:	9b01      	ldr	r3, [sp, #4]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	4607      	mov	r7, r0
 8007bc0:	f300 8096 	bgt.w	8007cf0 <_dtoa_r+0x9a8>
 8007bc4:	9b07      	ldr	r3, [sp, #28]
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	dc59      	bgt.n	8007c7e <_dtoa_r+0x936>
 8007bca:	e091      	b.n	8007cf0 <_dtoa_r+0x9a8>
 8007bcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007bce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007bd2:	e758      	b.n	8007a86 <_dtoa_r+0x73e>
 8007bd4:	9b04      	ldr	r3, [sp, #16]
 8007bd6:	1e5e      	subs	r6, r3, #1
 8007bd8:	9b08      	ldr	r3, [sp, #32]
 8007bda:	42b3      	cmp	r3, r6
 8007bdc:	bfbf      	itttt	lt
 8007bde:	9b08      	ldrlt	r3, [sp, #32]
 8007be0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007be2:	9608      	strlt	r6, [sp, #32]
 8007be4:	1af3      	sublt	r3, r6, r3
 8007be6:	bfb4      	ite	lt
 8007be8:	18d2      	addlt	r2, r2, r3
 8007bea:	1b9e      	subge	r6, r3, r6
 8007bec:	9b04      	ldr	r3, [sp, #16]
 8007bee:	bfbc      	itt	lt
 8007bf0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007bf2:	2600      	movlt	r6, #0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	bfb7      	itett	lt
 8007bf8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007bfc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007c00:	1a9d      	sublt	r5, r3, r2
 8007c02:	2300      	movlt	r3, #0
 8007c04:	e741      	b.n	8007a8a <_dtoa_r+0x742>
 8007c06:	9e08      	ldr	r6, [sp, #32]
 8007c08:	9d05      	ldr	r5, [sp, #20]
 8007c0a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007c0c:	e748      	b.n	8007aa0 <_dtoa_r+0x758>
 8007c0e:	9a08      	ldr	r2, [sp, #32]
 8007c10:	e770      	b.n	8007af4 <_dtoa_r+0x7ac>
 8007c12:	9b07      	ldr	r3, [sp, #28]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	dc19      	bgt.n	8007c4c <_dtoa_r+0x904>
 8007c18:	9b02      	ldr	r3, [sp, #8]
 8007c1a:	b9bb      	cbnz	r3, 8007c4c <_dtoa_r+0x904>
 8007c1c:	9b03      	ldr	r3, [sp, #12]
 8007c1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c22:	b99b      	cbnz	r3, 8007c4c <_dtoa_r+0x904>
 8007c24:	9b03      	ldr	r3, [sp, #12]
 8007c26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c2a:	0d1b      	lsrs	r3, r3, #20
 8007c2c:	051b      	lsls	r3, r3, #20
 8007c2e:	b183      	cbz	r3, 8007c52 <_dtoa_r+0x90a>
 8007c30:	9b05      	ldr	r3, [sp, #20]
 8007c32:	3301      	adds	r3, #1
 8007c34:	9305      	str	r3, [sp, #20]
 8007c36:	9b06      	ldr	r3, [sp, #24]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	9306      	str	r3, [sp, #24]
 8007c3c:	f04f 0801 	mov.w	r8, #1
 8007c40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f47f af6f 	bne.w	8007b26 <_dtoa_r+0x7de>
 8007c48:	2001      	movs	r0, #1
 8007c4a:	e774      	b.n	8007b36 <_dtoa_r+0x7ee>
 8007c4c:	f04f 0800 	mov.w	r8, #0
 8007c50:	e7f6      	b.n	8007c40 <_dtoa_r+0x8f8>
 8007c52:	4698      	mov	r8, r3
 8007c54:	e7f4      	b.n	8007c40 <_dtoa_r+0x8f8>
 8007c56:	d082      	beq.n	8007b5e <_dtoa_r+0x816>
 8007c58:	9a05      	ldr	r2, [sp, #20]
 8007c5a:	331c      	adds	r3, #28
 8007c5c:	441a      	add	r2, r3
 8007c5e:	9205      	str	r2, [sp, #20]
 8007c60:	9a06      	ldr	r2, [sp, #24]
 8007c62:	441a      	add	r2, r3
 8007c64:	441d      	add	r5, r3
 8007c66:	9206      	str	r2, [sp, #24]
 8007c68:	e779      	b.n	8007b5e <_dtoa_r+0x816>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	e7f4      	b.n	8007c58 <_dtoa_r+0x910>
 8007c6e:	9b04      	ldr	r3, [sp, #16]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	dc37      	bgt.n	8007ce4 <_dtoa_r+0x99c>
 8007c74:	9b07      	ldr	r3, [sp, #28]
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	dd34      	ble.n	8007ce4 <_dtoa_r+0x99c>
 8007c7a:	9b04      	ldr	r3, [sp, #16]
 8007c7c:	9301      	str	r3, [sp, #4]
 8007c7e:	9b01      	ldr	r3, [sp, #4]
 8007c80:	b963      	cbnz	r3, 8007c9c <_dtoa_r+0x954>
 8007c82:	4631      	mov	r1, r6
 8007c84:	2205      	movs	r2, #5
 8007c86:	4620      	mov	r0, r4
 8007c88:	f000 fab2 	bl	80081f0 <__multadd>
 8007c8c:	4601      	mov	r1, r0
 8007c8e:	4606      	mov	r6, r0
 8007c90:	4650      	mov	r0, sl
 8007c92:	f000 fd11 	bl	80086b8 <__mcmp>
 8007c96:	2800      	cmp	r0, #0
 8007c98:	f73f adbb 	bgt.w	8007812 <_dtoa_r+0x4ca>
 8007c9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c9e:	9d00      	ldr	r5, [sp, #0]
 8007ca0:	ea6f 0b03 	mvn.w	fp, r3
 8007ca4:	f04f 0800 	mov.w	r8, #0
 8007ca8:	4631      	mov	r1, r6
 8007caa:	4620      	mov	r0, r4
 8007cac:	f000 fa7e 	bl	80081ac <_Bfree>
 8007cb0:	2f00      	cmp	r7, #0
 8007cb2:	f43f aeab 	beq.w	8007a0c <_dtoa_r+0x6c4>
 8007cb6:	f1b8 0f00 	cmp.w	r8, #0
 8007cba:	d005      	beq.n	8007cc8 <_dtoa_r+0x980>
 8007cbc:	45b8      	cmp	r8, r7
 8007cbe:	d003      	beq.n	8007cc8 <_dtoa_r+0x980>
 8007cc0:	4641      	mov	r1, r8
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	f000 fa72 	bl	80081ac <_Bfree>
 8007cc8:	4639      	mov	r1, r7
 8007cca:	4620      	mov	r0, r4
 8007ccc:	f000 fa6e 	bl	80081ac <_Bfree>
 8007cd0:	e69c      	b.n	8007a0c <_dtoa_r+0x6c4>
 8007cd2:	2600      	movs	r6, #0
 8007cd4:	4637      	mov	r7, r6
 8007cd6:	e7e1      	b.n	8007c9c <_dtoa_r+0x954>
 8007cd8:	46bb      	mov	fp, r7
 8007cda:	4637      	mov	r7, r6
 8007cdc:	e599      	b.n	8007812 <_dtoa_r+0x4ca>
 8007cde:	bf00      	nop
 8007ce0:	40240000 	.word	0x40240000
 8007ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	f000 80c8 	beq.w	8007e7c <_dtoa_r+0xb34>
 8007cec:	9b04      	ldr	r3, [sp, #16]
 8007cee:	9301      	str	r3, [sp, #4]
 8007cf0:	2d00      	cmp	r5, #0
 8007cf2:	dd05      	ble.n	8007d00 <_dtoa_r+0x9b8>
 8007cf4:	4639      	mov	r1, r7
 8007cf6:	462a      	mov	r2, r5
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	f000 fc71 	bl	80085e0 <__lshift>
 8007cfe:	4607      	mov	r7, r0
 8007d00:	f1b8 0f00 	cmp.w	r8, #0
 8007d04:	d05b      	beq.n	8007dbe <_dtoa_r+0xa76>
 8007d06:	6879      	ldr	r1, [r7, #4]
 8007d08:	4620      	mov	r0, r4
 8007d0a:	f000 fa0f 	bl	800812c <_Balloc>
 8007d0e:	4605      	mov	r5, r0
 8007d10:	b928      	cbnz	r0, 8007d1e <_dtoa_r+0x9d6>
 8007d12:	4b83      	ldr	r3, [pc, #524]	; (8007f20 <_dtoa_r+0xbd8>)
 8007d14:	4602      	mov	r2, r0
 8007d16:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007d1a:	f7ff bb2e 	b.w	800737a <_dtoa_r+0x32>
 8007d1e:	693a      	ldr	r2, [r7, #16]
 8007d20:	3202      	adds	r2, #2
 8007d22:	0092      	lsls	r2, r2, #2
 8007d24:	f107 010c 	add.w	r1, r7, #12
 8007d28:	300c      	adds	r0, #12
 8007d2a:	f7ff fa70 	bl	800720e <memcpy>
 8007d2e:	2201      	movs	r2, #1
 8007d30:	4629      	mov	r1, r5
 8007d32:	4620      	mov	r0, r4
 8007d34:	f000 fc54 	bl	80085e0 <__lshift>
 8007d38:	9b00      	ldr	r3, [sp, #0]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	9304      	str	r3, [sp, #16]
 8007d3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d42:	4413      	add	r3, r2
 8007d44:	9308      	str	r3, [sp, #32]
 8007d46:	9b02      	ldr	r3, [sp, #8]
 8007d48:	f003 0301 	and.w	r3, r3, #1
 8007d4c:	46b8      	mov	r8, r7
 8007d4e:	9306      	str	r3, [sp, #24]
 8007d50:	4607      	mov	r7, r0
 8007d52:	9b04      	ldr	r3, [sp, #16]
 8007d54:	4631      	mov	r1, r6
 8007d56:	3b01      	subs	r3, #1
 8007d58:	4650      	mov	r0, sl
 8007d5a:	9301      	str	r3, [sp, #4]
 8007d5c:	f7ff fa6c 	bl	8007238 <quorem>
 8007d60:	4641      	mov	r1, r8
 8007d62:	9002      	str	r0, [sp, #8]
 8007d64:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007d68:	4650      	mov	r0, sl
 8007d6a:	f000 fca5 	bl	80086b8 <__mcmp>
 8007d6e:	463a      	mov	r2, r7
 8007d70:	9005      	str	r0, [sp, #20]
 8007d72:	4631      	mov	r1, r6
 8007d74:	4620      	mov	r0, r4
 8007d76:	f000 fcbb 	bl	80086f0 <__mdiff>
 8007d7a:	68c2      	ldr	r2, [r0, #12]
 8007d7c:	4605      	mov	r5, r0
 8007d7e:	bb02      	cbnz	r2, 8007dc2 <_dtoa_r+0xa7a>
 8007d80:	4601      	mov	r1, r0
 8007d82:	4650      	mov	r0, sl
 8007d84:	f000 fc98 	bl	80086b8 <__mcmp>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	4629      	mov	r1, r5
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	9209      	str	r2, [sp, #36]	; 0x24
 8007d90:	f000 fa0c 	bl	80081ac <_Bfree>
 8007d94:	9b07      	ldr	r3, [sp, #28]
 8007d96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d98:	9d04      	ldr	r5, [sp, #16]
 8007d9a:	ea43 0102 	orr.w	r1, r3, r2
 8007d9e:	9b06      	ldr	r3, [sp, #24]
 8007da0:	4319      	orrs	r1, r3
 8007da2:	d110      	bne.n	8007dc6 <_dtoa_r+0xa7e>
 8007da4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007da8:	d029      	beq.n	8007dfe <_dtoa_r+0xab6>
 8007daa:	9b05      	ldr	r3, [sp, #20]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	dd02      	ble.n	8007db6 <_dtoa_r+0xa6e>
 8007db0:	9b02      	ldr	r3, [sp, #8]
 8007db2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007db6:	9b01      	ldr	r3, [sp, #4]
 8007db8:	f883 9000 	strb.w	r9, [r3]
 8007dbc:	e774      	b.n	8007ca8 <_dtoa_r+0x960>
 8007dbe:	4638      	mov	r0, r7
 8007dc0:	e7ba      	b.n	8007d38 <_dtoa_r+0x9f0>
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	e7e1      	b.n	8007d8a <_dtoa_r+0xa42>
 8007dc6:	9b05      	ldr	r3, [sp, #20]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	db04      	blt.n	8007dd6 <_dtoa_r+0xa8e>
 8007dcc:	9907      	ldr	r1, [sp, #28]
 8007dce:	430b      	orrs	r3, r1
 8007dd0:	9906      	ldr	r1, [sp, #24]
 8007dd2:	430b      	orrs	r3, r1
 8007dd4:	d120      	bne.n	8007e18 <_dtoa_r+0xad0>
 8007dd6:	2a00      	cmp	r2, #0
 8007dd8:	dded      	ble.n	8007db6 <_dtoa_r+0xa6e>
 8007dda:	4651      	mov	r1, sl
 8007ddc:	2201      	movs	r2, #1
 8007dde:	4620      	mov	r0, r4
 8007de0:	f000 fbfe 	bl	80085e0 <__lshift>
 8007de4:	4631      	mov	r1, r6
 8007de6:	4682      	mov	sl, r0
 8007de8:	f000 fc66 	bl	80086b8 <__mcmp>
 8007dec:	2800      	cmp	r0, #0
 8007dee:	dc03      	bgt.n	8007df8 <_dtoa_r+0xab0>
 8007df0:	d1e1      	bne.n	8007db6 <_dtoa_r+0xa6e>
 8007df2:	f019 0f01 	tst.w	r9, #1
 8007df6:	d0de      	beq.n	8007db6 <_dtoa_r+0xa6e>
 8007df8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007dfc:	d1d8      	bne.n	8007db0 <_dtoa_r+0xa68>
 8007dfe:	9a01      	ldr	r2, [sp, #4]
 8007e00:	2339      	movs	r3, #57	; 0x39
 8007e02:	7013      	strb	r3, [r2, #0]
 8007e04:	462b      	mov	r3, r5
 8007e06:	461d      	mov	r5, r3
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007e0e:	2a39      	cmp	r2, #57	; 0x39
 8007e10:	d06c      	beq.n	8007eec <_dtoa_r+0xba4>
 8007e12:	3201      	adds	r2, #1
 8007e14:	701a      	strb	r2, [r3, #0]
 8007e16:	e747      	b.n	8007ca8 <_dtoa_r+0x960>
 8007e18:	2a00      	cmp	r2, #0
 8007e1a:	dd07      	ble.n	8007e2c <_dtoa_r+0xae4>
 8007e1c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007e20:	d0ed      	beq.n	8007dfe <_dtoa_r+0xab6>
 8007e22:	9a01      	ldr	r2, [sp, #4]
 8007e24:	f109 0301 	add.w	r3, r9, #1
 8007e28:	7013      	strb	r3, [r2, #0]
 8007e2a:	e73d      	b.n	8007ca8 <_dtoa_r+0x960>
 8007e2c:	9b04      	ldr	r3, [sp, #16]
 8007e2e:	9a08      	ldr	r2, [sp, #32]
 8007e30:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d043      	beq.n	8007ec0 <_dtoa_r+0xb78>
 8007e38:	4651      	mov	r1, sl
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	220a      	movs	r2, #10
 8007e3e:	4620      	mov	r0, r4
 8007e40:	f000 f9d6 	bl	80081f0 <__multadd>
 8007e44:	45b8      	cmp	r8, r7
 8007e46:	4682      	mov	sl, r0
 8007e48:	f04f 0300 	mov.w	r3, #0
 8007e4c:	f04f 020a 	mov.w	r2, #10
 8007e50:	4641      	mov	r1, r8
 8007e52:	4620      	mov	r0, r4
 8007e54:	d107      	bne.n	8007e66 <_dtoa_r+0xb1e>
 8007e56:	f000 f9cb 	bl	80081f0 <__multadd>
 8007e5a:	4680      	mov	r8, r0
 8007e5c:	4607      	mov	r7, r0
 8007e5e:	9b04      	ldr	r3, [sp, #16]
 8007e60:	3301      	adds	r3, #1
 8007e62:	9304      	str	r3, [sp, #16]
 8007e64:	e775      	b.n	8007d52 <_dtoa_r+0xa0a>
 8007e66:	f000 f9c3 	bl	80081f0 <__multadd>
 8007e6a:	4639      	mov	r1, r7
 8007e6c:	4680      	mov	r8, r0
 8007e6e:	2300      	movs	r3, #0
 8007e70:	220a      	movs	r2, #10
 8007e72:	4620      	mov	r0, r4
 8007e74:	f000 f9bc 	bl	80081f0 <__multadd>
 8007e78:	4607      	mov	r7, r0
 8007e7a:	e7f0      	b.n	8007e5e <_dtoa_r+0xb16>
 8007e7c:	9b04      	ldr	r3, [sp, #16]
 8007e7e:	9301      	str	r3, [sp, #4]
 8007e80:	9d00      	ldr	r5, [sp, #0]
 8007e82:	4631      	mov	r1, r6
 8007e84:	4650      	mov	r0, sl
 8007e86:	f7ff f9d7 	bl	8007238 <quorem>
 8007e8a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007e8e:	9b00      	ldr	r3, [sp, #0]
 8007e90:	f805 9b01 	strb.w	r9, [r5], #1
 8007e94:	1aea      	subs	r2, r5, r3
 8007e96:	9b01      	ldr	r3, [sp, #4]
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	dd07      	ble.n	8007eac <_dtoa_r+0xb64>
 8007e9c:	4651      	mov	r1, sl
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	220a      	movs	r2, #10
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	f000 f9a4 	bl	80081f0 <__multadd>
 8007ea8:	4682      	mov	sl, r0
 8007eaa:	e7ea      	b.n	8007e82 <_dtoa_r+0xb3a>
 8007eac:	9b01      	ldr	r3, [sp, #4]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	bfc8      	it	gt
 8007eb2:	461d      	movgt	r5, r3
 8007eb4:	9b00      	ldr	r3, [sp, #0]
 8007eb6:	bfd8      	it	le
 8007eb8:	2501      	movle	r5, #1
 8007eba:	441d      	add	r5, r3
 8007ebc:	f04f 0800 	mov.w	r8, #0
 8007ec0:	4651      	mov	r1, sl
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	f000 fb8b 	bl	80085e0 <__lshift>
 8007eca:	4631      	mov	r1, r6
 8007ecc:	4682      	mov	sl, r0
 8007ece:	f000 fbf3 	bl	80086b8 <__mcmp>
 8007ed2:	2800      	cmp	r0, #0
 8007ed4:	dc96      	bgt.n	8007e04 <_dtoa_r+0xabc>
 8007ed6:	d102      	bne.n	8007ede <_dtoa_r+0xb96>
 8007ed8:	f019 0f01 	tst.w	r9, #1
 8007edc:	d192      	bne.n	8007e04 <_dtoa_r+0xabc>
 8007ede:	462b      	mov	r3, r5
 8007ee0:	461d      	mov	r5, r3
 8007ee2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ee6:	2a30      	cmp	r2, #48	; 0x30
 8007ee8:	d0fa      	beq.n	8007ee0 <_dtoa_r+0xb98>
 8007eea:	e6dd      	b.n	8007ca8 <_dtoa_r+0x960>
 8007eec:	9a00      	ldr	r2, [sp, #0]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d189      	bne.n	8007e06 <_dtoa_r+0xabe>
 8007ef2:	f10b 0b01 	add.w	fp, fp, #1
 8007ef6:	2331      	movs	r3, #49	; 0x31
 8007ef8:	e796      	b.n	8007e28 <_dtoa_r+0xae0>
 8007efa:	4b0a      	ldr	r3, [pc, #40]	; (8007f24 <_dtoa_r+0xbdc>)
 8007efc:	f7ff ba99 	b.w	8007432 <_dtoa_r+0xea>
 8007f00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f47f aa6d 	bne.w	80073e2 <_dtoa_r+0x9a>
 8007f08:	4b07      	ldr	r3, [pc, #28]	; (8007f28 <_dtoa_r+0xbe0>)
 8007f0a:	f7ff ba92 	b.w	8007432 <_dtoa_r+0xea>
 8007f0e:	9b01      	ldr	r3, [sp, #4]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	dcb5      	bgt.n	8007e80 <_dtoa_r+0xb38>
 8007f14:	9b07      	ldr	r3, [sp, #28]
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	f73f aeb1 	bgt.w	8007c7e <_dtoa_r+0x936>
 8007f1c:	e7b0      	b.n	8007e80 <_dtoa_r+0xb38>
 8007f1e:	bf00      	nop
 8007f20:	0800af9d 	.word	0x0800af9d
 8007f24:	0800aef8 	.word	0x0800aef8
 8007f28:	0800af21 	.word	0x0800af21

08007f2c <_free_r>:
 8007f2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f2e:	2900      	cmp	r1, #0
 8007f30:	d044      	beq.n	8007fbc <_free_r+0x90>
 8007f32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f36:	9001      	str	r0, [sp, #4]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f1a1 0404 	sub.w	r4, r1, #4
 8007f3e:	bfb8      	it	lt
 8007f40:	18e4      	addlt	r4, r4, r3
 8007f42:	f000 f8e7 	bl	8008114 <__malloc_lock>
 8007f46:	4a1e      	ldr	r2, [pc, #120]	; (8007fc0 <_free_r+0x94>)
 8007f48:	9801      	ldr	r0, [sp, #4]
 8007f4a:	6813      	ldr	r3, [r2, #0]
 8007f4c:	b933      	cbnz	r3, 8007f5c <_free_r+0x30>
 8007f4e:	6063      	str	r3, [r4, #4]
 8007f50:	6014      	str	r4, [r2, #0]
 8007f52:	b003      	add	sp, #12
 8007f54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f58:	f000 b8e2 	b.w	8008120 <__malloc_unlock>
 8007f5c:	42a3      	cmp	r3, r4
 8007f5e:	d908      	bls.n	8007f72 <_free_r+0x46>
 8007f60:	6825      	ldr	r5, [r4, #0]
 8007f62:	1961      	adds	r1, r4, r5
 8007f64:	428b      	cmp	r3, r1
 8007f66:	bf01      	itttt	eq
 8007f68:	6819      	ldreq	r1, [r3, #0]
 8007f6a:	685b      	ldreq	r3, [r3, #4]
 8007f6c:	1949      	addeq	r1, r1, r5
 8007f6e:	6021      	streq	r1, [r4, #0]
 8007f70:	e7ed      	b.n	8007f4e <_free_r+0x22>
 8007f72:	461a      	mov	r2, r3
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	b10b      	cbz	r3, 8007f7c <_free_r+0x50>
 8007f78:	42a3      	cmp	r3, r4
 8007f7a:	d9fa      	bls.n	8007f72 <_free_r+0x46>
 8007f7c:	6811      	ldr	r1, [r2, #0]
 8007f7e:	1855      	adds	r5, r2, r1
 8007f80:	42a5      	cmp	r5, r4
 8007f82:	d10b      	bne.n	8007f9c <_free_r+0x70>
 8007f84:	6824      	ldr	r4, [r4, #0]
 8007f86:	4421      	add	r1, r4
 8007f88:	1854      	adds	r4, r2, r1
 8007f8a:	42a3      	cmp	r3, r4
 8007f8c:	6011      	str	r1, [r2, #0]
 8007f8e:	d1e0      	bne.n	8007f52 <_free_r+0x26>
 8007f90:	681c      	ldr	r4, [r3, #0]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	6053      	str	r3, [r2, #4]
 8007f96:	440c      	add	r4, r1
 8007f98:	6014      	str	r4, [r2, #0]
 8007f9a:	e7da      	b.n	8007f52 <_free_r+0x26>
 8007f9c:	d902      	bls.n	8007fa4 <_free_r+0x78>
 8007f9e:	230c      	movs	r3, #12
 8007fa0:	6003      	str	r3, [r0, #0]
 8007fa2:	e7d6      	b.n	8007f52 <_free_r+0x26>
 8007fa4:	6825      	ldr	r5, [r4, #0]
 8007fa6:	1961      	adds	r1, r4, r5
 8007fa8:	428b      	cmp	r3, r1
 8007faa:	bf04      	itt	eq
 8007fac:	6819      	ldreq	r1, [r3, #0]
 8007fae:	685b      	ldreq	r3, [r3, #4]
 8007fb0:	6063      	str	r3, [r4, #4]
 8007fb2:	bf04      	itt	eq
 8007fb4:	1949      	addeq	r1, r1, r5
 8007fb6:	6021      	streq	r1, [r4, #0]
 8007fb8:	6054      	str	r4, [r2, #4]
 8007fba:	e7ca      	b.n	8007f52 <_free_r+0x26>
 8007fbc:	b003      	add	sp, #12
 8007fbe:	bd30      	pop	{r4, r5, pc}
 8007fc0:	200046a0 	.word	0x200046a0

08007fc4 <malloc>:
 8007fc4:	4b02      	ldr	r3, [pc, #8]	; (8007fd0 <malloc+0xc>)
 8007fc6:	4601      	mov	r1, r0
 8007fc8:	6818      	ldr	r0, [r3, #0]
 8007fca:	f000 b823 	b.w	8008014 <_malloc_r>
 8007fce:	bf00      	nop
 8007fd0:	20000088 	.word	0x20000088

08007fd4 <sbrk_aligned>:
 8007fd4:	b570      	push	{r4, r5, r6, lr}
 8007fd6:	4e0e      	ldr	r6, [pc, #56]	; (8008010 <sbrk_aligned+0x3c>)
 8007fd8:	460c      	mov	r4, r1
 8007fda:	6831      	ldr	r1, [r6, #0]
 8007fdc:	4605      	mov	r5, r0
 8007fde:	b911      	cbnz	r1, 8007fe6 <sbrk_aligned+0x12>
 8007fe0:	f001 fe1a 	bl	8009c18 <_sbrk_r>
 8007fe4:	6030      	str	r0, [r6, #0]
 8007fe6:	4621      	mov	r1, r4
 8007fe8:	4628      	mov	r0, r5
 8007fea:	f001 fe15 	bl	8009c18 <_sbrk_r>
 8007fee:	1c43      	adds	r3, r0, #1
 8007ff0:	d00a      	beq.n	8008008 <sbrk_aligned+0x34>
 8007ff2:	1cc4      	adds	r4, r0, #3
 8007ff4:	f024 0403 	bic.w	r4, r4, #3
 8007ff8:	42a0      	cmp	r0, r4
 8007ffa:	d007      	beq.n	800800c <sbrk_aligned+0x38>
 8007ffc:	1a21      	subs	r1, r4, r0
 8007ffe:	4628      	mov	r0, r5
 8008000:	f001 fe0a 	bl	8009c18 <_sbrk_r>
 8008004:	3001      	adds	r0, #1
 8008006:	d101      	bne.n	800800c <sbrk_aligned+0x38>
 8008008:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800800c:	4620      	mov	r0, r4
 800800e:	bd70      	pop	{r4, r5, r6, pc}
 8008010:	200046a4 	.word	0x200046a4

08008014 <_malloc_r>:
 8008014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008018:	1ccd      	adds	r5, r1, #3
 800801a:	f025 0503 	bic.w	r5, r5, #3
 800801e:	3508      	adds	r5, #8
 8008020:	2d0c      	cmp	r5, #12
 8008022:	bf38      	it	cc
 8008024:	250c      	movcc	r5, #12
 8008026:	2d00      	cmp	r5, #0
 8008028:	4607      	mov	r7, r0
 800802a:	db01      	blt.n	8008030 <_malloc_r+0x1c>
 800802c:	42a9      	cmp	r1, r5
 800802e:	d905      	bls.n	800803c <_malloc_r+0x28>
 8008030:	230c      	movs	r3, #12
 8008032:	603b      	str	r3, [r7, #0]
 8008034:	2600      	movs	r6, #0
 8008036:	4630      	mov	r0, r6
 8008038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800803c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008110 <_malloc_r+0xfc>
 8008040:	f000 f868 	bl	8008114 <__malloc_lock>
 8008044:	f8d8 3000 	ldr.w	r3, [r8]
 8008048:	461c      	mov	r4, r3
 800804a:	bb5c      	cbnz	r4, 80080a4 <_malloc_r+0x90>
 800804c:	4629      	mov	r1, r5
 800804e:	4638      	mov	r0, r7
 8008050:	f7ff ffc0 	bl	8007fd4 <sbrk_aligned>
 8008054:	1c43      	adds	r3, r0, #1
 8008056:	4604      	mov	r4, r0
 8008058:	d155      	bne.n	8008106 <_malloc_r+0xf2>
 800805a:	f8d8 4000 	ldr.w	r4, [r8]
 800805e:	4626      	mov	r6, r4
 8008060:	2e00      	cmp	r6, #0
 8008062:	d145      	bne.n	80080f0 <_malloc_r+0xdc>
 8008064:	2c00      	cmp	r4, #0
 8008066:	d048      	beq.n	80080fa <_malloc_r+0xe6>
 8008068:	6823      	ldr	r3, [r4, #0]
 800806a:	4631      	mov	r1, r6
 800806c:	4638      	mov	r0, r7
 800806e:	eb04 0903 	add.w	r9, r4, r3
 8008072:	f001 fdd1 	bl	8009c18 <_sbrk_r>
 8008076:	4581      	cmp	r9, r0
 8008078:	d13f      	bne.n	80080fa <_malloc_r+0xe6>
 800807a:	6821      	ldr	r1, [r4, #0]
 800807c:	1a6d      	subs	r5, r5, r1
 800807e:	4629      	mov	r1, r5
 8008080:	4638      	mov	r0, r7
 8008082:	f7ff ffa7 	bl	8007fd4 <sbrk_aligned>
 8008086:	3001      	adds	r0, #1
 8008088:	d037      	beq.n	80080fa <_malloc_r+0xe6>
 800808a:	6823      	ldr	r3, [r4, #0]
 800808c:	442b      	add	r3, r5
 800808e:	6023      	str	r3, [r4, #0]
 8008090:	f8d8 3000 	ldr.w	r3, [r8]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d038      	beq.n	800810a <_malloc_r+0xf6>
 8008098:	685a      	ldr	r2, [r3, #4]
 800809a:	42a2      	cmp	r2, r4
 800809c:	d12b      	bne.n	80080f6 <_malloc_r+0xe2>
 800809e:	2200      	movs	r2, #0
 80080a0:	605a      	str	r2, [r3, #4]
 80080a2:	e00f      	b.n	80080c4 <_malloc_r+0xb0>
 80080a4:	6822      	ldr	r2, [r4, #0]
 80080a6:	1b52      	subs	r2, r2, r5
 80080a8:	d41f      	bmi.n	80080ea <_malloc_r+0xd6>
 80080aa:	2a0b      	cmp	r2, #11
 80080ac:	d917      	bls.n	80080de <_malloc_r+0xca>
 80080ae:	1961      	adds	r1, r4, r5
 80080b0:	42a3      	cmp	r3, r4
 80080b2:	6025      	str	r5, [r4, #0]
 80080b4:	bf18      	it	ne
 80080b6:	6059      	strne	r1, [r3, #4]
 80080b8:	6863      	ldr	r3, [r4, #4]
 80080ba:	bf08      	it	eq
 80080bc:	f8c8 1000 	streq.w	r1, [r8]
 80080c0:	5162      	str	r2, [r4, r5]
 80080c2:	604b      	str	r3, [r1, #4]
 80080c4:	4638      	mov	r0, r7
 80080c6:	f104 060b 	add.w	r6, r4, #11
 80080ca:	f000 f829 	bl	8008120 <__malloc_unlock>
 80080ce:	f026 0607 	bic.w	r6, r6, #7
 80080d2:	1d23      	adds	r3, r4, #4
 80080d4:	1af2      	subs	r2, r6, r3
 80080d6:	d0ae      	beq.n	8008036 <_malloc_r+0x22>
 80080d8:	1b9b      	subs	r3, r3, r6
 80080da:	50a3      	str	r3, [r4, r2]
 80080dc:	e7ab      	b.n	8008036 <_malloc_r+0x22>
 80080de:	42a3      	cmp	r3, r4
 80080e0:	6862      	ldr	r2, [r4, #4]
 80080e2:	d1dd      	bne.n	80080a0 <_malloc_r+0x8c>
 80080e4:	f8c8 2000 	str.w	r2, [r8]
 80080e8:	e7ec      	b.n	80080c4 <_malloc_r+0xb0>
 80080ea:	4623      	mov	r3, r4
 80080ec:	6864      	ldr	r4, [r4, #4]
 80080ee:	e7ac      	b.n	800804a <_malloc_r+0x36>
 80080f0:	4634      	mov	r4, r6
 80080f2:	6876      	ldr	r6, [r6, #4]
 80080f4:	e7b4      	b.n	8008060 <_malloc_r+0x4c>
 80080f6:	4613      	mov	r3, r2
 80080f8:	e7cc      	b.n	8008094 <_malloc_r+0x80>
 80080fa:	230c      	movs	r3, #12
 80080fc:	603b      	str	r3, [r7, #0]
 80080fe:	4638      	mov	r0, r7
 8008100:	f000 f80e 	bl	8008120 <__malloc_unlock>
 8008104:	e797      	b.n	8008036 <_malloc_r+0x22>
 8008106:	6025      	str	r5, [r4, #0]
 8008108:	e7dc      	b.n	80080c4 <_malloc_r+0xb0>
 800810a:	605b      	str	r3, [r3, #4]
 800810c:	deff      	udf	#255	; 0xff
 800810e:	bf00      	nop
 8008110:	200046a0 	.word	0x200046a0

08008114 <__malloc_lock>:
 8008114:	4801      	ldr	r0, [pc, #4]	; (800811c <__malloc_lock+0x8>)
 8008116:	f7ff b878 	b.w	800720a <__retarget_lock_acquire_recursive>
 800811a:	bf00      	nop
 800811c:	2000469c 	.word	0x2000469c

08008120 <__malloc_unlock>:
 8008120:	4801      	ldr	r0, [pc, #4]	; (8008128 <__malloc_unlock+0x8>)
 8008122:	f7ff b873 	b.w	800720c <__retarget_lock_release_recursive>
 8008126:	bf00      	nop
 8008128:	2000469c 	.word	0x2000469c

0800812c <_Balloc>:
 800812c:	b570      	push	{r4, r5, r6, lr}
 800812e:	69c6      	ldr	r6, [r0, #28]
 8008130:	4604      	mov	r4, r0
 8008132:	460d      	mov	r5, r1
 8008134:	b976      	cbnz	r6, 8008154 <_Balloc+0x28>
 8008136:	2010      	movs	r0, #16
 8008138:	f7ff ff44 	bl	8007fc4 <malloc>
 800813c:	4602      	mov	r2, r0
 800813e:	61e0      	str	r0, [r4, #28]
 8008140:	b920      	cbnz	r0, 800814c <_Balloc+0x20>
 8008142:	4b18      	ldr	r3, [pc, #96]	; (80081a4 <_Balloc+0x78>)
 8008144:	4818      	ldr	r0, [pc, #96]	; (80081a8 <_Balloc+0x7c>)
 8008146:	216b      	movs	r1, #107	; 0x6b
 8008148:	f001 fd7e 	bl	8009c48 <__assert_func>
 800814c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008150:	6006      	str	r6, [r0, #0]
 8008152:	60c6      	str	r6, [r0, #12]
 8008154:	69e6      	ldr	r6, [r4, #28]
 8008156:	68f3      	ldr	r3, [r6, #12]
 8008158:	b183      	cbz	r3, 800817c <_Balloc+0x50>
 800815a:	69e3      	ldr	r3, [r4, #28]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008162:	b9b8      	cbnz	r0, 8008194 <_Balloc+0x68>
 8008164:	2101      	movs	r1, #1
 8008166:	fa01 f605 	lsl.w	r6, r1, r5
 800816a:	1d72      	adds	r2, r6, #5
 800816c:	0092      	lsls	r2, r2, #2
 800816e:	4620      	mov	r0, r4
 8008170:	f001 fd88 	bl	8009c84 <_calloc_r>
 8008174:	b160      	cbz	r0, 8008190 <_Balloc+0x64>
 8008176:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800817a:	e00e      	b.n	800819a <_Balloc+0x6e>
 800817c:	2221      	movs	r2, #33	; 0x21
 800817e:	2104      	movs	r1, #4
 8008180:	4620      	mov	r0, r4
 8008182:	f001 fd7f 	bl	8009c84 <_calloc_r>
 8008186:	69e3      	ldr	r3, [r4, #28]
 8008188:	60f0      	str	r0, [r6, #12]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d1e4      	bne.n	800815a <_Balloc+0x2e>
 8008190:	2000      	movs	r0, #0
 8008192:	bd70      	pop	{r4, r5, r6, pc}
 8008194:	6802      	ldr	r2, [r0, #0]
 8008196:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800819a:	2300      	movs	r3, #0
 800819c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80081a0:	e7f7      	b.n	8008192 <_Balloc+0x66>
 80081a2:	bf00      	nop
 80081a4:	0800af2e 	.word	0x0800af2e
 80081a8:	0800afae 	.word	0x0800afae

080081ac <_Bfree>:
 80081ac:	b570      	push	{r4, r5, r6, lr}
 80081ae:	69c6      	ldr	r6, [r0, #28]
 80081b0:	4605      	mov	r5, r0
 80081b2:	460c      	mov	r4, r1
 80081b4:	b976      	cbnz	r6, 80081d4 <_Bfree+0x28>
 80081b6:	2010      	movs	r0, #16
 80081b8:	f7ff ff04 	bl	8007fc4 <malloc>
 80081bc:	4602      	mov	r2, r0
 80081be:	61e8      	str	r0, [r5, #28]
 80081c0:	b920      	cbnz	r0, 80081cc <_Bfree+0x20>
 80081c2:	4b09      	ldr	r3, [pc, #36]	; (80081e8 <_Bfree+0x3c>)
 80081c4:	4809      	ldr	r0, [pc, #36]	; (80081ec <_Bfree+0x40>)
 80081c6:	218f      	movs	r1, #143	; 0x8f
 80081c8:	f001 fd3e 	bl	8009c48 <__assert_func>
 80081cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081d0:	6006      	str	r6, [r0, #0]
 80081d2:	60c6      	str	r6, [r0, #12]
 80081d4:	b13c      	cbz	r4, 80081e6 <_Bfree+0x3a>
 80081d6:	69eb      	ldr	r3, [r5, #28]
 80081d8:	6862      	ldr	r2, [r4, #4]
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081e0:	6021      	str	r1, [r4, #0]
 80081e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80081e6:	bd70      	pop	{r4, r5, r6, pc}
 80081e8:	0800af2e 	.word	0x0800af2e
 80081ec:	0800afae 	.word	0x0800afae

080081f0 <__multadd>:
 80081f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081f4:	690d      	ldr	r5, [r1, #16]
 80081f6:	4607      	mov	r7, r0
 80081f8:	460c      	mov	r4, r1
 80081fa:	461e      	mov	r6, r3
 80081fc:	f101 0c14 	add.w	ip, r1, #20
 8008200:	2000      	movs	r0, #0
 8008202:	f8dc 3000 	ldr.w	r3, [ip]
 8008206:	b299      	uxth	r1, r3
 8008208:	fb02 6101 	mla	r1, r2, r1, r6
 800820c:	0c1e      	lsrs	r6, r3, #16
 800820e:	0c0b      	lsrs	r3, r1, #16
 8008210:	fb02 3306 	mla	r3, r2, r6, r3
 8008214:	b289      	uxth	r1, r1
 8008216:	3001      	adds	r0, #1
 8008218:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800821c:	4285      	cmp	r5, r0
 800821e:	f84c 1b04 	str.w	r1, [ip], #4
 8008222:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008226:	dcec      	bgt.n	8008202 <__multadd+0x12>
 8008228:	b30e      	cbz	r6, 800826e <__multadd+0x7e>
 800822a:	68a3      	ldr	r3, [r4, #8]
 800822c:	42ab      	cmp	r3, r5
 800822e:	dc19      	bgt.n	8008264 <__multadd+0x74>
 8008230:	6861      	ldr	r1, [r4, #4]
 8008232:	4638      	mov	r0, r7
 8008234:	3101      	adds	r1, #1
 8008236:	f7ff ff79 	bl	800812c <_Balloc>
 800823a:	4680      	mov	r8, r0
 800823c:	b928      	cbnz	r0, 800824a <__multadd+0x5a>
 800823e:	4602      	mov	r2, r0
 8008240:	4b0c      	ldr	r3, [pc, #48]	; (8008274 <__multadd+0x84>)
 8008242:	480d      	ldr	r0, [pc, #52]	; (8008278 <__multadd+0x88>)
 8008244:	21ba      	movs	r1, #186	; 0xba
 8008246:	f001 fcff 	bl	8009c48 <__assert_func>
 800824a:	6922      	ldr	r2, [r4, #16]
 800824c:	3202      	adds	r2, #2
 800824e:	f104 010c 	add.w	r1, r4, #12
 8008252:	0092      	lsls	r2, r2, #2
 8008254:	300c      	adds	r0, #12
 8008256:	f7fe ffda 	bl	800720e <memcpy>
 800825a:	4621      	mov	r1, r4
 800825c:	4638      	mov	r0, r7
 800825e:	f7ff ffa5 	bl	80081ac <_Bfree>
 8008262:	4644      	mov	r4, r8
 8008264:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008268:	3501      	adds	r5, #1
 800826a:	615e      	str	r6, [r3, #20]
 800826c:	6125      	str	r5, [r4, #16]
 800826e:	4620      	mov	r0, r4
 8008270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008274:	0800af9d 	.word	0x0800af9d
 8008278:	0800afae 	.word	0x0800afae

0800827c <__s2b>:
 800827c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008280:	460c      	mov	r4, r1
 8008282:	4615      	mov	r5, r2
 8008284:	461f      	mov	r7, r3
 8008286:	2209      	movs	r2, #9
 8008288:	3308      	adds	r3, #8
 800828a:	4606      	mov	r6, r0
 800828c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008290:	2100      	movs	r1, #0
 8008292:	2201      	movs	r2, #1
 8008294:	429a      	cmp	r2, r3
 8008296:	db09      	blt.n	80082ac <__s2b+0x30>
 8008298:	4630      	mov	r0, r6
 800829a:	f7ff ff47 	bl	800812c <_Balloc>
 800829e:	b940      	cbnz	r0, 80082b2 <__s2b+0x36>
 80082a0:	4602      	mov	r2, r0
 80082a2:	4b19      	ldr	r3, [pc, #100]	; (8008308 <__s2b+0x8c>)
 80082a4:	4819      	ldr	r0, [pc, #100]	; (800830c <__s2b+0x90>)
 80082a6:	21d3      	movs	r1, #211	; 0xd3
 80082a8:	f001 fcce 	bl	8009c48 <__assert_func>
 80082ac:	0052      	lsls	r2, r2, #1
 80082ae:	3101      	adds	r1, #1
 80082b0:	e7f0      	b.n	8008294 <__s2b+0x18>
 80082b2:	9b08      	ldr	r3, [sp, #32]
 80082b4:	6143      	str	r3, [r0, #20]
 80082b6:	2d09      	cmp	r5, #9
 80082b8:	f04f 0301 	mov.w	r3, #1
 80082bc:	6103      	str	r3, [r0, #16]
 80082be:	dd16      	ble.n	80082ee <__s2b+0x72>
 80082c0:	f104 0909 	add.w	r9, r4, #9
 80082c4:	46c8      	mov	r8, r9
 80082c6:	442c      	add	r4, r5
 80082c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80082cc:	4601      	mov	r1, r0
 80082ce:	3b30      	subs	r3, #48	; 0x30
 80082d0:	220a      	movs	r2, #10
 80082d2:	4630      	mov	r0, r6
 80082d4:	f7ff ff8c 	bl	80081f0 <__multadd>
 80082d8:	45a0      	cmp	r8, r4
 80082da:	d1f5      	bne.n	80082c8 <__s2b+0x4c>
 80082dc:	f1a5 0408 	sub.w	r4, r5, #8
 80082e0:	444c      	add	r4, r9
 80082e2:	1b2d      	subs	r5, r5, r4
 80082e4:	1963      	adds	r3, r4, r5
 80082e6:	42bb      	cmp	r3, r7
 80082e8:	db04      	blt.n	80082f4 <__s2b+0x78>
 80082ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082ee:	340a      	adds	r4, #10
 80082f0:	2509      	movs	r5, #9
 80082f2:	e7f6      	b.n	80082e2 <__s2b+0x66>
 80082f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80082f8:	4601      	mov	r1, r0
 80082fa:	3b30      	subs	r3, #48	; 0x30
 80082fc:	220a      	movs	r2, #10
 80082fe:	4630      	mov	r0, r6
 8008300:	f7ff ff76 	bl	80081f0 <__multadd>
 8008304:	e7ee      	b.n	80082e4 <__s2b+0x68>
 8008306:	bf00      	nop
 8008308:	0800af9d 	.word	0x0800af9d
 800830c:	0800afae 	.word	0x0800afae

08008310 <__hi0bits>:
 8008310:	0c03      	lsrs	r3, r0, #16
 8008312:	041b      	lsls	r3, r3, #16
 8008314:	b9d3      	cbnz	r3, 800834c <__hi0bits+0x3c>
 8008316:	0400      	lsls	r0, r0, #16
 8008318:	2310      	movs	r3, #16
 800831a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800831e:	bf04      	itt	eq
 8008320:	0200      	lsleq	r0, r0, #8
 8008322:	3308      	addeq	r3, #8
 8008324:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008328:	bf04      	itt	eq
 800832a:	0100      	lsleq	r0, r0, #4
 800832c:	3304      	addeq	r3, #4
 800832e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008332:	bf04      	itt	eq
 8008334:	0080      	lsleq	r0, r0, #2
 8008336:	3302      	addeq	r3, #2
 8008338:	2800      	cmp	r0, #0
 800833a:	db05      	blt.n	8008348 <__hi0bits+0x38>
 800833c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008340:	f103 0301 	add.w	r3, r3, #1
 8008344:	bf08      	it	eq
 8008346:	2320      	moveq	r3, #32
 8008348:	4618      	mov	r0, r3
 800834a:	4770      	bx	lr
 800834c:	2300      	movs	r3, #0
 800834e:	e7e4      	b.n	800831a <__hi0bits+0xa>

08008350 <__lo0bits>:
 8008350:	6803      	ldr	r3, [r0, #0]
 8008352:	f013 0207 	ands.w	r2, r3, #7
 8008356:	d00c      	beq.n	8008372 <__lo0bits+0x22>
 8008358:	07d9      	lsls	r1, r3, #31
 800835a:	d422      	bmi.n	80083a2 <__lo0bits+0x52>
 800835c:	079a      	lsls	r2, r3, #30
 800835e:	bf49      	itett	mi
 8008360:	085b      	lsrmi	r3, r3, #1
 8008362:	089b      	lsrpl	r3, r3, #2
 8008364:	6003      	strmi	r3, [r0, #0]
 8008366:	2201      	movmi	r2, #1
 8008368:	bf5c      	itt	pl
 800836a:	6003      	strpl	r3, [r0, #0]
 800836c:	2202      	movpl	r2, #2
 800836e:	4610      	mov	r0, r2
 8008370:	4770      	bx	lr
 8008372:	b299      	uxth	r1, r3
 8008374:	b909      	cbnz	r1, 800837a <__lo0bits+0x2a>
 8008376:	0c1b      	lsrs	r3, r3, #16
 8008378:	2210      	movs	r2, #16
 800837a:	b2d9      	uxtb	r1, r3
 800837c:	b909      	cbnz	r1, 8008382 <__lo0bits+0x32>
 800837e:	3208      	adds	r2, #8
 8008380:	0a1b      	lsrs	r3, r3, #8
 8008382:	0719      	lsls	r1, r3, #28
 8008384:	bf04      	itt	eq
 8008386:	091b      	lsreq	r3, r3, #4
 8008388:	3204      	addeq	r2, #4
 800838a:	0799      	lsls	r1, r3, #30
 800838c:	bf04      	itt	eq
 800838e:	089b      	lsreq	r3, r3, #2
 8008390:	3202      	addeq	r2, #2
 8008392:	07d9      	lsls	r1, r3, #31
 8008394:	d403      	bmi.n	800839e <__lo0bits+0x4e>
 8008396:	085b      	lsrs	r3, r3, #1
 8008398:	f102 0201 	add.w	r2, r2, #1
 800839c:	d003      	beq.n	80083a6 <__lo0bits+0x56>
 800839e:	6003      	str	r3, [r0, #0]
 80083a0:	e7e5      	b.n	800836e <__lo0bits+0x1e>
 80083a2:	2200      	movs	r2, #0
 80083a4:	e7e3      	b.n	800836e <__lo0bits+0x1e>
 80083a6:	2220      	movs	r2, #32
 80083a8:	e7e1      	b.n	800836e <__lo0bits+0x1e>
	...

080083ac <__i2b>:
 80083ac:	b510      	push	{r4, lr}
 80083ae:	460c      	mov	r4, r1
 80083b0:	2101      	movs	r1, #1
 80083b2:	f7ff febb 	bl	800812c <_Balloc>
 80083b6:	4602      	mov	r2, r0
 80083b8:	b928      	cbnz	r0, 80083c6 <__i2b+0x1a>
 80083ba:	4b05      	ldr	r3, [pc, #20]	; (80083d0 <__i2b+0x24>)
 80083bc:	4805      	ldr	r0, [pc, #20]	; (80083d4 <__i2b+0x28>)
 80083be:	f240 1145 	movw	r1, #325	; 0x145
 80083c2:	f001 fc41 	bl	8009c48 <__assert_func>
 80083c6:	2301      	movs	r3, #1
 80083c8:	6144      	str	r4, [r0, #20]
 80083ca:	6103      	str	r3, [r0, #16]
 80083cc:	bd10      	pop	{r4, pc}
 80083ce:	bf00      	nop
 80083d0:	0800af9d 	.word	0x0800af9d
 80083d4:	0800afae 	.word	0x0800afae

080083d8 <__multiply>:
 80083d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083dc:	4691      	mov	r9, r2
 80083de:	690a      	ldr	r2, [r1, #16]
 80083e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	bfb8      	it	lt
 80083e8:	460b      	movlt	r3, r1
 80083ea:	460c      	mov	r4, r1
 80083ec:	bfbc      	itt	lt
 80083ee:	464c      	movlt	r4, r9
 80083f0:	4699      	movlt	r9, r3
 80083f2:	6927      	ldr	r7, [r4, #16]
 80083f4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80083f8:	68a3      	ldr	r3, [r4, #8]
 80083fa:	6861      	ldr	r1, [r4, #4]
 80083fc:	eb07 060a 	add.w	r6, r7, sl
 8008400:	42b3      	cmp	r3, r6
 8008402:	b085      	sub	sp, #20
 8008404:	bfb8      	it	lt
 8008406:	3101      	addlt	r1, #1
 8008408:	f7ff fe90 	bl	800812c <_Balloc>
 800840c:	b930      	cbnz	r0, 800841c <__multiply+0x44>
 800840e:	4602      	mov	r2, r0
 8008410:	4b44      	ldr	r3, [pc, #272]	; (8008524 <__multiply+0x14c>)
 8008412:	4845      	ldr	r0, [pc, #276]	; (8008528 <__multiply+0x150>)
 8008414:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008418:	f001 fc16 	bl	8009c48 <__assert_func>
 800841c:	f100 0514 	add.w	r5, r0, #20
 8008420:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008424:	462b      	mov	r3, r5
 8008426:	2200      	movs	r2, #0
 8008428:	4543      	cmp	r3, r8
 800842a:	d321      	bcc.n	8008470 <__multiply+0x98>
 800842c:	f104 0314 	add.w	r3, r4, #20
 8008430:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008434:	f109 0314 	add.w	r3, r9, #20
 8008438:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800843c:	9202      	str	r2, [sp, #8]
 800843e:	1b3a      	subs	r2, r7, r4
 8008440:	3a15      	subs	r2, #21
 8008442:	f022 0203 	bic.w	r2, r2, #3
 8008446:	3204      	adds	r2, #4
 8008448:	f104 0115 	add.w	r1, r4, #21
 800844c:	428f      	cmp	r7, r1
 800844e:	bf38      	it	cc
 8008450:	2204      	movcc	r2, #4
 8008452:	9201      	str	r2, [sp, #4]
 8008454:	9a02      	ldr	r2, [sp, #8]
 8008456:	9303      	str	r3, [sp, #12]
 8008458:	429a      	cmp	r2, r3
 800845a:	d80c      	bhi.n	8008476 <__multiply+0x9e>
 800845c:	2e00      	cmp	r6, #0
 800845e:	dd03      	ble.n	8008468 <__multiply+0x90>
 8008460:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008464:	2b00      	cmp	r3, #0
 8008466:	d05b      	beq.n	8008520 <__multiply+0x148>
 8008468:	6106      	str	r6, [r0, #16]
 800846a:	b005      	add	sp, #20
 800846c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008470:	f843 2b04 	str.w	r2, [r3], #4
 8008474:	e7d8      	b.n	8008428 <__multiply+0x50>
 8008476:	f8b3 a000 	ldrh.w	sl, [r3]
 800847a:	f1ba 0f00 	cmp.w	sl, #0
 800847e:	d024      	beq.n	80084ca <__multiply+0xf2>
 8008480:	f104 0e14 	add.w	lr, r4, #20
 8008484:	46a9      	mov	r9, r5
 8008486:	f04f 0c00 	mov.w	ip, #0
 800848a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800848e:	f8d9 1000 	ldr.w	r1, [r9]
 8008492:	fa1f fb82 	uxth.w	fp, r2
 8008496:	b289      	uxth	r1, r1
 8008498:	fb0a 110b 	mla	r1, sl, fp, r1
 800849c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80084a0:	f8d9 2000 	ldr.w	r2, [r9]
 80084a4:	4461      	add	r1, ip
 80084a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80084aa:	fb0a c20b 	mla	r2, sl, fp, ip
 80084ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80084b2:	b289      	uxth	r1, r1
 80084b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80084b8:	4577      	cmp	r7, lr
 80084ba:	f849 1b04 	str.w	r1, [r9], #4
 80084be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80084c2:	d8e2      	bhi.n	800848a <__multiply+0xb2>
 80084c4:	9a01      	ldr	r2, [sp, #4]
 80084c6:	f845 c002 	str.w	ip, [r5, r2]
 80084ca:	9a03      	ldr	r2, [sp, #12]
 80084cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80084d0:	3304      	adds	r3, #4
 80084d2:	f1b9 0f00 	cmp.w	r9, #0
 80084d6:	d021      	beq.n	800851c <__multiply+0x144>
 80084d8:	6829      	ldr	r1, [r5, #0]
 80084da:	f104 0c14 	add.w	ip, r4, #20
 80084de:	46ae      	mov	lr, r5
 80084e0:	f04f 0a00 	mov.w	sl, #0
 80084e4:	f8bc b000 	ldrh.w	fp, [ip]
 80084e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80084ec:	fb09 220b 	mla	r2, r9, fp, r2
 80084f0:	4452      	add	r2, sl
 80084f2:	b289      	uxth	r1, r1
 80084f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80084f8:	f84e 1b04 	str.w	r1, [lr], #4
 80084fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008500:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008504:	f8be 1000 	ldrh.w	r1, [lr]
 8008508:	fb09 110a 	mla	r1, r9, sl, r1
 800850c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008510:	4567      	cmp	r7, ip
 8008512:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008516:	d8e5      	bhi.n	80084e4 <__multiply+0x10c>
 8008518:	9a01      	ldr	r2, [sp, #4]
 800851a:	50a9      	str	r1, [r5, r2]
 800851c:	3504      	adds	r5, #4
 800851e:	e799      	b.n	8008454 <__multiply+0x7c>
 8008520:	3e01      	subs	r6, #1
 8008522:	e79b      	b.n	800845c <__multiply+0x84>
 8008524:	0800af9d 	.word	0x0800af9d
 8008528:	0800afae 	.word	0x0800afae

0800852c <__pow5mult>:
 800852c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008530:	4615      	mov	r5, r2
 8008532:	f012 0203 	ands.w	r2, r2, #3
 8008536:	4606      	mov	r6, r0
 8008538:	460f      	mov	r7, r1
 800853a:	d007      	beq.n	800854c <__pow5mult+0x20>
 800853c:	4c25      	ldr	r4, [pc, #148]	; (80085d4 <__pow5mult+0xa8>)
 800853e:	3a01      	subs	r2, #1
 8008540:	2300      	movs	r3, #0
 8008542:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008546:	f7ff fe53 	bl	80081f0 <__multadd>
 800854a:	4607      	mov	r7, r0
 800854c:	10ad      	asrs	r5, r5, #2
 800854e:	d03d      	beq.n	80085cc <__pow5mult+0xa0>
 8008550:	69f4      	ldr	r4, [r6, #28]
 8008552:	b97c      	cbnz	r4, 8008574 <__pow5mult+0x48>
 8008554:	2010      	movs	r0, #16
 8008556:	f7ff fd35 	bl	8007fc4 <malloc>
 800855a:	4602      	mov	r2, r0
 800855c:	61f0      	str	r0, [r6, #28]
 800855e:	b928      	cbnz	r0, 800856c <__pow5mult+0x40>
 8008560:	4b1d      	ldr	r3, [pc, #116]	; (80085d8 <__pow5mult+0xac>)
 8008562:	481e      	ldr	r0, [pc, #120]	; (80085dc <__pow5mult+0xb0>)
 8008564:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008568:	f001 fb6e 	bl	8009c48 <__assert_func>
 800856c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008570:	6004      	str	r4, [r0, #0]
 8008572:	60c4      	str	r4, [r0, #12]
 8008574:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008578:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800857c:	b94c      	cbnz	r4, 8008592 <__pow5mult+0x66>
 800857e:	f240 2171 	movw	r1, #625	; 0x271
 8008582:	4630      	mov	r0, r6
 8008584:	f7ff ff12 	bl	80083ac <__i2b>
 8008588:	2300      	movs	r3, #0
 800858a:	f8c8 0008 	str.w	r0, [r8, #8]
 800858e:	4604      	mov	r4, r0
 8008590:	6003      	str	r3, [r0, #0]
 8008592:	f04f 0900 	mov.w	r9, #0
 8008596:	07eb      	lsls	r3, r5, #31
 8008598:	d50a      	bpl.n	80085b0 <__pow5mult+0x84>
 800859a:	4639      	mov	r1, r7
 800859c:	4622      	mov	r2, r4
 800859e:	4630      	mov	r0, r6
 80085a0:	f7ff ff1a 	bl	80083d8 <__multiply>
 80085a4:	4639      	mov	r1, r7
 80085a6:	4680      	mov	r8, r0
 80085a8:	4630      	mov	r0, r6
 80085aa:	f7ff fdff 	bl	80081ac <_Bfree>
 80085ae:	4647      	mov	r7, r8
 80085b0:	106d      	asrs	r5, r5, #1
 80085b2:	d00b      	beq.n	80085cc <__pow5mult+0xa0>
 80085b4:	6820      	ldr	r0, [r4, #0]
 80085b6:	b938      	cbnz	r0, 80085c8 <__pow5mult+0x9c>
 80085b8:	4622      	mov	r2, r4
 80085ba:	4621      	mov	r1, r4
 80085bc:	4630      	mov	r0, r6
 80085be:	f7ff ff0b 	bl	80083d8 <__multiply>
 80085c2:	6020      	str	r0, [r4, #0]
 80085c4:	f8c0 9000 	str.w	r9, [r0]
 80085c8:	4604      	mov	r4, r0
 80085ca:	e7e4      	b.n	8008596 <__pow5mult+0x6a>
 80085cc:	4638      	mov	r0, r7
 80085ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085d2:	bf00      	nop
 80085d4:	0800b0f8 	.word	0x0800b0f8
 80085d8:	0800af2e 	.word	0x0800af2e
 80085dc:	0800afae 	.word	0x0800afae

080085e0 <__lshift>:
 80085e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085e4:	460c      	mov	r4, r1
 80085e6:	6849      	ldr	r1, [r1, #4]
 80085e8:	6923      	ldr	r3, [r4, #16]
 80085ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80085ee:	68a3      	ldr	r3, [r4, #8]
 80085f0:	4607      	mov	r7, r0
 80085f2:	4691      	mov	r9, r2
 80085f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80085f8:	f108 0601 	add.w	r6, r8, #1
 80085fc:	42b3      	cmp	r3, r6
 80085fe:	db0b      	blt.n	8008618 <__lshift+0x38>
 8008600:	4638      	mov	r0, r7
 8008602:	f7ff fd93 	bl	800812c <_Balloc>
 8008606:	4605      	mov	r5, r0
 8008608:	b948      	cbnz	r0, 800861e <__lshift+0x3e>
 800860a:	4602      	mov	r2, r0
 800860c:	4b28      	ldr	r3, [pc, #160]	; (80086b0 <__lshift+0xd0>)
 800860e:	4829      	ldr	r0, [pc, #164]	; (80086b4 <__lshift+0xd4>)
 8008610:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008614:	f001 fb18 	bl	8009c48 <__assert_func>
 8008618:	3101      	adds	r1, #1
 800861a:	005b      	lsls	r3, r3, #1
 800861c:	e7ee      	b.n	80085fc <__lshift+0x1c>
 800861e:	2300      	movs	r3, #0
 8008620:	f100 0114 	add.w	r1, r0, #20
 8008624:	f100 0210 	add.w	r2, r0, #16
 8008628:	4618      	mov	r0, r3
 800862a:	4553      	cmp	r3, sl
 800862c:	db33      	blt.n	8008696 <__lshift+0xb6>
 800862e:	6920      	ldr	r0, [r4, #16]
 8008630:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008634:	f104 0314 	add.w	r3, r4, #20
 8008638:	f019 091f 	ands.w	r9, r9, #31
 800863c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008640:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008644:	d02b      	beq.n	800869e <__lshift+0xbe>
 8008646:	f1c9 0e20 	rsb	lr, r9, #32
 800864a:	468a      	mov	sl, r1
 800864c:	2200      	movs	r2, #0
 800864e:	6818      	ldr	r0, [r3, #0]
 8008650:	fa00 f009 	lsl.w	r0, r0, r9
 8008654:	4310      	orrs	r0, r2
 8008656:	f84a 0b04 	str.w	r0, [sl], #4
 800865a:	f853 2b04 	ldr.w	r2, [r3], #4
 800865e:	459c      	cmp	ip, r3
 8008660:	fa22 f20e 	lsr.w	r2, r2, lr
 8008664:	d8f3      	bhi.n	800864e <__lshift+0x6e>
 8008666:	ebac 0304 	sub.w	r3, ip, r4
 800866a:	3b15      	subs	r3, #21
 800866c:	f023 0303 	bic.w	r3, r3, #3
 8008670:	3304      	adds	r3, #4
 8008672:	f104 0015 	add.w	r0, r4, #21
 8008676:	4584      	cmp	ip, r0
 8008678:	bf38      	it	cc
 800867a:	2304      	movcc	r3, #4
 800867c:	50ca      	str	r2, [r1, r3]
 800867e:	b10a      	cbz	r2, 8008684 <__lshift+0xa4>
 8008680:	f108 0602 	add.w	r6, r8, #2
 8008684:	3e01      	subs	r6, #1
 8008686:	4638      	mov	r0, r7
 8008688:	612e      	str	r6, [r5, #16]
 800868a:	4621      	mov	r1, r4
 800868c:	f7ff fd8e 	bl	80081ac <_Bfree>
 8008690:	4628      	mov	r0, r5
 8008692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008696:	f842 0f04 	str.w	r0, [r2, #4]!
 800869a:	3301      	adds	r3, #1
 800869c:	e7c5      	b.n	800862a <__lshift+0x4a>
 800869e:	3904      	subs	r1, #4
 80086a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80086a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80086a8:	459c      	cmp	ip, r3
 80086aa:	d8f9      	bhi.n	80086a0 <__lshift+0xc0>
 80086ac:	e7ea      	b.n	8008684 <__lshift+0xa4>
 80086ae:	bf00      	nop
 80086b0:	0800af9d 	.word	0x0800af9d
 80086b4:	0800afae 	.word	0x0800afae

080086b8 <__mcmp>:
 80086b8:	b530      	push	{r4, r5, lr}
 80086ba:	6902      	ldr	r2, [r0, #16]
 80086bc:	690c      	ldr	r4, [r1, #16]
 80086be:	1b12      	subs	r2, r2, r4
 80086c0:	d10e      	bne.n	80086e0 <__mcmp+0x28>
 80086c2:	f100 0314 	add.w	r3, r0, #20
 80086c6:	3114      	adds	r1, #20
 80086c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80086cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80086d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80086d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80086d8:	42a5      	cmp	r5, r4
 80086da:	d003      	beq.n	80086e4 <__mcmp+0x2c>
 80086dc:	d305      	bcc.n	80086ea <__mcmp+0x32>
 80086de:	2201      	movs	r2, #1
 80086e0:	4610      	mov	r0, r2
 80086e2:	bd30      	pop	{r4, r5, pc}
 80086e4:	4283      	cmp	r3, r0
 80086e6:	d3f3      	bcc.n	80086d0 <__mcmp+0x18>
 80086e8:	e7fa      	b.n	80086e0 <__mcmp+0x28>
 80086ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086ee:	e7f7      	b.n	80086e0 <__mcmp+0x28>

080086f0 <__mdiff>:
 80086f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f4:	460c      	mov	r4, r1
 80086f6:	4606      	mov	r6, r0
 80086f8:	4611      	mov	r1, r2
 80086fa:	4620      	mov	r0, r4
 80086fc:	4690      	mov	r8, r2
 80086fe:	f7ff ffdb 	bl	80086b8 <__mcmp>
 8008702:	1e05      	subs	r5, r0, #0
 8008704:	d110      	bne.n	8008728 <__mdiff+0x38>
 8008706:	4629      	mov	r1, r5
 8008708:	4630      	mov	r0, r6
 800870a:	f7ff fd0f 	bl	800812c <_Balloc>
 800870e:	b930      	cbnz	r0, 800871e <__mdiff+0x2e>
 8008710:	4b3a      	ldr	r3, [pc, #232]	; (80087fc <__mdiff+0x10c>)
 8008712:	4602      	mov	r2, r0
 8008714:	f240 2137 	movw	r1, #567	; 0x237
 8008718:	4839      	ldr	r0, [pc, #228]	; (8008800 <__mdiff+0x110>)
 800871a:	f001 fa95 	bl	8009c48 <__assert_func>
 800871e:	2301      	movs	r3, #1
 8008720:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008724:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008728:	bfa4      	itt	ge
 800872a:	4643      	movge	r3, r8
 800872c:	46a0      	movge	r8, r4
 800872e:	4630      	mov	r0, r6
 8008730:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008734:	bfa6      	itte	ge
 8008736:	461c      	movge	r4, r3
 8008738:	2500      	movge	r5, #0
 800873a:	2501      	movlt	r5, #1
 800873c:	f7ff fcf6 	bl	800812c <_Balloc>
 8008740:	b920      	cbnz	r0, 800874c <__mdiff+0x5c>
 8008742:	4b2e      	ldr	r3, [pc, #184]	; (80087fc <__mdiff+0x10c>)
 8008744:	4602      	mov	r2, r0
 8008746:	f240 2145 	movw	r1, #581	; 0x245
 800874a:	e7e5      	b.n	8008718 <__mdiff+0x28>
 800874c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008750:	6926      	ldr	r6, [r4, #16]
 8008752:	60c5      	str	r5, [r0, #12]
 8008754:	f104 0914 	add.w	r9, r4, #20
 8008758:	f108 0514 	add.w	r5, r8, #20
 800875c:	f100 0e14 	add.w	lr, r0, #20
 8008760:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008764:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008768:	f108 0210 	add.w	r2, r8, #16
 800876c:	46f2      	mov	sl, lr
 800876e:	2100      	movs	r1, #0
 8008770:	f859 3b04 	ldr.w	r3, [r9], #4
 8008774:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008778:	fa11 f88b 	uxtah	r8, r1, fp
 800877c:	b299      	uxth	r1, r3
 800877e:	0c1b      	lsrs	r3, r3, #16
 8008780:	eba8 0801 	sub.w	r8, r8, r1
 8008784:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008788:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800878c:	fa1f f888 	uxth.w	r8, r8
 8008790:	1419      	asrs	r1, r3, #16
 8008792:	454e      	cmp	r6, r9
 8008794:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008798:	f84a 3b04 	str.w	r3, [sl], #4
 800879c:	d8e8      	bhi.n	8008770 <__mdiff+0x80>
 800879e:	1b33      	subs	r3, r6, r4
 80087a0:	3b15      	subs	r3, #21
 80087a2:	f023 0303 	bic.w	r3, r3, #3
 80087a6:	3304      	adds	r3, #4
 80087a8:	3415      	adds	r4, #21
 80087aa:	42a6      	cmp	r6, r4
 80087ac:	bf38      	it	cc
 80087ae:	2304      	movcc	r3, #4
 80087b0:	441d      	add	r5, r3
 80087b2:	4473      	add	r3, lr
 80087b4:	469e      	mov	lr, r3
 80087b6:	462e      	mov	r6, r5
 80087b8:	4566      	cmp	r6, ip
 80087ba:	d30e      	bcc.n	80087da <__mdiff+0xea>
 80087bc:	f10c 0203 	add.w	r2, ip, #3
 80087c0:	1b52      	subs	r2, r2, r5
 80087c2:	f022 0203 	bic.w	r2, r2, #3
 80087c6:	3d03      	subs	r5, #3
 80087c8:	45ac      	cmp	ip, r5
 80087ca:	bf38      	it	cc
 80087cc:	2200      	movcc	r2, #0
 80087ce:	4413      	add	r3, r2
 80087d0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80087d4:	b17a      	cbz	r2, 80087f6 <__mdiff+0x106>
 80087d6:	6107      	str	r7, [r0, #16]
 80087d8:	e7a4      	b.n	8008724 <__mdiff+0x34>
 80087da:	f856 8b04 	ldr.w	r8, [r6], #4
 80087de:	fa11 f288 	uxtah	r2, r1, r8
 80087e2:	1414      	asrs	r4, r2, #16
 80087e4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80087e8:	b292      	uxth	r2, r2
 80087ea:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80087ee:	f84e 2b04 	str.w	r2, [lr], #4
 80087f2:	1421      	asrs	r1, r4, #16
 80087f4:	e7e0      	b.n	80087b8 <__mdiff+0xc8>
 80087f6:	3f01      	subs	r7, #1
 80087f8:	e7ea      	b.n	80087d0 <__mdiff+0xe0>
 80087fa:	bf00      	nop
 80087fc:	0800af9d 	.word	0x0800af9d
 8008800:	0800afae 	.word	0x0800afae

08008804 <__ulp>:
 8008804:	b082      	sub	sp, #8
 8008806:	ed8d 0b00 	vstr	d0, [sp]
 800880a:	9a01      	ldr	r2, [sp, #4]
 800880c:	4b0f      	ldr	r3, [pc, #60]	; (800884c <__ulp+0x48>)
 800880e:	4013      	ands	r3, r2
 8008810:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008814:	2b00      	cmp	r3, #0
 8008816:	dc08      	bgt.n	800882a <__ulp+0x26>
 8008818:	425b      	negs	r3, r3
 800881a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800881e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008822:	da04      	bge.n	800882e <__ulp+0x2a>
 8008824:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008828:	4113      	asrs	r3, r2
 800882a:	2200      	movs	r2, #0
 800882c:	e008      	b.n	8008840 <__ulp+0x3c>
 800882e:	f1a2 0314 	sub.w	r3, r2, #20
 8008832:	2b1e      	cmp	r3, #30
 8008834:	bfda      	itte	le
 8008836:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800883a:	40da      	lsrle	r2, r3
 800883c:	2201      	movgt	r2, #1
 800883e:	2300      	movs	r3, #0
 8008840:	4619      	mov	r1, r3
 8008842:	4610      	mov	r0, r2
 8008844:	ec41 0b10 	vmov	d0, r0, r1
 8008848:	b002      	add	sp, #8
 800884a:	4770      	bx	lr
 800884c:	7ff00000 	.word	0x7ff00000

08008850 <__b2d>:
 8008850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008854:	6906      	ldr	r6, [r0, #16]
 8008856:	f100 0814 	add.w	r8, r0, #20
 800885a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800885e:	1f37      	subs	r7, r6, #4
 8008860:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008864:	4610      	mov	r0, r2
 8008866:	f7ff fd53 	bl	8008310 <__hi0bits>
 800886a:	f1c0 0320 	rsb	r3, r0, #32
 800886e:	280a      	cmp	r0, #10
 8008870:	600b      	str	r3, [r1, #0]
 8008872:	491b      	ldr	r1, [pc, #108]	; (80088e0 <__b2d+0x90>)
 8008874:	dc15      	bgt.n	80088a2 <__b2d+0x52>
 8008876:	f1c0 0c0b 	rsb	ip, r0, #11
 800887a:	fa22 f30c 	lsr.w	r3, r2, ip
 800887e:	45b8      	cmp	r8, r7
 8008880:	ea43 0501 	orr.w	r5, r3, r1
 8008884:	bf34      	ite	cc
 8008886:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800888a:	2300      	movcs	r3, #0
 800888c:	3015      	adds	r0, #21
 800888e:	fa02 f000 	lsl.w	r0, r2, r0
 8008892:	fa23 f30c 	lsr.w	r3, r3, ip
 8008896:	4303      	orrs	r3, r0
 8008898:	461c      	mov	r4, r3
 800889a:	ec45 4b10 	vmov	d0, r4, r5
 800889e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088a2:	45b8      	cmp	r8, r7
 80088a4:	bf3a      	itte	cc
 80088a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80088aa:	f1a6 0708 	subcc.w	r7, r6, #8
 80088ae:	2300      	movcs	r3, #0
 80088b0:	380b      	subs	r0, #11
 80088b2:	d012      	beq.n	80088da <__b2d+0x8a>
 80088b4:	f1c0 0120 	rsb	r1, r0, #32
 80088b8:	fa23 f401 	lsr.w	r4, r3, r1
 80088bc:	4082      	lsls	r2, r0
 80088be:	4322      	orrs	r2, r4
 80088c0:	4547      	cmp	r7, r8
 80088c2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80088c6:	bf8c      	ite	hi
 80088c8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80088cc:	2200      	movls	r2, #0
 80088ce:	4083      	lsls	r3, r0
 80088d0:	40ca      	lsrs	r2, r1
 80088d2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80088d6:	4313      	orrs	r3, r2
 80088d8:	e7de      	b.n	8008898 <__b2d+0x48>
 80088da:	ea42 0501 	orr.w	r5, r2, r1
 80088de:	e7db      	b.n	8008898 <__b2d+0x48>
 80088e0:	3ff00000 	.word	0x3ff00000

080088e4 <__d2b>:
 80088e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80088e8:	460f      	mov	r7, r1
 80088ea:	2101      	movs	r1, #1
 80088ec:	ec59 8b10 	vmov	r8, r9, d0
 80088f0:	4616      	mov	r6, r2
 80088f2:	f7ff fc1b 	bl	800812c <_Balloc>
 80088f6:	4604      	mov	r4, r0
 80088f8:	b930      	cbnz	r0, 8008908 <__d2b+0x24>
 80088fa:	4602      	mov	r2, r0
 80088fc:	4b24      	ldr	r3, [pc, #144]	; (8008990 <__d2b+0xac>)
 80088fe:	4825      	ldr	r0, [pc, #148]	; (8008994 <__d2b+0xb0>)
 8008900:	f240 310f 	movw	r1, #783	; 0x30f
 8008904:	f001 f9a0 	bl	8009c48 <__assert_func>
 8008908:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800890c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008910:	bb2d      	cbnz	r5, 800895e <__d2b+0x7a>
 8008912:	9301      	str	r3, [sp, #4]
 8008914:	f1b8 0300 	subs.w	r3, r8, #0
 8008918:	d026      	beq.n	8008968 <__d2b+0x84>
 800891a:	4668      	mov	r0, sp
 800891c:	9300      	str	r3, [sp, #0]
 800891e:	f7ff fd17 	bl	8008350 <__lo0bits>
 8008922:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008926:	b1e8      	cbz	r0, 8008964 <__d2b+0x80>
 8008928:	f1c0 0320 	rsb	r3, r0, #32
 800892c:	fa02 f303 	lsl.w	r3, r2, r3
 8008930:	430b      	orrs	r3, r1
 8008932:	40c2      	lsrs	r2, r0
 8008934:	6163      	str	r3, [r4, #20]
 8008936:	9201      	str	r2, [sp, #4]
 8008938:	9b01      	ldr	r3, [sp, #4]
 800893a:	61a3      	str	r3, [r4, #24]
 800893c:	2b00      	cmp	r3, #0
 800893e:	bf14      	ite	ne
 8008940:	2202      	movne	r2, #2
 8008942:	2201      	moveq	r2, #1
 8008944:	6122      	str	r2, [r4, #16]
 8008946:	b1bd      	cbz	r5, 8008978 <__d2b+0x94>
 8008948:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800894c:	4405      	add	r5, r0
 800894e:	603d      	str	r5, [r7, #0]
 8008950:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008954:	6030      	str	r0, [r6, #0]
 8008956:	4620      	mov	r0, r4
 8008958:	b003      	add	sp, #12
 800895a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800895e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008962:	e7d6      	b.n	8008912 <__d2b+0x2e>
 8008964:	6161      	str	r1, [r4, #20]
 8008966:	e7e7      	b.n	8008938 <__d2b+0x54>
 8008968:	a801      	add	r0, sp, #4
 800896a:	f7ff fcf1 	bl	8008350 <__lo0bits>
 800896e:	9b01      	ldr	r3, [sp, #4]
 8008970:	6163      	str	r3, [r4, #20]
 8008972:	3020      	adds	r0, #32
 8008974:	2201      	movs	r2, #1
 8008976:	e7e5      	b.n	8008944 <__d2b+0x60>
 8008978:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800897c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008980:	6038      	str	r0, [r7, #0]
 8008982:	6918      	ldr	r0, [r3, #16]
 8008984:	f7ff fcc4 	bl	8008310 <__hi0bits>
 8008988:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800898c:	e7e2      	b.n	8008954 <__d2b+0x70>
 800898e:	bf00      	nop
 8008990:	0800af9d 	.word	0x0800af9d
 8008994:	0800afae 	.word	0x0800afae

08008998 <__ratio>:
 8008998:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800899c:	4688      	mov	r8, r1
 800899e:	4669      	mov	r1, sp
 80089a0:	4681      	mov	r9, r0
 80089a2:	f7ff ff55 	bl	8008850 <__b2d>
 80089a6:	a901      	add	r1, sp, #4
 80089a8:	4640      	mov	r0, r8
 80089aa:	ec55 4b10 	vmov	r4, r5, d0
 80089ae:	f7ff ff4f 	bl	8008850 <__b2d>
 80089b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80089b6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80089ba:	eba3 0c02 	sub.w	ip, r3, r2
 80089be:	e9dd 3200 	ldrd	r3, r2, [sp]
 80089c2:	1a9b      	subs	r3, r3, r2
 80089c4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80089c8:	ec51 0b10 	vmov	r0, r1, d0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	bfd6      	itet	le
 80089d0:	460a      	movle	r2, r1
 80089d2:	462a      	movgt	r2, r5
 80089d4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80089d8:	468b      	mov	fp, r1
 80089da:	462f      	mov	r7, r5
 80089dc:	bfd4      	ite	le
 80089de:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80089e2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80089e6:	4620      	mov	r0, r4
 80089e8:	ee10 2a10 	vmov	r2, s0
 80089ec:	465b      	mov	r3, fp
 80089ee:	4639      	mov	r1, r7
 80089f0:	f7f7 ff2c 	bl	800084c <__aeabi_ddiv>
 80089f4:	ec41 0b10 	vmov	d0, r0, r1
 80089f8:	b003      	add	sp, #12
 80089fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080089fe <__copybits>:
 80089fe:	3901      	subs	r1, #1
 8008a00:	b570      	push	{r4, r5, r6, lr}
 8008a02:	1149      	asrs	r1, r1, #5
 8008a04:	6914      	ldr	r4, [r2, #16]
 8008a06:	3101      	adds	r1, #1
 8008a08:	f102 0314 	add.w	r3, r2, #20
 8008a0c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008a10:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008a14:	1f05      	subs	r5, r0, #4
 8008a16:	42a3      	cmp	r3, r4
 8008a18:	d30c      	bcc.n	8008a34 <__copybits+0x36>
 8008a1a:	1aa3      	subs	r3, r4, r2
 8008a1c:	3b11      	subs	r3, #17
 8008a1e:	f023 0303 	bic.w	r3, r3, #3
 8008a22:	3211      	adds	r2, #17
 8008a24:	42a2      	cmp	r2, r4
 8008a26:	bf88      	it	hi
 8008a28:	2300      	movhi	r3, #0
 8008a2a:	4418      	add	r0, r3
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	4288      	cmp	r0, r1
 8008a30:	d305      	bcc.n	8008a3e <__copybits+0x40>
 8008a32:	bd70      	pop	{r4, r5, r6, pc}
 8008a34:	f853 6b04 	ldr.w	r6, [r3], #4
 8008a38:	f845 6f04 	str.w	r6, [r5, #4]!
 8008a3c:	e7eb      	b.n	8008a16 <__copybits+0x18>
 8008a3e:	f840 3b04 	str.w	r3, [r0], #4
 8008a42:	e7f4      	b.n	8008a2e <__copybits+0x30>

08008a44 <__any_on>:
 8008a44:	f100 0214 	add.w	r2, r0, #20
 8008a48:	6900      	ldr	r0, [r0, #16]
 8008a4a:	114b      	asrs	r3, r1, #5
 8008a4c:	4298      	cmp	r0, r3
 8008a4e:	b510      	push	{r4, lr}
 8008a50:	db11      	blt.n	8008a76 <__any_on+0x32>
 8008a52:	dd0a      	ble.n	8008a6a <__any_on+0x26>
 8008a54:	f011 011f 	ands.w	r1, r1, #31
 8008a58:	d007      	beq.n	8008a6a <__any_on+0x26>
 8008a5a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008a5e:	fa24 f001 	lsr.w	r0, r4, r1
 8008a62:	fa00 f101 	lsl.w	r1, r0, r1
 8008a66:	428c      	cmp	r4, r1
 8008a68:	d10b      	bne.n	8008a82 <__any_on+0x3e>
 8008a6a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d803      	bhi.n	8008a7a <__any_on+0x36>
 8008a72:	2000      	movs	r0, #0
 8008a74:	bd10      	pop	{r4, pc}
 8008a76:	4603      	mov	r3, r0
 8008a78:	e7f7      	b.n	8008a6a <__any_on+0x26>
 8008a7a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008a7e:	2900      	cmp	r1, #0
 8008a80:	d0f5      	beq.n	8008a6e <__any_on+0x2a>
 8008a82:	2001      	movs	r0, #1
 8008a84:	e7f6      	b.n	8008a74 <__any_on+0x30>

08008a86 <sulp>:
 8008a86:	b570      	push	{r4, r5, r6, lr}
 8008a88:	4604      	mov	r4, r0
 8008a8a:	460d      	mov	r5, r1
 8008a8c:	ec45 4b10 	vmov	d0, r4, r5
 8008a90:	4616      	mov	r6, r2
 8008a92:	f7ff feb7 	bl	8008804 <__ulp>
 8008a96:	ec51 0b10 	vmov	r0, r1, d0
 8008a9a:	b17e      	cbz	r6, 8008abc <sulp+0x36>
 8008a9c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008aa0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	dd09      	ble.n	8008abc <sulp+0x36>
 8008aa8:	051b      	lsls	r3, r3, #20
 8008aaa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008aae:	2400      	movs	r4, #0
 8008ab0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008ab4:	4622      	mov	r2, r4
 8008ab6:	462b      	mov	r3, r5
 8008ab8:	f7f7 fd9e 	bl	80005f8 <__aeabi_dmul>
 8008abc:	bd70      	pop	{r4, r5, r6, pc}
	...

08008ac0 <_strtod_l>:
 8008ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac4:	ed2d 8b02 	vpush	{d8}
 8008ac8:	b09b      	sub	sp, #108	; 0x6c
 8008aca:	4604      	mov	r4, r0
 8008acc:	9213      	str	r2, [sp, #76]	; 0x4c
 8008ace:	2200      	movs	r2, #0
 8008ad0:	9216      	str	r2, [sp, #88]	; 0x58
 8008ad2:	460d      	mov	r5, r1
 8008ad4:	f04f 0800 	mov.w	r8, #0
 8008ad8:	f04f 0900 	mov.w	r9, #0
 8008adc:	460a      	mov	r2, r1
 8008ade:	9215      	str	r2, [sp, #84]	; 0x54
 8008ae0:	7811      	ldrb	r1, [r2, #0]
 8008ae2:	292b      	cmp	r1, #43	; 0x2b
 8008ae4:	d04c      	beq.n	8008b80 <_strtod_l+0xc0>
 8008ae6:	d83a      	bhi.n	8008b5e <_strtod_l+0x9e>
 8008ae8:	290d      	cmp	r1, #13
 8008aea:	d834      	bhi.n	8008b56 <_strtod_l+0x96>
 8008aec:	2908      	cmp	r1, #8
 8008aee:	d834      	bhi.n	8008b5a <_strtod_l+0x9a>
 8008af0:	2900      	cmp	r1, #0
 8008af2:	d03d      	beq.n	8008b70 <_strtod_l+0xb0>
 8008af4:	2200      	movs	r2, #0
 8008af6:	920a      	str	r2, [sp, #40]	; 0x28
 8008af8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008afa:	7832      	ldrb	r2, [r6, #0]
 8008afc:	2a30      	cmp	r2, #48	; 0x30
 8008afe:	f040 80b4 	bne.w	8008c6a <_strtod_l+0x1aa>
 8008b02:	7872      	ldrb	r2, [r6, #1]
 8008b04:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008b08:	2a58      	cmp	r2, #88	; 0x58
 8008b0a:	d170      	bne.n	8008bee <_strtod_l+0x12e>
 8008b0c:	9302      	str	r3, [sp, #8]
 8008b0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b10:	9301      	str	r3, [sp, #4]
 8008b12:	ab16      	add	r3, sp, #88	; 0x58
 8008b14:	9300      	str	r3, [sp, #0]
 8008b16:	4a8e      	ldr	r2, [pc, #568]	; (8008d50 <_strtod_l+0x290>)
 8008b18:	ab17      	add	r3, sp, #92	; 0x5c
 8008b1a:	a915      	add	r1, sp, #84	; 0x54
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	f001 f92f 	bl	8009d80 <__gethex>
 8008b22:	f010 070f 	ands.w	r7, r0, #15
 8008b26:	4605      	mov	r5, r0
 8008b28:	d005      	beq.n	8008b36 <_strtod_l+0x76>
 8008b2a:	2f06      	cmp	r7, #6
 8008b2c:	d12a      	bne.n	8008b84 <_strtod_l+0xc4>
 8008b2e:	3601      	adds	r6, #1
 8008b30:	2300      	movs	r3, #0
 8008b32:	9615      	str	r6, [sp, #84]	; 0x54
 8008b34:	930a      	str	r3, [sp, #40]	; 0x28
 8008b36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f040 857f 	bne.w	800963c <_strtod_l+0xb7c>
 8008b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b40:	b1db      	cbz	r3, 8008b7a <_strtod_l+0xba>
 8008b42:	4642      	mov	r2, r8
 8008b44:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008b48:	ec43 2b10 	vmov	d0, r2, r3
 8008b4c:	b01b      	add	sp, #108	; 0x6c
 8008b4e:	ecbd 8b02 	vpop	{d8}
 8008b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b56:	2920      	cmp	r1, #32
 8008b58:	d1cc      	bne.n	8008af4 <_strtod_l+0x34>
 8008b5a:	3201      	adds	r2, #1
 8008b5c:	e7bf      	b.n	8008ade <_strtod_l+0x1e>
 8008b5e:	292d      	cmp	r1, #45	; 0x2d
 8008b60:	d1c8      	bne.n	8008af4 <_strtod_l+0x34>
 8008b62:	2101      	movs	r1, #1
 8008b64:	910a      	str	r1, [sp, #40]	; 0x28
 8008b66:	1c51      	adds	r1, r2, #1
 8008b68:	9115      	str	r1, [sp, #84]	; 0x54
 8008b6a:	7852      	ldrb	r2, [r2, #1]
 8008b6c:	2a00      	cmp	r2, #0
 8008b6e:	d1c3      	bne.n	8008af8 <_strtod_l+0x38>
 8008b70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b72:	9515      	str	r5, [sp, #84]	; 0x54
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	f040 855f 	bne.w	8009638 <_strtod_l+0xb78>
 8008b7a:	4642      	mov	r2, r8
 8008b7c:	464b      	mov	r3, r9
 8008b7e:	e7e3      	b.n	8008b48 <_strtod_l+0x88>
 8008b80:	2100      	movs	r1, #0
 8008b82:	e7ef      	b.n	8008b64 <_strtod_l+0xa4>
 8008b84:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008b86:	b13a      	cbz	r2, 8008b98 <_strtod_l+0xd8>
 8008b88:	2135      	movs	r1, #53	; 0x35
 8008b8a:	a818      	add	r0, sp, #96	; 0x60
 8008b8c:	f7ff ff37 	bl	80089fe <__copybits>
 8008b90:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008b92:	4620      	mov	r0, r4
 8008b94:	f7ff fb0a 	bl	80081ac <_Bfree>
 8008b98:	3f01      	subs	r7, #1
 8008b9a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008b9c:	2f04      	cmp	r7, #4
 8008b9e:	d806      	bhi.n	8008bae <_strtod_l+0xee>
 8008ba0:	e8df f007 	tbb	[pc, r7]
 8008ba4:	201d0314 	.word	0x201d0314
 8008ba8:	14          	.byte	0x14
 8008ba9:	00          	.byte	0x00
 8008baa:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8008bae:	05e9      	lsls	r1, r5, #23
 8008bb0:	bf48      	it	mi
 8008bb2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008bb6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008bba:	0d1b      	lsrs	r3, r3, #20
 8008bbc:	051b      	lsls	r3, r3, #20
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d1b9      	bne.n	8008b36 <_strtod_l+0x76>
 8008bc2:	f7fe faf7 	bl	80071b4 <__errno>
 8008bc6:	2322      	movs	r3, #34	; 0x22
 8008bc8:	6003      	str	r3, [r0, #0]
 8008bca:	e7b4      	b.n	8008b36 <_strtod_l+0x76>
 8008bcc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008bd0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008bd4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008bd8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008bdc:	e7e7      	b.n	8008bae <_strtod_l+0xee>
 8008bde:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008d58 <_strtod_l+0x298>
 8008be2:	e7e4      	b.n	8008bae <_strtod_l+0xee>
 8008be4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008be8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008bec:	e7df      	b.n	8008bae <_strtod_l+0xee>
 8008bee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bf0:	1c5a      	adds	r2, r3, #1
 8008bf2:	9215      	str	r2, [sp, #84]	; 0x54
 8008bf4:	785b      	ldrb	r3, [r3, #1]
 8008bf6:	2b30      	cmp	r3, #48	; 0x30
 8008bf8:	d0f9      	beq.n	8008bee <_strtod_l+0x12e>
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d09b      	beq.n	8008b36 <_strtod_l+0x76>
 8008bfe:	2301      	movs	r3, #1
 8008c00:	f04f 0a00 	mov.w	sl, #0
 8008c04:	9304      	str	r3, [sp, #16]
 8008c06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c08:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c0a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008c0e:	46d3      	mov	fp, sl
 8008c10:	220a      	movs	r2, #10
 8008c12:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008c14:	7806      	ldrb	r6, [r0, #0]
 8008c16:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008c1a:	b2d9      	uxtb	r1, r3
 8008c1c:	2909      	cmp	r1, #9
 8008c1e:	d926      	bls.n	8008c6e <_strtod_l+0x1ae>
 8008c20:	494c      	ldr	r1, [pc, #304]	; (8008d54 <_strtod_l+0x294>)
 8008c22:	2201      	movs	r2, #1
 8008c24:	f000 ffe6 	bl	8009bf4 <strncmp>
 8008c28:	2800      	cmp	r0, #0
 8008c2a:	d030      	beq.n	8008c8e <_strtod_l+0x1ce>
 8008c2c:	2000      	movs	r0, #0
 8008c2e:	4632      	mov	r2, r6
 8008c30:	9005      	str	r0, [sp, #20]
 8008c32:	465e      	mov	r6, fp
 8008c34:	4603      	mov	r3, r0
 8008c36:	2a65      	cmp	r2, #101	; 0x65
 8008c38:	d001      	beq.n	8008c3e <_strtod_l+0x17e>
 8008c3a:	2a45      	cmp	r2, #69	; 0x45
 8008c3c:	d113      	bne.n	8008c66 <_strtod_l+0x1a6>
 8008c3e:	b91e      	cbnz	r6, 8008c48 <_strtod_l+0x188>
 8008c40:	9a04      	ldr	r2, [sp, #16]
 8008c42:	4302      	orrs	r2, r0
 8008c44:	d094      	beq.n	8008b70 <_strtod_l+0xb0>
 8008c46:	2600      	movs	r6, #0
 8008c48:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008c4a:	1c6a      	adds	r2, r5, #1
 8008c4c:	9215      	str	r2, [sp, #84]	; 0x54
 8008c4e:	786a      	ldrb	r2, [r5, #1]
 8008c50:	2a2b      	cmp	r2, #43	; 0x2b
 8008c52:	d074      	beq.n	8008d3e <_strtod_l+0x27e>
 8008c54:	2a2d      	cmp	r2, #45	; 0x2d
 8008c56:	d078      	beq.n	8008d4a <_strtod_l+0x28a>
 8008c58:	f04f 0c00 	mov.w	ip, #0
 8008c5c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008c60:	2909      	cmp	r1, #9
 8008c62:	d97f      	bls.n	8008d64 <_strtod_l+0x2a4>
 8008c64:	9515      	str	r5, [sp, #84]	; 0x54
 8008c66:	2700      	movs	r7, #0
 8008c68:	e09e      	b.n	8008da8 <_strtod_l+0x2e8>
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	e7c8      	b.n	8008c00 <_strtod_l+0x140>
 8008c6e:	f1bb 0f08 	cmp.w	fp, #8
 8008c72:	bfd8      	it	le
 8008c74:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008c76:	f100 0001 	add.w	r0, r0, #1
 8008c7a:	bfda      	itte	le
 8008c7c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008c80:	9309      	strle	r3, [sp, #36]	; 0x24
 8008c82:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008c86:	f10b 0b01 	add.w	fp, fp, #1
 8008c8a:	9015      	str	r0, [sp, #84]	; 0x54
 8008c8c:	e7c1      	b.n	8008c12 <_strtod_l+0x152>
 8008c8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c90:	1c5a      	adds	r2, r3, #1
 8008c92:	9215      	str	r2, [sp, #84]	; 0x54
 8008c94:	785a      	ldrb	r2, [r3, #1]
 8008c96:	f1bb 0f00 	cmp.w	fp, #0
 8008c9a:	d037      	beq.n	8008d0c <_strtod_l+0x24c>
 8008c9c:	9005      	str	r0, [sp, #20]
 8008c9e:	465e      	mov	r6, fp
 8008ca0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008ca4:	2b09      	cmp	r3, #9
 8008ca6:	d912      	bls.n	8008cce <_strtod_l+0x20e>
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e7c4      	b.n	8008c36 <_strtod_l+0x176>
 8008cac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008cae:	1c5a      	adds	r2, r3, #1
 8008cb0:	9215      	str	r2, [sp, #84]	; 0x54
 8008cb2:	785a      	ldrb	r2, [r3, #1]
 8008cb4:	3001      	adds	r0, #1
 8008cb6:	2a30      	cmp	r2, #48	; 0x30
 8008cb8:	d0f8      	beq.n	8008cac <_strtod_l+0x1ec>
 8008cba:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008cbe:	2b08      	cmp	r3, #8
 8008cc0:	f200 84c1 	bhi.w	8009646 <_strtod_l+0xb86>
 8008cc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008cc6:	9005      	str	r0, [sp, #20]
 8008cc8:	2000      	movs	r0, #0
 8008cca:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ccc:	4606      	mov	r6, r0
 8008cce:	3a30      	subs	r2, #48	; 0x30
 8008cd0:	f100 0301 	add.w	r3, r0, #1
 8008cd4:	d014      	beq.n	8008d00 <_strtod_l+0x240>
 8008cd6:	9905      	ldr	r1, [sp, #20]
 8008cd8:	4419      	add	r1, r3
 8008cda:	9105      	str	r1, [sp, #20]
 8008cdc:	4633      	mov	r3, r6
 8008cde:	eb00 0c06 	add.w	ip, r0, r6
 8008ce2:	210a      	movs	r1, #10
 8008ce4:	4563      	cmp	r3, ip
 8008ce6:	d113      	bne.n	8008d10 <_strtod_l+0x250>
 8008ce8:	1833      	adds	r3, r6, r0
 8008cea:	2b08      	cmp	r3, #8
 8008cec:	f106 0601 	add.w	r6, r6, #1
 8008cf0:	4406      	add	r6, r0
 8008cf2:	dc1a      	bgt.n	8008d2a <_strtod_l+0x26a>
 8008cf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008cf6:	230a      	movs	r3, #10
 8008cf8:	fb03 2301 	mla	r3, r3, r1, r2
 8008cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8008cfe:	2300      	movs	r3, #0
 8008d00:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008d02:	1c51      	adds	r1, r2, #1
 8008d04:	9115      	str	r1, [sp, #84]	; 0x54
 8008d06:	7852      	ldrb	r2, [r2, #1]
 8008d08:	4618      	mov	r0, r3
 8008d0a:	e7c9      	b.n	8008ca0 <_strtod_l+0x1e0>
 8008d0c:	4658      	mov	r0, fp
 8008d0e:	e7d2      	b.n	8008cb6 <_strtod_l+0x1f6>
 8008d10:	2b08      	cmp	r3, #8
 8008d12:	f103 0301 	add.w	r3, r3, #1
 8008d16:	dc03      	bgt.n	8008d20 <_strtod_l+0x260>
 8008d18:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008d1a:	434f      	muls	r7, r1
 8008d1c:	9709      	str	r7, [sp, #36]	; 0x24
 8008d1e:	e7e1      	b.n	8008ce4 <_strtod_l+0x224>
 8008d20:	2b10      	cmp	r3, #16
 8008d22:	bfd8      	it	le
 8008d24:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008d28:	e7dc      	b.n	8008ce4 <_strtod_l+0x224>
 8008d2a:	2e10      	cmp	r6, #16
 8008d2c:	bfdc      	itt	le
 8008d2e:	230a      	movle	r3, #10
 8008d30:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008d34:	e7e3      	b.n	8008cfe <_strtod_l+0x23e>
 8008d36:	2300      	movs	r3, #0
 8008d38:	9305      	str	r3, [sp, #20]
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e780      	b.n	8008c40 <_strtod_l+0x180>
 8008d3e:	f04f 0c00 	mov.w	ip, #0
 8008d42:	1caa      	adds	r2, r5, #2
 8008d44:	9215      	str	r2, [sp, #84]	; 0x54
 8008d46:	78aa      	ldrb	r2, [r5, #2]
 8008d48:	e788      	b.n	8008c5c <_strtod_l+0x19c>
 8008d4a:	f04f 0c01 	mov.w	ip, #1
 8008d4e:	e7f8      	b.n	8008d42 <_strtod_l+0x282>
 8008d50:	0800b108 	.word	0x0800b108
 8008d54:	0800b104 	.word	0x0800b104
 8008d58:	7ff00000 	.word	0x7ff00000
 8008d5c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008d5e:	1c51      	adds	r1, r2, #1
 8008d60:	9115      	str	r1, [sp, #84]	; 0x54
 8008d62:	7852      	ldrb	r2, [r2, #1]
 8008d64:	2a30      	cmp	r2, #48	; 0x30
 8008d66:	d0f9      	beq.n	8008d5c <_strtod_l+0x29c>
 8008d68:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008d6c:	2908      	cmp	r1, #8
 8008d6e:	f63f af7a 	bhi.w	8008c66 <_strtod_l+0x1a6>
 8008d72:	3a30      	subs	r2, #48	; 0x30
 8008d74:	9208      	str	r2, [sp, #32]
 8008d76:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008d78:	920c      	str	r2, [sp, #48]	; 0x30
 8008d7a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008d7c:	1c57      	adds	r7, r2, #1
 8008d7e:	9715      	str	r7, [sp, #84]	; 0x54
 8008d80:	7852      	ldrb	r2, [r2, #1]
 8008d82:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008d86:	f1be 0f09 	cmp.w	lr, #9
 8008d8a:	d938      	bls.n	8008dfe <_strtod_l+0x33e>
 8008d8c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008d8e:	1a7f      	subs	r7, r7, r1
 8008d90:	2f08      	cmp	r7, #8
 8008d92:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008d96:	dc03      	bgt.n	8008da0 <_strtod_l+0x2e0>
 8008d98:	9908      	ldr	r1, [sp, #32]
 8008d9a:	428f      	cmp	r7, r1
 8008d9c:	bfa8      	it	ge
 8008d9e:	460f      	movge	r7, r1
 8008da0:	f1bc 0f00 	cmp.w	ip, #0
 8008da4:	d000      	beq.n	8008da8 <_strtod_l+0x2e8>
 8008da6:	427f      	negs	r7, r7
 8008da8:	2e00      	cmp	r6, #0
 8008daa:	d14f      	bne.n	8008e4c <_strtod_l+0x38c>
 8008dac:	9904      	ldr	r1, [sp, #16]
 8008dae:	4301      	orrs	r1, r0
 8008db0:	f47f aec1 	bne.w	8008b36 <_strtod_l+0x76>
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f47f aedb 	bne.w	8008b70 <_strtod_l+0xb0>
 8008dba:	2a69      	cmp	r2, #105	; 0x69
 8008dbc:	d029      	beq.n	8008e12 <_strtod_l+0x352>
 8008dbe:	dc26      	bgt.n	8008e0e <_strtod_l+0x34e>
 8008dc0:	2a49      	cmp	r2, #73	; 0x49
 8008dc2:	d026      	beq.n	8008e12 <_strtod_l+0x352>
 8008dc4:	2a4e      	cmp	r2, #78	; 0x4e
 8008dc6:	f47f aed3 	bne.w	8008b70 <_strtod_l+0xb0>
 8008dca:	499b      	ldr	r1, [pc, #620]	; (8009038 <_strtod_l+0x578>)
 8008dcc:	a815      	add	r0, sp, #84	; 0x54
 8008dce:	f001 fa17 	bl	800a200 <__match>
 8008dd2:	2800      	cmp	r0, #0
 8008dd4:	f43f aecc 	beq.w	8008b70 <_strtod_l+0xb0>
 8008dd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	2b28      	cmp	r3, #40	; 0x28
 8008dde:	d12f      	bne.n	8008e40 <_strtod_l+0x380>
 8008de0:	4996      	ldr	r1, [pc, #600]	; (800903c <_strtod_l+0x57c>)
 8008de2:	aa18      	add	r2, sp, #96	; 0x60
 8008de4:	a815      	add	r0, sp, #84	; 0x54
 8008de6:	f001 fa1f 	bl	800a228 <__hexnan>
 8008dea:	2805      	cmp	r0, #5
 8008dec:	d128      	bne.n	8008e40 <_strtod_l+0x380>
 8008dee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008df0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008df4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008df8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008dfc:	e69b      	b.n	8008b36 <_strtod_l+0x76>
 8008dfe:	9f08      	ldr	r7, [sp, #32]
 8008e00:	210a      	movs	r1, #10
 8008e02:	fb01 2107 	mla	r1, r1, r7, r2
 8008e06:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008e0a:	9208      	str	r2, [sp, #32]
 8008e0c:	e7b5      	b.n	8008d7a <_strtod_l+0x2ba>
 8008e0e:	2a6e      	cmp	r2, #110	; 0x6e
 8008e10:	e7d9      	b.n	8008dc6 <_strtod_l+0x306>
 8008e12:	498b      	ldr	r1, [pc, #556]	; (8009040 <_strtod_l+0x580>)
 8008e14:	a815      	add	r0, sp, #84	; 0x54
 8008e16:	f001 f9f3 	bl	800a200 <__match>
 8008e1a:	2800      	cmp	r0, #0
 8008e1c:	f43f aea8 	beq.w	8008b70 <_strtod_l+0xb0>
 8008e20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e22:	4988      	ldr	r1, [pc, #544]	; (8009044 <_strtod_l+0x584>)
 8008e24:	3b01      	subs	r3, #1
 8008e26:	a815      	add	r0, sp, #84	; 0x54
 8008e28:	9315      	str	r3, [sp, #84]	; 0x54
 8008e2a:	f001 f9e9 	bl	800a200 <__match>
 8008e2e:	b910      	cbnz	r0, 8008e36 <_strtod_l+0x376>
 8008e30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e32:	3301      	adds	r3, #1
 8008e34:	9315      	str	r3, [sp, #84]	; 0x54
 8008e36:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8009054 <_strtod_l+0x594>
 8008e3a:	f04f 0800 	mov.w	r8, #0
 8008e3e:	e67a      	b.n	8008b36 <_strtod_l+0x76>
 8008e40:	4881      	ldr	r0, [pc, #516]	; (8009048 <_strtod_l+0x588>)
 8008e42:	f000 fef9 	bl	8009c38 <nan>
 8008e46:	ec59 8b10 	vmov	r8, r9, d0
 8008e4a:	e674      	b.n	8008b36 <_strtod_l+0x76>
 8008e4c:	9b05      	ldr	r3, [sp, #20]
 8008e4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e50:	1afb      	subs	r3, r7, r3
 8008e52:	f1bb 0f00 	cmp.w	fp, #0
 8008e56:	bf08      	it	eq
 8008e58:	46b3      	moveq	fp, r6
 8008e5a:	2e10      	cmp	r6, #16
 8008e5c:	9308      	str	r3, [sp, #32]
 8008e5e:	4635      	mov	r5, r6
 8008e60:	bfa8      	it	ge
 8008e62:	2510      	movge	r5, #16
 8008e64:	f7f7 fb4e 	bl	8000504 <__aeabi_ui2d>
 8008e68:	2e09      	cmp	r6, #9
 8008e6a:	4680      	mov	r8, r0
 8008e6c:	4689      	mov	r9, r1
 8008e6e:	dd13      	ble.n	8008e98 <_strtod_l+0x3d8>
 8008e70:	4b76      	ldr	r3, [pc, #472]	; (800904c <_strtod_l+0x58c>)
 8008e72:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008e76:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008e7a:	f7f7 fbbd 	bl	80005f8 <__aeabi_dmul>
 8008e7e:	4680      	mov	r8, r0
 8008e80:	4650      	mov	r0, sl
 8008e82:	4689      	mov	r9, r1
 8008e84:	f7f7 fb3e 	bl	8000504 <__aeabi_ui2d>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	4640      	mov	r0, r8
 8008e8e:	4649      	mov	r1, r9
 8008e90:	f7f7 f9fc 	bl	800028c <__adddf3>
 8008e94:	4680      	mov	r8, r0
 8008e96:	4689      	mov	r9, r1
 8008e98:	2e0f      	cmp	r6, #15
 8008e9a:	dc38      	bgt.n	8008f0e <_strtod_l+0x44e>
 8008e9c:	9b08      	ldr	r3, [sp, #32]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	f43f ae49 	beq.w	8008b36 <_strtod_l+0x76>
 8008ea4:	dd24      	ble.n	8008ef0 <_strtod_l+0x430>
 8008ea6:	2b16      	cmp	r3, #22
 8008ea8:	dc0b      	bgt.n	8008ec2 <_strtod_l+0x402>
 8008eaa:	4968      	ldr	r1, [pc, #416]	; (800904c <_strtod_l+0x58c>)
 8008eac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008eb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008eb4:	4642      	mov	r2, r8
 8008eb6:	464b      	mov	r3, r9
 8008eb8:	f7f7 fb9e 	bl	80005f8 <__aeabi_dmul>
 8008ebc:	4680      	mov	r8, r0
 8008ebe:	4689      	mov	r9, r1
 8008ec0:	e639      	b.n	8008b36 <_strtod_l+0x76>
 8008ec2:	9a08      	ldr	r2, [sp, #32]
 8008ec4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	db20      	blt.n	8008f0e <_strtod_l+0x44e>
 8008ecc:	4c5f      	ldr	r4, [pc, #380]	; (800904c <_strtod_l+0x58c>)
 8008ece:	f1c6 060f 	rsb	r6, r6, #15
 8008ed2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008ed6:	4642      	mov	r2, r8
 8008ed8:	464b      	mov	r3, r9
 8008eda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ede:	f7f7 fb8b 	bl	80005f8 <__aeabi_dmul>
 8008ee2:	9b08      	ldr	r3, [sp, #32]
 8008ee4:	1b9e      	subs	r6, r3, r6
 8008ee6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008eea:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008eee:	e7e3      	b.n	8008eb8 <_strtod_l+0x3f8>
 8008ef0:	9b08      	ldr	r3, [sp, #32]
 8008ef2:	3316      	adds	r3, #22
 8008ef4:	db0b      	blt.n	8008f0e <_strtod_l+0x44e>
 8008ef6:	9b05      	ldr	r3, [sp, #20]
 8008ef8:	1bdf      	subs	r7, r3, r7
 8008efa:	4b54      	ldr	r3, [pc, #336]	; (800904c <_strtod_l+0x58c>)
 8008efc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008f00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f04:	4640      	mov	r0, r8
 8008f06:	4649      	mov	r1, r9
 8008f08:	f7f7 fca0 	bl	800084c <__aeabi_ddiv>
 8008f0c:	e7d6      	b.n	8008ebc <_strtod_l+0x3fc>
 8008f0e:	9b08      	ldr	r3, [sp, #32]
 8008f10:	1b75      	subs	r5, r6, r5
 8008f12:	441d      	add	r5, r3
 8008f14:	2d00      	cmp	r5, #0
 8008f16:	dd70      	ble.n	8008ffa <_strtod_l+0x53a>
 8008f18:	f015 030f 	ands.w	r3, r5, #15
 8008f1c:	d00a      	beq.n	8008f34 <_strtod_l+0x474>
 8008f1e:	494b      	ldr	r1, [pc, #300]	; (800904c <_strtod_l+0x58c>)
 8008f20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008f24:	4642      	mov	r2, r8
 8008f26:	464b      	mov	r3, r9
 8008f28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f2c:	f7f7 fb64 	bl	80005f8 <__aeabi_dmul>
 8008f30:	4680      	mov	r8, r0
 8008f32:	4689      	mov	r9, r1
 8008f34:	f035 050f 	bics.w	r5, r5, #15
 8008f38:	d04d      	beq.n	8008fd6 <_strtod_l+0x516>
 8008f3a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008f3e:	dd22      	ble.n	8008f86 <_strtod_l+0x4c6>
 8008f40:	2500      	movs	r5, #0
 8008f42:	46ab      	mov	fp, r5
 8008f44:	9509      	str	r5, [sp, #36]	; 0x24
 8008f46:	9505      	str	r5, [sp, #20]
 8008f48:	2322      	movs	r3, #34	; 0x22
 8008f4a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009054 <_strtod_l+0x594>
 8008f4e:	6023      	str	r3, [r4, #0]
 8008f50:	f04f 0800 	mov.w	r8, #0
 8008f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	f43f aded 	beq.w	8008b36 <_strtod_l+0x76>
 8008f5c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008f5e:	4620      	mov	r0, r4
 8008f60:	f7ff f924 	bl	80081ac <_Bfree>
 8008f64:	9905      	ldr	r1, [sp, #20]
 8008f66:	4620      	mov	r0, r4
 8008f68:	f7ff f920 	bl	80081ac <_Bfree>
 8008f6c:	4659      	mov	r1, fp
 8008f6e:	4620      	mov	r0, r4
 8008f70:	f7ff f91c 	bl	80081ac <_Bfree>
 8008f74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f76:	4620      	mov	r0, r4
 8008f78:	f7ff f918 	bl	80081ac <_Bfree>
 8008f7c:	4629      	mov	r1, r5
 8008f7e:	4620      	mov	r0, r4
 8008f80:	f7ff f914 	bl	80081ac <_Bfree>
 8008f84:	e5d7      	b.n	8008b36 <_strtod_l+0x76>
 8008f86:	4b32      	ldr	r3, [pc, #200]	; (8009050 <_strtod_l+0x590>)
 8008f88:	9304      	str	r3, [sp, #16]
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	112d      	asrs	r5, r5, #4
 8008f8e:	4640      	mov	r0, r8
 8008f90:	4649      	mov	r1, r9
 8008f92:	469a      	mov	sl, r3
 8008f94:	2d01      	cmp	r5, #1
 8008f96:	dc21      	bgt.n	8008fdc <_strtod_l+0x51c>
 8008f98:	b10b      	cbz	r3, 8008f9e <_strtod_l+0x4de>
 8008f9a:	4680      	mov	r8, r0
 8008f9c:	4689      	mov	r9, r1
 8008f9e:	492c      	ldr	r1, [pc, #176]	; (8009050 <_strtod_l+0x590>)
 8008fa0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008fa4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008fa8:	4642      	mov	r2, r8
 8008faa:	464b      	mov	r3, r9
 8008fac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fb0:	f7f7 fb22 	bl	80005f8 <__aeabi_dmul>
 8008fb4:	4b27      	ldr	r3, [pc, #156]	; (8009054 <_strtod_l+0x594>)
 8008fb6:	460a      	mov	r2, r1
 8008fb8:	400b      	ands	r3, r1
 8008fba:	4927      	ldr	r1, [pc, #156]	; (8009058 <_strtod_l+0x598>)
 8008fbc:	428b      	cmp	r3, r1
 8008fbe:	4680      	mov	r8, r0
 8008fc0:	d8be      	bhi.n	8008f40 <_strtod_l+0x480>
 8008fc2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008fc6:	428b      	cmp	r3, r1
 8008fc8:	bf86      	itte	hi
 8008fca:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800905c <_strtod_l+0x59c>
 8008fce:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8008fd2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	9304      	str	r3, [sp, #16]
 8008fda:	e07b      	b.n	80090d4 <_strtod_l+0x614>
 8008fdc:	07ea      	lsls	r2, r5, #31
 8008fde:	d505      	bpl.n	8008fec <_strtod_l+0x52c>
 8008fe0:	9b04      	ldr	r3, [sp, #16]
 8008fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe6:	f7f7 fb07 	bl	80005f8 <__aeabi_dmul>
 8008fea:	2301      	movs	r3, #1
 8008fec:	9a04      	ldr	r2, [sp, #16]
 8008fee:	3208      	adds	r2, #8
 8008ff0:	f10a 0a01 	add.w	sl, sl, #1
 8008ff4:	106d      	asrs	r5, r5, #1
 8008ff6:	9204      	str	r2, [sp, #16]
 8008ff8:	e7cc      	b.n	8008f94 <_strtod_l+0x4d4>
 8008ffa:	d0ec      	beq.n	8008fd6 <_strtod_l+0x516>
 8008ffc:	426d      	negs	r5, r5
 8008ffe:	f015 020f 	ands.w	r2, r5, #15
 8009002:	d00a      	beq.n	800901a <_strtod_l+0x55a>
 8009004:	4b11      	ldr	r3, [pc, #68]	; (800904c <_strtod_l+0x58c>)
 8009006:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800900a:	4640      	mov	r0, r8
 800900c:	4649      	mov	r1, r9
 800900e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009012:	f7f7 fc1b 	bl	800084c <__aeabi_ddiv>
 8009016:	4680      	mov	r8, r0
 8009018:	4689      	mov	r9, r1
 800901a:	112d      	asrs	r5, r5, #4
 800901c:	d0db      	beq.n	8008fd6 <_strtod_l+0x516>
 800901e:	2d1f      	cmp	r5, #31
 8009020:	dd1e      	ble.n	8009060 <_strtod_l+0x5a0>
 8009022:	2500      	movs	r5, #0
 8009024:	46ab      	mov	fp, r5
 8009026:	9509      	str	r5, [sp, #36]	; 0x24
 8009028:	9505      	str	r5, [sp, #20]
 800902a:	2322      	movs	r3, #34	; 0x22
 800902c:	f04f 0800 	mov.w	r8, #0
 8009030:	f04f 0900 	mov.w	r9, #0
 8009034:	6023      	str	r3, [r4, #0]
 8009036:	e78d      	b.n	8008f54 <_strtod_l+0x494>
 8009038:	0800aef5 	.word	0x0800aef5
 800903c:	0800b11c 	.word	0x0800b11c
 8009040:	0800aeed 	.word	0x0800aeed
 8009044:	0800af24 	.word	0x0800af24
 8009048:	0800b2ad 	.word	0x0800b2ad
 800904c:	0800b030 	.word	0x0800b030
 8009050:	0800b008 	.word	0x0800b008
 8009054:	7ff00000 	.word	0x7ff00000
 8009058:	7ca00000 	.word	0x7ca00000
 800905c:	7fefffff 	.word	0x7fefffff
 8009060:	f015 0310 	ands.w	r3, r5, #16
 8009064:	bf18      	it	ne
 8009066:	236a      	movne	r3, #106	; 0x6a
 8009068:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800940c <_strtod_l+0x94c>
 800906c:	9304      	str	r3, [sp, #16]
 800906e:	4640      	mov	r0, r8
 8009070:	4649      	mov	r1, r9
 8009072:	2300      	movs	r3, #0
 8009074:	07ea      	lsls	r2, r5, #31
 8009076:	d504      	bpl.n	8009082 <_strtod_l+0x5c2>
 8009078:	e9da 2300 	ldrd	r2, r3, [sl]
 800907c:	f7f7 fabc 	bl	80005f8 <__aeabi_dmul>
 8009080:	2301      	movs	r3, #1
 8009082:	106d      	asrs	r5, r5, #1
 8009084:	f10a 0a08 	add.w	sl, sl, #8
 8009088:	d1f4      	bne.n	8009074 <_strtod_l+0x5b4>
 800908a:	b10b      	cbz	r3, 8009090 <_strtod_l+0x5d0>
 800908c:	4680      	mov	r8, r0
 800908e:	4689      	mov	r9, r1
 8009090:	9b04      	ldr	r3, [sp, #16]
 8009092:	b1bb      	cbz	r3, 80090c4 <_strtod_l+0x604>
 8009094:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009098:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800909c:	2b00      	cmp	r3, #0
 800909e:	4649      	mov	r1, r9
 80090a0:	dd10      	ble.n	80090c4 <_strtod_l+0x604>
 80090a2:	2b1f      	cmp	r3, #31
 80090a4:	f340 811e 	ble.w	80092e4 <_strtod_l+0x824>
 80090a8:	2b34      	cmp	r3, #52	; 0x34
 80090aa:	bfde      	ittt	le
 80090ac:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80090b0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80090b4:	4093      	lslle	r3, r2
 80090b6:	f04f 0800 	mov.w	r8, #0
 80090ba:	bfcc      	ite	gt
 80090bc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80090c0:	ea03 0901 	andle.w	r9, r3, r1
 80090c4:	2200      	movs	r2, #0
 80090c6:	2300      	movs	r3, #0
 80090c8:	4640      	mov	r0, r8
 80090ca:	4649      	mov	r1, r9
 80090cc:	f7f7 fcfc 	bl	8000ac8 <__aeabi_dcmpeq>
 80090d0:	2800      	cmp	r0, #0
 80090d2:	d1a6      	bne.n	8009022 <_strtod_l+0x562>
 80090d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80090da:	4633      	mov	r3, r6
 80090dc:	465a      	mov	r2, fp
 80090de:	4620      	mov	r0, r4
 80090e0:	f7ff f8cc 	bl	800827c <__s2b>
 80090e4:	9009      	str	r0, [sp, #36]	; 0x24
 80090e6:	2800      	cmp	r0, #0
 80090e8:	f43f af2a 	beq.w	8008f40 <_strtod_l+0x480>
 80090ec:	9a08      	ldr	r2, [sp, #32]
 80090ee:	9b05      	ldr	r3, [sp, #20]
 80090f0:	2a00      	cmp	r2, #0
 80090f2:	eba3 0307 	sub.w	r3, r3, r7
 80090f6:	bfa8      	it	ge
 80090f8:	2300      	movge	r3, #0
 80090fa:	930c      	str	r3, [sp, #48]	; 0x30
 80090fc:	2500      	movs	r5, #0
 80090fe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009102:	9312      	str	r3, [sp, #72]	; 0x48
 8009104:	46ab      	mov	fp, r5
 8009106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009108:	4620      	mov	r0, r4
 800910a:	6859      	ldr	r1, [r3, #4]
 800910c:	f7ff f80e 	bl	800812c <_Balloc>
 8009110:	9005      	str	r0, [sp, #20]
 8009112:	2800      	cmp	r0, #0
 8009114:	f43f af18 	beq.w	8008f48 <_strtod_l+0x488>
 8009118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800911a:	691a      	ldr	r2, [r3, #16]
 800911c:	3202      	adds	r2, #2
 800911e:	f103 010c 	add.w	r1, r3, #12
 8009122:	0092      	lsls	r2, r2, #2
 8009124:	300c      	adds	r0, #12
 8009126:	f7fe f872 	bl	800720e <memcpy>
 800912a:	ec49 8b10 	vmov	d0, r8, r9
 800912e:	aa18      	add	r2, sp, #96	; 0x60
 8009130:	a917      	add	r1, sp, #92	; 0x5c
 8009132:	4620      	mov	r0, r4
 8009134:	f7ff fbd6 	bl	80088e4 <__d2b>
 8009138:	ec49 8b18 	vmov	d8, r8, r9
 800913c:	9016      	str	r0, [sp, #88]	; 0x58
 800913e:	2800      	cmp	r0, #0
 8009140:	f43f af02 	beq.w	8008f48 <_strtod_l+0x488>
 8009144:	2101      	movs	r1, #1
 8009146:	4620      	mov	r0, r4
 8009148:	f7ff f930 	bl	80083ac <__i2b>
 800914c:	4683      	mov	fp, r0
 800914e:	2800      	cmp	r0, #0
 8009150:	f43f aefa 	beq.w	8008f48 <_strtod_l+0x488>
 8009154:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009156:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009158:	2e00      	cmp	r6, #0
 800915a:	bfab      	itete	ge
 800915c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800915e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8009160:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009162:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8009166:	bfac      	ite	ge
 8009168:	eb06 0a03 	addge.w	sl, r6, r3
 800916c:	1b9f      	sublt	r7, r3, r6
 800916e:	9b04      	ldr	r3, [sp, #16]
 8009170:	1af6      	subs	r6, r6, r3
 8009172:	4416      	add	r6, r2
 8009174:	4ba0      	ldr	r3, [pc, #640]	; (80093f8 <_strtod_l+0x938>)
 8009176:	3e01      	subs	r6, #1
 8009178:	429e      	cmp	r6, r3
 800917a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800917e:	f280 80c4 	bge.w	800930a <_strtod_l+0x84a>
 8009182:	1b9b      	subs	r3, r3, r6
 8009184:	2b1f      	cmp	r3, #31
 8009186:	eba2 0203 	sub.w	r2, r2, r3
 800918a:	f04f 0101 	mov.w	r1, #1
 800918e:	f300 80b0 	bgt.w	80092f2 <_strtod_l+0x832>
 8009192:	fa01 f303 	lsl.w	r3, r1, r3
 8009196:	930e      	str	r3, [sp, #56]	; 0x38
 8009198:	2300      	movs	r3, #0
 800919a:	930d      	str	r3, [sp, #52]	; 0x34
 800919c:	eb0a 0602 	add.w	r6, sl, r2
 80091a0:	9b04      	ldr	r3, [sp, #16]
 80091a2:	45b2      	cmp	sl, r6
 80091a4:	4417      	add	r7, r2
 80091a6:	441f      	add	r7, r3
 80091a8:	4653      	mov	r3, sl
 80091aa:	bfa8      	it	ge
 80091ac:	4633      	movge	r3, r6
 80091ae:	42bb      	cmp	r3, r7
 80091b0:	bfa8      	it	ge
 80091b2:	463b      	movge	r3, r7
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	bfc2      	ittt	gt
 80091b8:	1af6      	subgt	r6, r6, r3
 80091ba:	1aff      	subgt	r7, r7, r3
 80091bc:	ebaa 0a03 	subgt.w	sl, sl, r3
 80091c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	dd17      	ble.n	80091f6 <_strtod_l+0x736>
 80091c6:	4659      	mov	r1, fp
 80091c8:	461a      	mov	r2, r3
 80091ca:	4620      	mov	r0, r4
 80091cc:	f7ff f9ae 	bl	800852c <__pow5mult>
 80091d0:	4683      	mov	fp, r0
 80091d2:	2800      	cmp	r0, #0
 80091d4:	f43f aeb8 	beq.w	8008f48 <_strtod_l+0x488>
 80091d8:	4601      	mov	r1, r0
 80091da:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80091dc:	4620      	mov	r0, r4
 80091de:	f7ff f8fb 	bl	80083d8 <__multiply>
 80091e2:	900b      	str	r0, [sp, #44]	; 0x2c
 80091e4:	2800      	cmp	r0, #0
 80091e6:	f43f aeaf 	beq.w	8008f48 <_strtod_l+0x488>
 80091ea:	9916      	ldr	r1, [sp, #88]	; 0x58
 80091ec:	4620      	mov	r0, r4
 80091ee:	f7fe ffdd 	bl	80081ac <_Bfree>
 80091f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091f4:	9316      	str	r3, [sp, #88]	; 0x58
 80091f6:	2e00      	cmp	r6, #0
 80091f8:	f300 808c 	bgt.w	8009314 <_strtod_l+0x854>
 80091fc:	9b08      	ldr	r3, [sp, #32]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	dd08      	ble.n	8009214 <_strtod_l+0x754>
 8009202:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009204:	9905      	ldr	r1, [sp, #20]
 8009206:	4620      	mov	r0, r4
 8009208:	f7ff f990 	bl	800852c <__pow5mult>
 800920c:	9005      	str	r0, [sp, #20]
 800920e:	2800      	cmp	r0, #0
 8009210:	f43f ae9a 	beq.w	8008f48 <_strtod_l+0x488>
 8009214:	2f00      	cmp	r7, #0
 8009216:	dd08      	ble.n	800922a <_strtod_l+0x76a>
 8009218:	9905      	ldr	r1, [sp, #20]
 800921a:	463a      	mov	r2, r7
 800921c:	4620      	mov	r0, r4
 800921e:	f7ff f9df 	bl	80085e0 <__lshift>
 8009222:	9005      	str	r0, [sp, #20]
 8009224:	2800      	cmp	r0, #0
 8009226:	f43f ae8f 	beq.w	8008f48 <_strtod_l+0x488>
 800922a:	f1ba 0f00 	cmp.w	sl, #0
 800922e:	dd08      	ble.n	8009242 <_strtod_l+0x782>
 8009230:	4659      	mov	r1, fp
 8009232:	4652      	mov	r2, sl
 8009234:	4620      	mov	r0, r4
 8009236:	f7ff f9d3 	bl	80085e0 <__lshift>
 800923a:	4683      	mov	fp, r0
 800923c:	2800      	cmp	r0, #0
 800923e:	f43f ae83 	beq.w	8008f48 <_strtod_l+0x488>
 8009242:	9a05      	ldr	r2, [sp, #20]
 8009244:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009246:	4620      	mov	r0, r4
 8009248:	f7ff fa52 	bl	80086f0 <__mdiff>
 800924c:	4605      	mov	r5, r0
 800924e:	2800      	cmp	r0, #0
 8009250:	f43f ae7a 	beq.w	8008f48 <_strtod_l+0x488>
 8009254:	68c3      	ldr	r3, [r0, #12]
 8009256:	930b      	str	r3, [sp, #44]	; 0x2c
 8009258:	2300      	movs	r3, #0
 800925a:	60c3      	str	r3, [r0, #12]
 800925c:	4659      	mov	r1, fp
 800925e:	f7ff fa2b 	bl	80086b8 <__mcmp>
 8009262:	2800      	cmp	r0, #0
 8009264:	da60      	bge.n	8009328 <_strtod_l+0x868>
 8009266:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009268:	ea53 0308 	orrs.w	r3, r3, r8
 800926c:	f040 8084 	bne.w	8009378 <_strtod_l+0x8b8>
 8009270:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009274:	2b00      	cmp	r3, #0
 8009276:	d17f      	bne.n	8009378 <_strtod_l+0x8b8>
 8009278:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800927c:	0d1b      	lsrs	r3, r3, #20
 800927e:	051b      	lsls	r3, r3, #20
 8009280:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009284:	d978      	bls.n	8009378 <_strtod_l+0x8b8>
 8009286:	696b      	ldr	r3, [r5, #20]
 8009288:	b913      	cbnz	r3, 8009290 <_strtod_l+0x7d0>
 800928a:	692b      	ldr	r3, [r5, #16]
 800928c:	2b01      	cmp	r3, #1
 800928e:	dd73      	ble.n	8009378 <_strtod_l+0x8b8>
 8009290:	4629      	mov	r1, r5
 8009292:	2201      	movs	r2, #1
 8009294:	4620      	mov	r0, r4
 8009296:	f7ff f9a3 	bl	80085e0 <__lshift>
 800929a:	4659      	mov	r1, fp
 800929c:	4605      	mov	r5, r0
 800929e:	f7ff fa0b 	bl	80086b8 <__mcmp>
 80092a2:	2800      	cmp	r0, #0
 80092a4:	dd68      	ble.n	8009378 <_strtod_l+0x8b8>
 80092a6:	9904      	ldr	r1, [sp, #16]
 80092a8:	4a54      	ldr	r2, [pc, #336]	; (80093fc <_strtod_l+0x93c>)
 80092aa:	464b      	mov	r3, r9
 80092ac:	2900      	cmp	r1, #0
 80092ae:	f000 8084 	beq.w	80093ba <_strtod_l+0x8fa>
 80092b2:	ea02 0109 	and.w	r1, r2, r9
 80092b6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80092ba:	dc7e      	bgt.n	80093ba <_strtod_l+0x8fa>
 80092bc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80092c0:	f77f aeb3 	ble.w	800902a <_strtod_l+0x56a>
 80092c4:	4b4e      	ldr	r3, [pc, #312]	; (8009400 <_strtod_l+0x940>)
 80092c6:	4640      	mov	r0, r8
 80092c8:	4649      	mov	r1, r9
 80092ca:	2200      	movs	r2, #0
 80092cc:	f7f7 f994 	bl	80005f8 <__aeabi_dmul>
 80092d0:	4b4a      	ldr	r3, [pc, #296]	; (80093fc <_strtod_l+0x93c>)
 80092d2:	400b      	ands	r3, r1
 80092d4:	4680      	mov	r8, r0
 80092d6:	4689      	mov	r9, r1
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f47f ae3f 	bne.w	8008f5c <_strtod_l+0x49c>
 80092de:	2322      	movs	r3, #34	; 0x22
 80092e0:	6023      	str	r3, [r4, #0]
 80092e2:	e63b      	b.n	8008f5c <_strtod_l+0x49c>
 80092e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80092e8:	fa02 f303 	lsl.w	r3, r2, r3
 80092ec:	ea03 0808 	and.w	r8, r3, r8
 80092f0:	e6e8      	b.n	80090c4 <_strtod_l+0x604>
 80092f2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80092f6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80092fa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80092fe:	36e2      	adds	r6, #226	; 0xe2
 8009300:	fa01 f306 	lsl.w	r3, r1, r6
 8009304:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009308:	e748      	b.n	800919c <_strtod_l+0x6dc>
 800930a:	2100      	movs	r1, #0
 800930c:	2301      	movs	r3, #1
 800930e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8009312:	e743      	b.n	800919c <_strtod_l+0x6dc>
 8009314:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009316:	4632      	mov	r2, r6
 8009318:	4620      	mov	r0, r4
 800931a:	f7ff f961 	bl	80085e0 <__lshift>
 800931e:	9016      	str	r0, [sp, #88]	; 0x58
 8009320:	2800      	cmp	r0, #0
 8009322:	f47f af6b 	bne.w	80091fc <_strtod_l+0x73c>
 8009326:	e60f      	b.n	8008f48 <_strtod_l+0x488>
 8009328:	46ca      	mov	sl, r9
 800932a:	d171      	bne.n	8009410 <_strtod_l+0x950>
 800932c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800932e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009332:	b352      	cbz	r2, 800938a <_strtod_l+0x8ca>
 8009334:	4a33      	ldr	r2, [pc, #204]	; (8009404 <_strtod_l+0x944>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d12a      	bne.n	8009390 <_strtod_l+0x8d0>
 800933a:	9b04      	ldr	r3, [sp, #16]
 800933c:	4641      	mov	r1, r8
 800933e:	b1fb      	cbz	r3, 8009380 <_strtod_l+0x8c0>
 8009340:	4b2e      	ldr	r3, [pc, #184]	; (80093fc <_strtod_l+0x93c>)
 8009342:	ea09 0303 	and.w	r3, r9, r3
 8009346:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800934a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800934e:	d81a      	bhi.n	8009386 <_strtod_l+0x8c6>
 8009350:	0d1b      	lsrs	r3, r3, #20
 8009352:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009356:	fa02 f303 	lsl.w	r3, r2, r3
 800935a:	4299      	cmp	r1, r3
 800935c:	d118      	bne.n	8009390 <_strtod_l+0x8d0>
 800935e:	4b2a      	ldr	r3, [pc, #168]	; (8009408 <_strtod_l+0x948>)
 8009360:	459a      	cmp	sl, r3
 8009362:	d102      	bne.n	800936a <_strtod_l+0x8aa>
 8009364:	3101      	adds	r1, #1
 8009366:	f43f adef 	beq.w	8008f48 <_strtod_l+0x488>
 800936a:	4b24      	ldr	r3, [pc, #144]	; (80093fc <_strtod_l+0x93c>)
 800936c:	ea0a 0303 	and.w	r3, sl, r3
 8009370:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009374:	f04f 0800 	mov.w	r8, #0
 8009378:	9b04      	ldr	r3, [sp, #16]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d1a2      	bne.n	80092c4 <_strtod_l+0x804>
 800937e:	e5ed      	b.n	8008f5c <_strtod_l+0x49c>
 8009380:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009384:	e7e9      	b.n	800935a <_strtod_l+0x89a>
 8009386:	4613      	mov	r3, r2
 8009388:	e7e7      	b.n	800935a <_strtod_l+0x89a>
 800938a:	ea53 0308 	orrs.w	r3, r3, r8
 800938e:	d08a      	beq.n	80092a6 <_strtod_l+0x7e6>
 8009390:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009392:	b1e3      	cbz	r3, 80093ce <_strtod_l+0x90e>
 8009394:	ea13 0f0a 	tst.w	r3, sl
 8009398:	d0ee      	beq.n	8009378 <_strtod_l+0x8b8>
 800939a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800939c:	9a04      	ldr	r2, [sp, #16]
 800939e:	4640      	mov	r0, r8
 80093a0:	4649      	mov	r1, r9
 80093a2:	b1c3      	cbz	r3, 80093d6 <_strtod_l+0x916>
 80093a4:	f7ff fb6f 	bl	8008a86 <sulp>
 80093a8:	4602      	mov	r2, r0
 80093aa:	460b      	mov	r3, r1
 80093ac:	ec51 0b18 	vmov	r0, r1, d8
 80093b0:	f7f6 ff6c 	bl	800028c <__adddf3>
 80093b4:	4680      	mov	r8, r0
 80093b6:	4689      	mov	r9, r1
 80093b8:	e7de      	b.n	8009378 <_strtod_l+0x8b8>
 80093ba:	4013      	ands	r3, r2
 80093bc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80093c0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80093c4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80093c8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80093cc:	e7d4      	b.n	8009378 <_strtod_l+0x8b8>
 80093ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093d0:	ea13 0f08 	tst.w	r3, r8
 80093d4:	e7e0      	b.n	8009398 <_strtod_l+0x8d8>
 80093d6:	f7ff fb56 	bl	8008a86 <sulp>
 80093da:	4602      	mov	r2, r0
 80093dc:	460b      	mov	r3, r1
 80093de:	ec51 0b18 	vmov	r0, r1, d8
 80093e2:	f7f6 ff51 	bl	8000288 <__aeabi_dsub>
 80093e6:	2200      	movs	r2, #0
 80093e8:	2300      	movs	r3, #0
 80093ea:	4680      	mov	r8, r0
 80093ec:	4689      	mov	r9, r1
 80093ee:	f7f7 fb6b 	bl	8000ac8 <__aeabi_dcmpeq>
 80093f2:	2800      	cmp	r0, #0
 80093f4:	d0c0      	beq.n	8009378 <_strtod_l+0x8b8>
 80093f6:	e618      	b.n	800902a <_strtod_l+0x56a>
 80093f8:	fffffc02 	.word	0xfffffc02
 80093fc:	7ff00000 	.word	0x7ff00000
 8009400:	39500000 	.word	0x39500000
 8009404:	000fffff 	.word	0x000fffff
 8009408:	7fefffff 	.word	0x7fefffff
 800940c:	0800b130 	.word	0x0800b130
 8009410:	4659      	mov	r1, fp
 8009412:	4628      	mov	r0, r5
 8009414:	f7ff fac0 	bl	8008998 <__ratio>
 8009418:	ec57 6b10 	vmov	r6, r7, d0
 800941c:	ee10 0a10 	vmov	r0, s0
 8009420:	2200      	movs	r2, #0
 8009422:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009426:	4639      	mov	r1, r7
 8009428:	f7f7 fb62 	bl	8000af0 <__aeabi_dcmple>
 800942c:	2800      	cmp	r0, #0
 800942e:	d071      	beq.n	8009514 <_strtod_l+0xa54>
 8009430:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009432:	2b00      	cmp	r3, #0
 8009434:	d17c      	bne.n	8009530 <_strtod_l+0xa70>
 8009436:	f1b8 0f00 	cmp.w	r8, #0
 800943a:	d15a      	bne.n	80094f2 <_strtod_l+0xa32>
 800943c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009440:	2b00      	cmp	r3, #0
 8009442:	d15d      	bne.n	8009500 <_strtod_l+0xa40>
 8009444:	4b90      	ldr	r3, [pc, #576]	; (8009688 <_strtod_l+0xbc8>)
 8009446:	2200      	movs	r2, #0
 8009448:	4630      	mov	r0, r6
 800944a:	4639      	mov	r1, r7
 800944c:	f7f7 fb46 	bl	8000adc <__aeabi_dcmplt>
 8009450:	2800      	cmp	r0, #0
 8009452:	d15c      	bne.n	800950e <_strtod_l+0xa4e>
 8009454:	4630      	mov	r0, r6
 8009456:	4639      	mov	r1, r7
 8009458:	4b8c      	ldr	r3, [pc, #560]	; (800968c <_strtod_l+0xbcc>)
 800945a:	2200      	movs	r2, #0
 800945c:	f7f7 f8cc 	bl	80005f8 <__aeabi_dmul>
 8009460:	4606      	mov	r6, r0
 8009462:	460f      	mov	r7, r1
 8009464:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009468:	9606      	str	r6, [sp, #24]
 800946a:	9307      	str	r3, [sp, #28]
 800946c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009470:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009474:	4b86      	ldr	r3, [pc, #536]	; (8009690 <_strtod_l+0xbd0>)
 8009476:	ea0a 0303 	and.w	r3, sl, r3
 800947a:	930d      	str	r3, [sp, #52]	; 0x34
 800947c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800947e:	4b85      	ldr	r3, [pc, #532]	; (8009694 <_strtod_l+0xbd4>)
 8009480:	429a      	cmp	r2, r3
 8009482:	f040 8090 	bne.w	80095a6 <_strtod_l+0xae6>
 8009486:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800948a:	ec49 8b10 	vmov	d0, r8, r9
 800948e:	f7ff f9b9 	bl	8008804 <__ulp>
 8009492:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009496:	ec51 0b10 	vmov	r0, r1, d0
 800949a:	f7f7 f8ad 	bl	80005f8 <__aeabi_dmul>
 800949e:	4642      	mov	r2, r8
 80094a0:	464b      	mov	r3, r9
 80094a2:	f7f6 fef3 	bl	800028c <__adddf3>
 80094a6:	460b      	mov	r3, r1
 80094a8:	4979      	ldr	r1, [pc, #484]	; (8009690 <_strtod_l+0xbd0>)
 80094aa:	4a7b      	ldr	r2, [pc, #492]	; (8009698 <_strtod_l+0xbd8>)
 80094ac:	4019      	ands	r1, r3
 80094ae:	4291      	cmp	r1, r2
 80094b0:	4680      	mov	r8, r0
 80094b2:	d944      	bls.n	800953e <_strtod_l+0xa7e>
 80094b4:	ee18 2a90 	vmov	r2, s17
 80094b8:	4b78      	ldr	r3, [pc, #480]	; (800969c <_strtod_l+0xbdc>)
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d104      	bne.n	80094c8 <_strtod_l+0xa08>
 80094be:	ee18 3a10 	vmov	r3, s16
 80094c2:	3301      	adds	r3, #1
 80094c4:	f43f ad40 	beq.w	8008f48 <_strtod_l+0x488>
 80094c8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800969c <_strtod_l+0xbdc>
 80094cc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80094d0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80094d2:	4620      	mov	r0, r4
 80094d4:	f7fe fe6a 	bl	80081ac <_Bfree>
 80094d8:	9905      	ldr	r1, [sp, #20]
 80094da:	4620      	mov	r0, r4
 80094dc:	f7fe fe66 	bl	80081ac <_Bfree>
 80094e0:	4659      	mov	r1, fp
 80094e2:	4620      	mov	r0, r4
 80094e4:	f7fe fe62 	bl	80081ac <_Bfree>
 80094e8:	4629      	mov	r1, r5
 80094ea:	4620      	mov	r0, r4
 80094ec:	f7fe fe5e 	bl	80081ac <_Bfree>
 80094f0:	e609      	b.n	8009106 <_strtod_l+0x646>
 80094f2:	f1b8 0f01 	cmp.w	r8, #1
 80094f6:	d103      	bne.n	8009500 <_strtod_l+0xa40>
 80094f8:	f1b9 0f00 	cmp.w	r9, #0
 80094fc:	f43f ad95 	beq.w	800902a <_strtod_l+0x56a>
 8009500:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8009658 <_strtod_l+0xb98>
 8009504:	4f60      	ldr	r7, [pc, #384]	; (8009688 <_strtod_l+0xbc8>)
 8009506:	ed8d 7b06 	vstr	d7, [sp, #24]
 800950a:	2600      	movs	r6, #0
 800950c:	e7ae      	b.n	800946c <_strtod_l+0x9ac>
 800950e:	4f5f      	ldr	r7, [pc, #380]	; (800968c <_strtod_l+0xbcc>)
 8009510:	2600      	movs	r6, #0
 8009512:	e7a7      	b.n	8009464 <_strtod_l+0x9a4>
 8009514:	4b5d      	ldr	r3, [pc, #372]	; (800968c <_strtod_l+0xbcc>)
 8009516:	4630      	mov	r0, r6
 8009518:	4639      	mov	r1, r7
 800951a:	2200      	movs	r2, #0
 800951c:	f7f7 f86c 	bl	80005f8 <__aeabi_dmul>
 8009520:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009522:	4606      	mov	r6, r0
 8009524:	460f      	mov	r7, r1
 8009526:	2b00      	cmp	r3, #0
 8009528:	d09c      	beq.n	8009464 <_strtod_l+0x9a4>
 800952a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800952e:	e79d      	b.n	800946c <_strtod_l+0x9ac>
 8009530:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009660 <_strtod_l+0xba0>
 8009534:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009538:	ec57 6b17 	vmov	r6, r7, d7
 800953c:	e796      	b.n	800946c <_strtod_l+0x9ac>
 800953e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009542:	9b04      	ldr	r3, [sp, #16]
 8009544:	46ca      	mov	sl, r9
 8009546:	2b00      	cmp	r3, #0
 8009548:	d1c2      	bne.n	80094d0 <_strtod_l+0xa10>
 800954a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800954e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009550:	0d1b      	lsrs	r3, r3, #20
 8009552:	051b      	lsls	r3, r3, #20
 8009554:	429a      	cmp	r2, r3
 8009556:	d1bb      	bne.n	80094d0 <_strtod_l+0xa10>
 8009558:	4630      	mov	r0, r6
 800955a:	4639      	mov	r1, r7
 800955c:	f7f7 fbac 	bl	8000cb8 <__aeabi_d2lz>
 8009560:	f7f7 f81c 	bl	800059c <__aeabi_l2d>
 8009564:	4602      	mov	r2, r0
 8009566:	460b      	mov	r3, r1
 8009568:	4630      	mov	r0, r6
 800956a:	4639      	mov	r1, r7
 800956c:	f7f6 fe8c 	bl	8000288 <__aeabi_dsub>
 8009570:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009572:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009576:	ea43 0308 	orr.w	r3, r3, r8
 800957a:	4313      	orrs	r3, r2
 800957c:	4606      	mov	r6, r0
 800957e:	460f      	mov	r7, r1
 8009580:	d054      	beq.n	800962c <_strtod_l+0xb6c>
 8009582:	a339      	add	r3, pc, #228	; (adr r3, 8009668 <_strtod_l+0xba8>)
 8009584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009588:	f7f7 faa8 	bl	8000adc <__aeabi_dcmplt>
 800958c:	2800      	cmp	r0, #0
 800958e:	f47f ace5 	bne.w	8008f5c <_strtod_l+0x49c>
 8009592:	a337      	add	r3, pc, #220	; (adr r3, 8009670 <_strtod_l+0xbb0>)
 8009594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009598:	4630      	mov	r0, r6
 800959a:	4639      	mov	r1, r7
 800959c:	f7f7 fabc 	bl	8000b18 <__aeabi_dcmpgt>
 80095a0:	2800      	cmp	r0, #0
 80095a2:	d095      	beq.n	80094d0 <_strtod_l+0xa10>
 80095a4:	e4da      	b.n	8008f5c <_strtod_l+0x49c>
 80095a6:	9b04      	ldr	r3, [sp, #16]
 80095a8:	b333      	cbz	r3, 80095f8 <_strtod_l+0xb38>
 80095aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095ac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80095b0:	d822      	bhi.n	80095f8 <_strtod_l+0xb38>
 80095b2:	a331      	add	r3, pc, #196	; (adr r3, 8009678 <_strtod_l+0xbb8>)
 80095b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b8:	4630      	mov	r0, r6
 80095ba:	4639      	mov	r1, r7
 80095bc:	f7f7 fa98 	bl	8000af0 <__aeabi_dcmple>
 80095c0:	b1a0      	cbz	r0, 80095ec <_strtod_l+0xb2c>
 80095c2:	4639      	mov	r1, r7
 80095c4:	4630      	mov	r0, r6
 80095c6:	f7f7 faef 	bl	8000ba8 <__aeabi_d2uiz>
 80095ca:	2801      	cmp	r0, #1
 80095cc:	bf38      	it	cc
 80095ce:	2001      	movcc	r0, #1
 80095d0:	f7f6 ff98 	bl	8000504 <__aeabi_ui2d>
 80095d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095d6:	4606      	mov	r6, r0
 80095d8:	460f      	mov	r7, r1
 80095da:	bb23      	cbnz	r3, 8009626 <_strtod_l+0xb66>
 80095dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80095e0:	9010      	str	r0, [sp, #64]	; 0x40
 80095e2:	9311      	str	r3, [sp, #68]	; 0x44
 80095e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80095e8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80095ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095f0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80095f4:	1a9b      	subs	r3, r3, r2
 80095f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80095f8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80095fc:	eeb0 0a48 	vmov.f32	s0, s16
 8009600:	eef0 0a68 	vmov.f32	s1, s17
 8009604:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009608:	f7ff f8fc 	bl	8008804 <__ulp>
 800960c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009610:	ec53 2b10 	vmov	r2, r3, d0
 8009614:	f7f6 fff0 	bl	80005f8 <__aeabi_dmul>
 8009618:	ec53 2b18 	vmov	r2, r3, d8
 800961c:	f7f6 fe36 	bl	800028c <__adddf3>
 8009620:	4680      	mov	r8, r0
 8009622:	4689      	mov	r9, r1
 8009624:	e78d      	b.n	8009542 <_strtod_l+0xa82>
 8009626:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800962a:	e7db      	b.n	80095e4 <_strtod_l+0xb24>
 800962c:	a314      	add	r3, pc, #80	; (adr r3, 8009680 <_strtod_l+0xbc0>)
 800962e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009632:	f7f7 fa53 	bl	8000adc <__aeabi_dcmplt>
 8009636:	e7b3      	b.n	80095a0 <_strtod_l+0xae0>
 8009638:	2300      	movs	r3, #0
 800963a:	930a      	str	r3, [sp, #40]	; 0x28
 800963c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800963e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009640:	6013      	str	r3, [r2, #0]
 8009642:	f7ff ba7c 	b.w	8008b3e <_strtod_l+0x7e>
 8009646:	2a65      	cmp	r2, #101	; 0x65
 8009648:	f43f ab75 	beq.w	8008d36 <_strtod_l+0x276>
 800964c:	2a45      	cmp	r2, #69	; 0x45
 800964e:	f43f ab72 	beq.w	8008d36 <_strtod_l+0x276>
 8009652:	2301      	movs	r3, #1
 8009654:	f7ff bbaa 	b.w	8008dac <_strtod_l+0x2ec>
 8009658:	00000000 	.word	0x00000000
 800965c:	bff00000 	.word	0xbff00000
 8009660:	00000000 	.word	0x00000000
 8009664:	3ff00000 	.word	0x3ff00000
 8009668:	94a03595 	.word	0x94a03595
 800966c:	3fdfffff 	.word	0x3fdfffff
 8009670:	35afe535 	.word	0x35afe535
 8009674:	3fe00000 	.word	0x3fe00000
 8009678:	ffc00000 	.word	0xffc00000
 800967c:	41dfffff 	.word	0x41dfffff
 8009680:	94a03595 	.word	0x94a03595
 8009684:	3fcfffff 	.word	0x3fcfffff
 8009688:	3ff00000 	.word	0x3ff00000
 800968c:	3fe00000 	.word	0x3fe00000
 8009690:	7ff00000 	.word	0x7ff00000
 8009694:	7fe00000 	.word	0x7fe00000
 8009698:	7c9fffff 	.word	0x7c9fffff
 800969c:	7fefffff 	.word	0x7fefffff

080096a0 <_strtod_r>:
 80096a0:	4b01      	ldr	r3, [pc, #4]	; (80096a8 <_strtod_r+0x8>)
 80096a2:	f7ff ba0d 	b.w	8008ac0 <_strtod_l>
 80096a6:	bf00      	nop
 80096a8:	2000008c 	.word	0x2000008c

080096ac <_strtol_l.constprop.0>:
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096b2:	d001      	beq.n	80096b8 <_strtol_l.constprop.0+0xc>
 80096b4:	2b24      	cmp	r3, #36	; 0x24
 80096b6:	d906      	bls.n	80096c6 <_strtol_l.constprop.0+0x1a>
 80096b8:	f7fd fd7c 	bl	80071b4 <__errno>
 80096bc:	2316      	movs	r3, #22
 80096be:	6003      	str	r3, [r0, #0]
 80096c0:	2000      	movs	r0, #0
 80096c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096c6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80097ac <_strtol_l.constprop.0+0x100>
 80096ca:	460d      	mov	r5, r1
 80096cc:	462e      	mov	r6, r5
 80096ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096d2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80096d6:	f017 0708 	ands.w	r7, r7, #8
 80096da:	d1f7      	bne.n	80096cc <_strtol_l.constprop.0+0x20>
 80096dc:	2c2d      	cmp	r4, #45	; 0x2d
 80096de:	d132      	bne.n	8009746 <_strtol_l.constprop.0+0x9a>
 80096e0:	782c      	ldrb	r4, [r5, #0]
 80096e2:	2701      	movs	r7, #1
 80096e4:	1cb5      	adds	r5, r6, #2
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d05b      	beq.n	80097a2 <_strtol_l.constprop.0+0xf6>
 80096ea:	2b10      	cmp	r3, #16
 80096ec:	d109      	bne.n	8009702 <_strtol_l.constprop.0+0x56>
 80096ee:	2c30      	cmp	r4, #48	; 0x30
 80096f0:	d107      	bne.n	8009702 <_strtol_l.constprop.0+0x56>
 80096f2:	782c      	ldrb	r4, [r5, #0]
 80096f4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80096f8:	2c58      	cmp	r4, #88	; 0x58
 80096fa:	d14d      	bne.n	8009798 <_strtol_l.constprop.0+0xec>
 80096fc:	786c      	ldrb	r4, [r5, #1]
 80096fe:	2310      	movs	r3, #16
 8009700:	3502      	adds	r5, #2
 8009702:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009706:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800970a:	f04f 0e00 	mov.w	lr, #0
 800970e:	fbb8 f9f3 	udiv	r9, r8, r3
 8009712:	4676      	mov	r6, lr
 8009714:	fb03 8a19 	mls	sl, r3, r9, r8
 8009718:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800971c:	f1bc 0f09 	cmp.w	ip, #9
 8009720:	d816      	bhi.n	8009750 <_strtol_l.constprop.0+0xa4>
 8009722:	4664      	mov	r4, ip
 8009724:	42a3      	cmp	r3, r4
 8009726:	dd24      	ble.n	8009772 <_strtol_l.constprop.0+0xc6>
 8009728:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800972c:	d008      	beq.n	8009740 <_strtol_l.constprop.0+0x94>
 800972e:	45b1      	cmp	r9, r6
 8009730:	d31c      	bcc.n	800976c <_strtol_l.constprop.0+0xc0>
 8009732:	d101      	bne.n	8009738 <_strtol_l.constprop.0+0x8c>
 8009734:	45a2      	cmp	sl, r4
 8009736:	db19      	blt.n	800976c <_strtol_l.constprop.0+0xc0>
 8009738:	fb06 4603 	mla	r6, r6, r3, r4
 800973c:	f04f 0e01 	mov.w	lr, #1
 8009740:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009744:	e7e8      	b.n	8009718 <_strtol_l.constprop.0+0x6c>
 8009746:	2c2b      	cmp	r4, #43	; 0x2b
 8009748:	bf04      	itt	eq
 800974a:	782c      	ldrbeq	r4, [r5, #0]
 800974c:	1cb5      	addeq	r5, r6, #2
 800974e:	e7ca      	b.n	80096e6 <_strtol_l.constprop.0+0x3a>
 8009750:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009754:	f1bc 0f19 	cmp.w	ip, #25
 8009758:	d801      	bhi.n	800975e <_strtol_l.constprop.0+0xb2>
 800975a:	3c37      	subs	r4, #55	; 0x37
 800975c:	e7e2      	b.n	8009724 <_strtol_l.constprop.0+0x78>
 800975e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009762:	f1bc 0f19 	cmp.w	ip, #25
 8009766:	d804      	bhi.n	8009772 <_strtol_l.constprop.0+0xc6>
 8009768:	3c57      	subs	r4, #87	; 0x57
 800976a:	e7db      	b.n	8009724 <_strtol_l.constprop.0+0x78>
 800976c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8009770:	e7e6      	b.n	8009740 <_strtol_l.constprop.0+0x94>
 8009772:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8009776:	d105      	bne.n	8009784 <_strtol_l.constprop.0+0xd8>
 8009778:	2322      	movs	r3, #34	; 0x22
 800977a:	6003      	str	r3, [r0, #0]
 800977c:	4646      	mov	r6, r8
 800977e:	b942      	cbnz	r2, 8009792 <_strtol_l.constprop.0+0xe6>
 8009780:	4630      	mov	r0, r6
 8009782:	e79e      	b.n	80096c2 <_strtol_l.constprop.0+0x16>
 8009784:	b107      	cbz	r7, 8009788 <_strtol_l.constprop.0+0xdc>
 8009786:	4276      	negs	r6, r6
 8009788:	2a00      	cmp	r2, #0
 800978a:	d0f9      	beq.n	8009780 <_strtol_l.constprop.0+0xd4>
 800978c:	f1be 0f00 	cmp.w	lr, #0
 8009790:	d000      	beq.n	8009794 <_strtol_l.constprop.0+0xe8>
 8009792:	1e69      	subs	r1, r5, #1
 8009794:	6011      	str	r1, [r2, #0]
 8009796:	e7f3      	b.n	8009780 <_strtol_l.constprop.0+0xd4>
 8009798:	2430      	movs	r4, #48	; 0x30
 800979a:	2b00      	cmp	r3, #0
 800979c:	d1b1      	bne.n	8009702 <_strtol_l.constprop.0+0x56>
 800979e:	2308      	movs	r3, #8
 80097a0:	e7af      	b.n	8009702 <_strtol_l.constprop.0+0x56>
 80097a2:	2c30      	cmp	r4, #48	; 0x30
 80097a4:	d0a5      	beq.n	80096f2 <_strtol_l.constprop.0+0x46>
 80097a6:	230a      	movs	r3, #10
 80097a8:	e7ab      	b.n	8009702 <_strtol_l.constprop.0+0x56>
 80097aa:	bf00      	nop
 80097ac:	0800b159 	.word	0x0800b159

080097b0 <_strtol_r>:
 80097b0:	f7ff bf7c 	b.w	80096ac <_strtol_l.constprop.0>

080097b4 <__ssputs_r>:
 80097b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097b8:	688e      	ldr	r6, [r1, #8]
 80097ba:	461f      	mov	r7, r3
 80097bc:	42be      	cmp	r6, r7
 80097be:	680b      	ldr	r3, [r1, #0]
 80097c0:	4682      	mov	sl, r0
 80097c2:	460c      	mov	r4, r1
 80097c4:	4690      	mov	r8, r2
 80097c6:	d82c      	bhi.n	8009822 <__ssputs_r+0x6e>
 80097c8:	898a      	ldrh	r2, [r1, #12]
 80097ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80097ce:	d026      	beq.n	800981e <__ssputs_r+0x6a>
 80097d0:	6965      	ldr	r5, [r4, #20]
 80097d2:	6909      	ldr	r1, [r1, #16]
 80097d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097d8:	eba3 0901 	sub.w	r9, r3, r1
 80097dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80097e0:	1c7b      	adds	r3, r7, #1
 80097e2:	444b      	add	r3, r9
 80097e4:	106d      	asrs	r5, r5, #1
 80097e6:	429d      	cmp	r5, r3
 80097e8:	bf38      	it	cc
 80097ea:	461d      	movcc	r5, r3
 80097ec:	0553      	lsls	r3, r2, #21
 80097ee:	d527      	bpl.n	8009840 <__ssputs_r+0x8c>
 80097f0:	4629      	mov	r1, r5
 80097f2:	f7fe fc0f 	bl	8008014 <_malloc_r>
 80097f6:	4606      	mov	r6, r0
 80097f8:	b360      	cbz	r0, 8009854 <__ssputs_r+0xa0>
 80097fa:	6921      	ldr	r1, [r4, #16]
 80097fc:	464a      	mov	r2, r9
 80097fe:	f7fd fd06 	bl	800720e <memcpy>
 8009802:	89a3      	ldrh	r3, [r4, #12]
 8009804:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800980c:	81a3      	strh	r3, [r4, #12]
 800980e:	6126      	str	r6, [r4, #16]
 8009810:	6165      	str	r5, [r4, #20]
 8009812:	444e      	add	r6, r9
 8009814:	eba5 0509 	sub.w	r5, r5, r9
 8009818:	6026      	str	r6, [r4, #0]
 800981a:	60a5      	str	r5, [r4, #8]
 800981c:	463e      	mov	r6, r7
 800981e:	42be      	cmp	r6, r7
 8009820:	d900      	bls.n	8009824 <__ssputs_r+0x70>
 8009822:	463e      	mov	r6, r7
 8009824:	6820      	ldr	r0, [r4, #0]
 8009826:	4632      	mov	r2, r6
 8009828:	4641      	mov	r1, r8
 800982a:	f000 f9c9 	bl	8009bc0 <memmove>
 800982e:	68a3      	ldr	r3, [r4, #8]
 8009830:	1b9b      	subs	r3, r3, r6
 8009832:	60a3      	str	r3, [r4, #8]
 8009834:	6823      	ldr	r3, [r4, #0]
 8009836:	4433      	add	r3, r6
 8009838:	6023      	str	r3, [r4, #0]
 800983a:	2000      	movs	r0, #0
 800983c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009840:	462a      	mov	r2, r5
 8009842:	f000 fd9e 	bl	800a382 <_realloc_r>
 8009846:	4606      	mov	r6, r0
 8009848:	2800      	cmp	r0, #0
 800984a:	d1e0      	bne.n	800980e <__ssputs_r+0x5a>
 800984c:	6921      	ldr	r1, [r4, #16]
 800984e:	4650      	mov	r0, sl
 8009850:	f7fe fb6c 	bl	8007f2c <_free_r>
 8009854:	230c      	movs	r3, #12
 8009856:	f8ca 3000 	str.w	r3, [sl]
 800985a:	89a3      	ldrh	r3, [r4, #12]
 800985c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009860:	81a3      	strh	r3, [r4, #12]
 8009862:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009866:	e7e9      	b.n	800983c <__ssputs_r+0x88>

08009868 <_svfiprintf_r>:
 8009868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800986c:	4698      	mov	r8, r3
 800986e:	898b      	ldrh	r3, [r1, #12]
 8009870:	061b      	lsls	r3, r3, #24
 8009872:	b09d      	sub	sp, #116	; 0x74
 8009874:	4607      	mov	r7, r0
 8009876:	460d      	mov	r5, r1
 8009878:	4614      	mov	r4, r2
 800987a:	d50e      	bpl.n	800989a <_svfiprintf_r+0x32>
 800987c:	690b      	ldr	r3, [r1, #16]
 800987e:	b963      	cbnz	r3, 800989a <_svfiprintf_r+0x32>
 8009880:	2140      	movs	r1, #64	; 0x40
 8009882:	f7fe fbc7 	bl	8008014 <_malloc_r>
 8009886:	6028      	str	r0, [r5, #0]
 8009888:	6128      	str	r0, [r5, #16]
 800988a:	b920      	cbnz	r0, 8009896 <_svfiprintf_r+0x2e>
 800988c:	230c      	movs	r3, #12
 800988e:	603b      	str	r3, [r7, #0]
 8009890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009894:	e0d0      	b.n	8009a38 <_svfiprintf_r+0x1d0>
 8009896:	2340      	movs	r3, #64	; 0x40
 8009898:	616b      	str	r3, [r5, #20]
 800989a:	2300      	movs	r3, #0
 800989c:	9309      	str	r3, [sp, #36]	; 0x24
 800989e:	2320      	movs	r3, #32
 80098a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80098a8:	2330      	movs	r3, #48	; 0x30
 80098aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009a50 <_svfiprintf_r+0x1e8>
 80098ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098b2:	f04f 0901 	mov.w	r9, #1
 80098b6:	4623      	mov	r3, r4
 80098b8:	469a      	mov	sl, r3
 80098ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098be:	b10a      	cbz	r2, 80098c4 <_svfiprintf_r+0x5c>
 80098c0:	2a25      	cmp	r2, #37	; 0x25
 80098c2:	d1f9      	bne.n	80098b8 <_svfiprintf_r+0x50>
 80098c4:	ebba 0b04 	subs.w	fp, sl, r4
 80098c8:	d00b      	beq.n	80098e2 <_svfiprintf_r+0x7a>
 80098ca:	465b      	mov	r3, fp
 80098cc:	4622      	mov	r2, r4
 80098ce:	4629      	mov	r1, r5
 80098d0:	4638      	mov	r0, r7
 80098d2:	f7ff ff6f 	bl	80097b4 <__ssputs_r>
 80098d6:	3001      	adds	r0, #1
 80098d8:	f000 80a9 	beq.w	8009a2e <_svfiprintf_r+0x1c6>
 80098dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098de:	445a      	add	r2, fp
 80098e0:	9209      	str	r2, [sp, #36]	; 0x24
 80098e2:	f89a 3000 	ldrb.w	r3, [sl]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	f000 80a1 	beq.w	8009a2e <_svfiprintf_r+0x1c6>
 80098ec:	2300      	movs	r3, #0
 80098ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80098f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098f6:	f10a 0a01 	add.w	sl, sl, #1
 80098fa:	9304      	str	r3, [sp, #16]
 80098fc:	9307      	str	r3, [sp, #28]
 80098fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009902:	931a      	str	r3, [sp, #104]	; 0x68
 8009904:	4654      	mov	r4, sl
 8009906:	2205      	movs	r2, #5
 8009908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800990c:	4850      	ldr	r0, [pc, #320]	; (8009a50 <_svfiprintf_r+0x1e8>)
 800990e:	f7f6 fc5f 	bl	80001d0 <memchr>
 8009912:	9a04      	ldr	r2, [sp, #16]
 8009914:	b9d8      	cbnz	r0, 800994e <_svfiprintf_r+0xe6>
 8009916:	06d0      	lsls	r0, r2, #27
 8009918:	bf44      	itt	mi
 800991a:	2320      	movmi	r3, #32
 800991c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009920:	0711      	lsls	r1, r2, #28
 8009922:	bf44      	itt	mi
 8009924:	232b      	movmi	r3, #43	; 0x2b
 8009926:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800992a:	f89a 3000 	ldrb.w	r3, [sl]
 800992e:	2b2a      	cmp	r3, #42	; 0x2a
 8009930:	d015      	beq.n	800995e <_svfiprintf_r+0xf6>
 8009932:	9a07      	ldr	r2, [sp, #28]
 8009934:	4654      	mov	r4, sl
 8009936:	2000      	movs	r0, #0
 8009938:	f04f 0c0a 	mov.w	ip, #10
 800993c:	4621      	mov	r1, r4
 800993e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009942:	3b30      	subs	r3, #48	; 0x30
 8009944:	2b09      	cmp	r3, #9
 8009946:	d94d      	bls.n	80099e4 <_svfiprintf_r+0x17c>
 8009948:	b1b0      	cbz	r0, 8009978 <_svfiprintf_r+0x110>
 800994a:	9207      	str	r2, [sp, #28]
 800994c:	e014      	b.n	8009978 <_svfiprintf_r+0x110>
 800994e:	eba0 0308 	sub.w	r3, r0, r8
 8009952:	fa09 f303 	lsl.w	r3, r9, r3
 8009956:	4313      	orrs	r3, r2
 8009958:	9304      	str	r3, [sp, #16]
 800995a:	46a2      	mov	sl, r4
 800995c:	e7d2      	b.n	8009904 <_svfiprintf_r+0x9c>
 800995e:	9b03      	ldr	r3, [sp, #12]
 8009960:	1d19      	adds	r1, r3, #4
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	9103      	str	r1, [sp, #12]
 8009966:	2b00      	cmp	r3, #0
 8009968:	bfbb      	ittet	lt
 800996a:	425b      	neglt	r3, r3
 800996c:	f042 0202 	orrlt.w	r2, r2, #2
 8009970:	9307      	strge	r3, [sp, #28]
 8009972:	9307      	strlt	r3, [sp, #28]
 8009974:	bfb8      	it	lt
 8009976:	9204      	strlt	r2, [sp, #16]
 8009978:	7823      	ldrb	r3, [r4, #0]
 800997a:	2b2e      	cmp	r3, #46	; 0x2e
 800997c:	d10c      	bne.n	8009998 <_svfiprintf_r+0x130>
 800997e:	7863      	ldrb	r3, [r4, #1]
 8009980:	2b2a      	cmp	r3, #42	; 0x2a
 8009982:	d134      	bne.n	80099ee <_svfiprintf_r+0x186>
 8009984:	9b03      	ldr	r3, [sp, #12]
 8009986:	1d1a      	adds	r2, r3, #4
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	9203      	str	r2, [sp, #12]
 800998c:	2b00      	cmp	r3, #0
 800998e:	bfb8      	it	lt
 8009990:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009994:	3402      	adds	r4, #2
 8009996:	9305      	str	r3, [sp, #20]
 8009998:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009a60 <_svfiprintf_r+0x1f8>
 800999c:	7821      	ldrb	r1, [r4, #0]
 800999e:	2203      	movs	r2, #3
 80099a0:	4650      	mov	r0, sl
 80099a2:	f7f6 fc15 	bl	80001d0 <memchr>
 80099a6:	b138      	cbz	r0, 80099b8 <_svfiprintf_r+0x150>
 80099a8:	9b04      	ldr	r3, [sp, #16]
 80099aa:	eba0 000a 	sub.w	r0, r0, sl
 80099ae:	2240      	movs	r2, #64	; 0x40
 80099b0:	4082      	lsls	r2, r0
 80099b2:	4313      	orrs	r3, r2
 80099b4:	3401      	adds	r4, #1
 80099b6:	9304      	str	r3, [sp, #16]
 80099b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099bc:	4825      	ldr	r0, [pc, #148]	; (8009a54 <_svfiprintf_r+0x1ec>)
 80099be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80099c2:	2206      	movs	r2, #6
 80099c4:	f7f6 fc04 	bl	80001d0 <memchr>
 80099c8:	2800      	cmp	r0, #0
 80099ca:	d038      	beq.n	8009a3e <_svfiprintf_r+0x1d6>
 80099cc:	4b22      	ldr	r3, [pc, #136]	; (8009a58 <_svfiprintf_r+0x1f0>)
 80099ce:	bb1b      	cbnz	r3, 8009a18 <_svfiprintf_r+0x1b0>
 80099d0:	9b03      	ldr	r3, [sp, #12]
 80099d2:	3307      	adds	r3, #7
 80099d4:	f023 0307 	bic.w	r3, r3, #7
 80099d8:	3308      	adds	r3, #8
 80099da:	9303      	str	r3, [sp, #12]
 80099dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099de:	4433      	add	r3, r6
 80099e0:	9309      	str	r3, [sp, #36]	; 0x24
 80099e2:	e768      	b.n	80098b6 <_svfiprintf_r+0x4e>
 80099e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80099e8:	460c      	mov	r4, r1
 80099ea:	2001      	movs	r0, #1
 80099ec:	e7a6      	b.n	800993c <_svfiprintf_r+0xd4>
 80099ee:	2300      	movs	r3, #0
 80099f0:	3401      	adds	r4, #1
 80099f2:	9305      	str	r3, [sp, #20]
 80099f4:	4619      	mov	r1, r3
 80099f6:	f04f 0c0a 	mov.w	ip, #10
 80099fa:	4620      	mov	r0, r4
 80099fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a00:	3a30      	subs	r2, #48	; 0x30
 8009a02:	2a09      	cmp	r2, #9
 8009a04:	d903      	bls.n	8009a0e <_svfiprintf_r+0x1a6>
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d0c6      	beq.n	8009998 <_svfiprintf_r+0x130>
 8009a0a:	9105      	str	r1, [sp, #20]
 8009a0c:	e7c4      	b.n	8009998 <_svfiprintf_r+0x130>
 8009a0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a12:	4604      	mov	r4, r0
 8009a14:	2301      	movs	r3, #1
 8009a16:	e7f0      	b.n	80099fa <_svfiprintf_r+0x192>
 8009a18:	ab03      	add	r3, sp, #12
 8009a1a:	9300      	str	r3, [sp, #0]
 8009a1c:	462a      	mov	r2, r5
 8009a1e:	4b0f      	ldr	r3, [pc, #60]	; (8009a5c <_svfiprintf_r+0x1f4>)
 8009a20:	a904      	add	r1, sp, #16
 8009a22:	4638      	mov	r0, r7
 8009a24:	f7fc fc22 	bl	800626c <_printf_float>
 8009a28:	1c42      	adds	r2, r0, #1
 8009a2a:	4606      	mov	r6, r0
 8009a2c:	d1d6      	bne.n	80099dc <_svfiprintf_r+0x174>
 8009a2e:	89ab      	ldrh	r3, [r5, #12]
 8009a30:	065b      	lsls	r3, r3, #25
 8009a32:	f53f af2d 	bmi.w	8009890 <_svfiprintf_r+0x28>
 8009a36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a38:	b01d      	add	sp, #116	; 0x74
 8009a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a3e:	ab03      	add	r3, sp, #12
 8009a40:	9300      	str	r3, [sp, #0]
 8009a42:	462a      	mov	r2, r5
 8009a44:	4b05      	ldr	r3, [pc, #20]	; (8009a5c <_svfiprintf_r+0x1f4>)
 8009a46:	a904      	add	r1, sp, #16
 8009a48:	4638      	mov	r0, r7
 8009a4a:	f7fc feb3 	bl	80067b4 <_printf_i>
 8009a4e:	e7eb      	b.n	8009a28 <_svfiprintf_r+0x1c0>
 8009a50:	0800b259 	.word	0x0800b259
 8009a54:	0800b263 	.word	0x0800b263
 8009a58:	0800626d 	.word	0x0800626d
 8009a5c:	080097b5 	.word	0x080097b5
 8009a60:	0800b25f 	.word	0x0800b25f

08009a64 <__sflush_r>:
 8009a64:	898a      	ldrh	r2, [r1, #12]
 8009a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a6a:	4605      	mov	r5, r0
 8009a6c:	0710      	lsls	r0, r2, #28
 8009a6e:	460c      	mov	r4, r1
 8009a70:	d458      	bmi.n	8009b24 <__sflush_r+0xc0>
 8009a72:	684b      	ldr	r3, [r1, #4]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	dc05      	bgt.n	8009a84 <__sflush_r+0x20>
 8009a78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	dc02      	bgt.n	8009a84 <__sflush_r+0x20>
 8009a7e:	2000      	movs	r0, #0
 8009a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a86:	2e00      	cmp	r6, #0
 8009a88:	d0f9      	beq.n	8009a7e <__sflush_r+0x1a>
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009a90:	682f      	ldr	r7, [r5, #0]
 8009a92:	6a21      	ldr	r1, [r4, #32]
 8009a94:	602b      	str	r3, [r5, #0]
 8009a96:	d032      	beq.n	8009afe <__sflush_r+0x9a>
 8009a98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a9a:	89a3      	ldrh	r3, [r4, #12]
 8009a9c:	075a      	lsls	r2, r3, #29
 8009a9e:	d505      	bpl.n	8009aac <__sflush_r+0x48>
 8009aa0:	6863      	ldr	r3, [r4, #4]
 8009aa2:	1ac0      	subs	r0, r0, r3
 8009aa4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009aa6:	b10b      	cbz	r3, 8009aac <__sflush_r+0x48>
 8009aa8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009aaa:	1ac0      	subs	r0, r0, r3
 8009aac:	2300      	movs	r3, #0
 8009aae:	4602      	mov	r2, r0
 8009ab0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ab2:	6a21      	ldr	r1, [r4, #32]
 8009ab4:	4628      	mov	r0, r5
 8009ab6:	47b0      	blx	r6
 8009ab8:	1c43      	adds	r3, r0, #1
 8009aba:	89a3      	ldrh	r3, [r4, #12]
 8009abc:	d106      	bne.n	8009acc <__sflush_r+0x68>
 8009abe:	6829      	ldr	r1, [r5, #0]
 8009ac0:	291d      	cmp	r1, #29
 8009ac2:	d82b      	bhi.n	8009b1c <__sflush_r+0xb8>
 8009ac4:	4a29      	ldr	r2, [pc, #164]	; (8009b6c <__sflush_r+0x108>)
 8009ac6:	410a      	asrs	r2, r1
 8009ac8:	07d6      	lsls	r6, r2, #31
 8009aca:	d427      	bmi.n	8009b1c <__sflush_r+0xb8>
 8009acc:	2200      	movs	r2, #0
 8009ace:	6062      	str	r2, [r4, #4]
 8009ad0:	04d9      	lsls	r1, r3, #19
 8009ad2:	6922      	ldr	r2, [r4, #16]
 8009ad4:	6022      	str	r2, [r4, #0]
 8009ad6:	d504      	bpl.n	8009ae2 <__sflush_r+0x7e>
 8009ad8:	1c42      	adds	r2, r0, #1
 8009ada:	d101      	bne.n	8009ae0 <__sflush_r+0x7c>
 8009adc:	682b      	ldr	r3, [r5, #0]
 8009ade:	b903      	cbnz	r3, 8009ae2 <__sflush_r+0x7e>
 8009ae0:	6560      	str	r0, [r4, #84]	; 0x54
 8009ae2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ae4:	602f      	str	r7, [r5, #0]
 8009ae6:	2900      	cmp	r1, #0
 8009ae8:	d0c9      	beq.n	8009a7e <__sflush_r+0x1a>
 8009aea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009aee:	4299      	cmp	r1, r3
 8009af0:	d002      	beq.n	8009af8 <__sflush_r+0x94>
 8009af2:	4628      	mov	r0, r5
 8009af4:	f7fe fa1a 	bl	8007f2c <_free_r>
 8009af8:	2000      	movs	r0, #0
 8009afa:	6360      	str	r0, [r4, #52]	; 0x34
 8009afc:	e7c0      	b.n	8009a80 <__sflush_r+0x1c>
 8009afe:	2301      	movs	r3, #1
 8009b00:	4628      	mov	r0, r5
 8009b02:	47b0      	blx	r6
 8009b04:	1c41      	adds	r1, r0, #1
 8009b06:	d1c8      	bne.n	8009a9a <__sflush_r+0x36>
 8009b08:	682b      	ldr	r3, [r5, #0]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d0c5      	beq.n	8009a9a <__sflush_r+0x36>
 8009b0e:	2b1d      	cmp	r3, #29
 8009b10:	d001      	beq.n	8009b16 <__sflush_r+0xb2>
 8009b12:	2b16      	cmp	r3, #22
 8009b14:	d101      	bne.n	8009b1a <__sflush_r+0xb6>
 8009b16:	602f      	str	r7, [r5, #0]
 8009b18:	e7b1      	b.n	8009a7e <__sflush_r+0x1a>
 8009b1a:	89a3      	ldrh	r3, [r4, #12]
 8009b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b20:	81a3      	strh	r3, [r4, #12]
 8009b22:	e7ad      	b.n	8009a80 <__sflush_r+0x1c>
 8009b24:	690f      	ldr	r7, [r1, #16]
 8009b26:	2f00      	cmp	r7, #0
 8009b28:	d0a9      	beq.n	8009a7e <__sflush_r+0x1a>
 8009b2a:	0793      	lsls	r3, r2, #30
 8009b2c:	680e      	ldr	r6, [r1, #0]
 8009b2e:	bf08      	it	eq
 8009b30:	694b      	ldreq	r3, [r1, #20]
 8009b32:	600f      	str	r7, [r1, #0]
 8009b34:	bf18      	it	ne
 8009b36:	2300      	movne	r3, #0
 8009b38:	eba6 0807 	sub.w	r8, r6, r7
 8009b3c:	608b      	str	r3, [r1, #8]
 8009b3e:	f1b8 0f00 	cmp.w	r8, #0
 8009b42:	dd9c      	ble.n	8009a7e <__sflush_r+0x1a>
 8009b44:	6a21      	ldr	r1, [r4, #32]
 8009b46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009b48:	4643      	mov	r3, r8
 8009b4a:	463a      	mov	r2, r7
 8009b4c:	4628      	mov	r0, r5
 8009b4e:	47b0      	blx	r6
 8009b50:	2800      	cmp	r0, #0
 8009b52:	dc06      	bgt.n	8009b62 <__sflush_r+0xfe>
 8009b54:	89a3      	ldrh	r3, [r4, #12]
 8009b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b5a:	81a3      	strh	r3, [r4, #12]
 8009b5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b60:	e78e      	b.n	8009a80 <__sflush_r+0x1c>
 8009b62:	4407      	add	r7, r0
 8009b64:	eba8 0800 	sub.w	r8, r8, r0
 8009b68:	e7e9      	b.n	8009b3e <__sflush_r+0xda>
 8009b6a:	bf00      	nop
 8009b6c:	dfbffffe 	.word	0xdfbffffe

08009b70 <_fflush_r>:
 8009b70:	b538      	push	{r3, r4, r5, lr}
 8009b72:	690b      	ldr	r3, [r1, #16]
 8009b74:	4605      	mov	r5, r0
 8009b76:	460c      	mov	r4, r1
 8009b78:	b913      	cbnz	r3, 8009b80 <_fflush_r+0x10>
 8009b7a:	2500      	movs	r5, #0
 8009b7c:	4628      	mov	r0, r5
 8009b7e:	bd38      	pop	{r3, r4, r5, pc}
 8009b80:	b118      	cbz	r0, 8009b8a <_fflush_r+0x1a>
 8009b82:	6a03      	ldr	r3, [r0, #32]
 8009b84:	b90b      	cbnz	r3, 8009b8a <_fflush_r+0x1a>
 8009b86:	f7fd f9d3 	bl	8006f30 <__sinit>
 8009b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d0f3      	beq.n	8009b7a <_fflush_r+0xa>
 8009b92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b94:	07d0      	lsls	r0, r2, #31
 8009b96:	d404      	bmi.n	8009ba2 <_fflush_r+0x32>
 8009b98:	0599      	lsls	r1, r3, #22
 8009b9a:	d402      	bmi.n	8009ba2 <_fflush_r+0x32>
 8009b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b9e:	f7fd fb34 	bl	800720a <__retarget_lock_acquire_recursive>
 8009ba2:	4628      	mov	r0, r5
 8009ba4:	4621      	mov	r1, r4
 8009ba6:	f7ff ff5d 	bl	8009a64 <__sflush_r>
 8009baa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bac:	07da      	lsls	r2, r3, #31
 8009bae:	4605      	mov	r5, r0
 8009bb0:	d4e4      	bmi.n	8009b7c <_fflush_r+0xc>
 8009bb2:	89a3      	ldrh	r3, [r4, #12]
 8009bb4:	059b      	lsls	r3, r3, #22
 8009bb6:	d4e1      	bmi.n	8009b7c <_fflush_r+0xc>
 8009bb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bba:	f7fd fb27 	bl	800720c <__retarget_lock_release_recursive>
 8009bbe:	e7dd      	b.n	8009b7c <_fflush_r+0xc>

08009bc0 <memmove>:
 8009bc0:	4288      	cmp	r0, r1
 8009bc2:	b510      	push	{r4, lr}
 8009bc4:	eb01 0402 	add.w	r4, r1, r2
 8009bc8:	d902      	bls.n	8009bd0 <memmove+0x10>
 8009bca:	4284      	cmp	r4, r0
 8009bcc:	4623      	mov	r3, r4
 8009bce:	d807      	bhi.n	8009be0 <memmove+0x20>
 8009bd0:	1e43      	subs	r3, r0, #1
 8009bd2:	42a1      	cmp	r1, r4
 8009bd4:	d008      	beq.n	8009be8 <memmove+0x28>
 8009bd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009bde:	e7f8      	b.n	8009bd2 <memmove+0x12>
 8009be0:	4402      	add	r2, r0
 8009be2:	4601      	mov	r1, r0
 8009be4:	428a      	cmp	r2, r1
 8009be6:	d100      	bne.n	8009bea <memmove+0x2a>
 8009be8:	bd10      	pop	{r4, pc}
 8009bea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009bee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009bf2:	e7f7      	b.n	8009be4 <memmove+0x24>

08009bf4 <strncmp>:
 8009bf4:	b510      	push	{r4, lr}
 8009bf6:	b16a      	cbz	r2, 8009c14 <strncmp+0x20>
 8009bf8:	3901      	subs	r1, #1
 8009bfa:	1884      	adds	r4, r0, r2
 8009bfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c00:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d103      	bne.n	8009c10 <strncmp+0x1c>
 8009c08:	42a0      	cmp	r0, r4
 8009c0a:	d001      	beq.n	8009c10 <strncmp+0x1c>
 8009c0c:	2a00      	cmp	r2, #0
 8009c0e:	d1f5      	bne.n	8009bfc <strncmp+0x8>
 8009c10:	1ad0      	subs	r0, r2, r3
 8009c12:	bd10      	pop	{r4, pc}
 8009c14:	4610      	mov	r0, r2
 8009c16:	e7fc      	b.n	8009c12 <strncmp+0x1e>

08009c18 <_sbrk_r>:
 8009c18:	b538      	push	{r3, r4, r5, lr}
 8009c1a:	4d06      	ldr	r5, [pc, #24]	; (8009c34 <_sbrk_r+0x1c>)
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	4604      	mov	r4, r0
 8009c20:	4608      	mov	r0, r1
 8009c22:	602b      	str	r3, [r5, #0]
 8009c24:	f7f8 fc52 	bl	80024cc <_sbrk>
 8009c28:	1c43      	adds	r3, r0, #1
 8009c2a:	d102      	bne.n	8009c32 <_sbrk_r+0x1a>
 8009c2c:	682b      	ldr	r3, [r5, #0]
 8009c2e:	b103      	cbz	r3, 8009c32 <_sbrk_r+0x1a>
 8009c30:	6023      	str	r3, [r4, #0]
 8009c32:	bd38      	pop	{r3, r4, r5, pc}
 8009c34:	20004698 	.word	0x20004698

08009c38 <nan>:
 8009c38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009c40 <nan+0x8>
 8009c3c:	4770      	bx	lr
 8009c3e:	bf00      	nop
 8009c40:	00000000 	.word	0x00000000
 8009c44:	7ff80000 	.word	0x7ff80000

08009c48 <__assert_func>:
 8009c48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c4a:	4614      	mov	r4, r2
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	4b09      	ldr	r3, [pc, #36]	; (8009c74 <__assert_func+0x2c>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4605      	mov	r5, r0
 8009c54:	68d8      	ldr	r0, [r3, #12]
 8009c56:	b14c      	cbz	r4, 8009c6c <__assert_func+0x24>
 8009c58:	4b07      	ldr	r3, [pc, #28]	; (8009c78 <__assert_func+0x30>)
 8009c5a:	9100      	str	r1, [sp, #0]
 8009c5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c60:	4906      	ldr	r1, [pc, #24]	; (8009c7c <__assert_func+0x34>)
 8009c62:	462b      	mov	r3, r5
 8009c64:	f000 fbca 	bl	800a3fc <fiprintf>
 8009c68:	f000 fbda 	bl	800a420 <abort>
 8009c6c:	4b04      	ldr	r3, [pc, #16]	; (8009c80 <__assert_func+0x38>)
 8009c6e:	461c      	mov	r4, r3
 8009c70:	e7f3      	b.n	8009c5a <__assert_func+0x12>
 8009c72:	bf00      	nop
 8009c74:	20000088 	.word	0x20000088
 8009c78:	0800b272 	.word	0x0800b272
 8009c7c:	0800b27f 	.word	0x0800b27f
 8009c80:	0800b2ad 	.word	0x0800b2ad

08009c84 <_calloc_r>:
 8009c84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c86:	fba1 2402 	umull	r2, r4, r1, r2
 8009c8a:	b94c      	cbnz	r4, 8009ca0 <_calloc_r+0x1c>
 8009c8c:	4611      	mov	r1, r2
 8009c8e:	9201      	str	r2, [sp, #4]
 8009c90:	f7fe f9c0 	bl	8008014 <_malloc_r>
 8009c94:	9a01      	ldr	r2, [sp, #4]
 8009c96:	4605      	mov	r5, r0
 8009c98:	b930      	cbnz	r0, 8009ca8 <_calloc_r+0x24>
 8009c9a:	4628      	mov	r0, r5
 8009c9c:	b003      	add	sp, #12
 8009c9e:	bd30      	pop	{r4, r5, pc}
 8009ca0:	220c      	movs	r2, #12
 8009ca2:	6002      	str	r2, [r0, #0]
 8009ca4:	2500      	movs	r5, #0
 8009ca6:	e7f8      	b.n	8009c9a <_calloc_r+0x16>
 8009ca8:	4621      	mov	r1, r4
 8009caa:	f7fd f9da 	bl	8007062 <memset>
 8009cae:	e7f4      	b.n	8009c9a <_calloc_r+0x16>

08009cb0 <rshift>:
 8009cb0:	6903      	ldr	r3, [r0, #16]
 8009cb2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009cb6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009cba:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009cbe:	f100 0414 	add.w	r4, r0, #20
 8009cc2:	dd45      	ble.n	8009d50 <rshift+0xa0>
 8009cc4:	f011 011f 	ands.w	r1, r1, #31
 8009cc8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009ccc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009cd0:	d10c      	bne.n	8009cec <rshift+0x3c>
 8009cd2:	f100 0710 	add.w	r7, r0, #16
 8009cd6:	4629      	mov	r1, r5
 8009cd8:	42b1      	cmp	r1, r6
 8009cda:	d334      	bcc.n	8009d46 <rshift+0x96>
 8009cdc:	1a9b      	subs	r3, r3, r2
 8009cde:	009b      	lsls	r3, r3, #2
 8009ce0:	1eea      	subs	r2, r5, #3
 8009ce2:	4296      	cmp	r6, r2
 8009ce4:	bf38      	it	cc
 8009ce6:	2300      	movcc	r3, #0
 8009ce8:	4423      	add	r3, r4
 8009cea:	e015      	b.n	8009d18 <rshift+0x68>
 8009cec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009cf0:	f1c1 0820 	rsb	r8, r1, #32
 8009cf4:	40cf      	lsrs	r7, r1
 8009cf6:	f105 0e04 	add.w	lr, r5, #4
 8009cfa:	46a1      	mov	r9, r4
 8009cfc:	4576      	cmp	r6, lr
 8009cfe:	46f4      	mov	ip, lr
 8009d00:	d815      	bhi.n	8009d2e <rshift+0x7e>
 8009d02:	1a9a      	subs	r2, r3, r2
 8009d04:	0092      	lsls	r2, r2, #2
 8009d06:	3a04      	subs	r2, #4
 8009d08:	3501      	adds	r5, #1
 8009d0a:	42ae      	cmp	r6, r5
 8009d0c:	bf38      	it	cc
 8009d0e:	2200      	movcc	r2, #0
 8009d10:	18a3      	adds	r3, r4, r2
 8009d12:	50a7      	str	r7, [r4, r2]
 8009d14:	b107      	cbz	r7, 8009d18 <rshift+0x68>
 8009d16:	3304      	adds	r3, #4
 8009d18:	1b1a      	subs	r2, r3, r4
 8009d1a:	42a3      	cmp	r3, r4
 8009d1c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009d20:	bf08      	it	eq
 8009d22:	2300      	moveq	r3, #0
 8009d24:	6102      	str	r2, [r0, #16]
 8009d26:	bf08      	it	eq
 8009d28:	6143      	streq	r3, [r0, #20]
 8009d2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d2e:	f8dc c000 	ldr.w	ip, [ip]
 8009d32:	fa0c fc08 	lsl.w	ip, ip, r8
 8009d36:	ea4c 0707 	orr.w	r7, ip, r7
 8009d3a:	f849 7b04 	str.w	r7, [r9], #4
 8009d3e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009d42:	40cf      	lsrs	r7, r1
 8009d44:	e7da      	b.n	8009cfc <rshift+0x4c>
 8009d46:	f851 cb04 	ldr.w	ip, [r1], #4
 8009d4a:	f847 cf04 	str.w	ip, [r7, #4]!
 8009d4e:	e7c3      	b.n	8009cd8 <rshift+0x28>
 8009d50:	4623      	mov	r3, r4
 8009d52:	e7e1      	b.n	8009d18 <rshift+0x68>

08009d54 <__hexdig_fun>:
 8009d54:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009d58:	2b09      	cmp	r3, #9
 8009d5a:	d802      	bhi.n	8009d62 <__hexdig_fun+0xe>
 8009d5c:	3820      	subs	r0, #32
 8009d5e:	b2c0      	uxtb	r0, r0
 8009d60:	4770      	bx	lr
 8009d62:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009d66:	2b05      	cmp	r3, #5
 8009d68:	d801      	bhi.n	8009d6e <__hexdig_fun+0x1a>
 8009d6a:	3847      	subs	r0, #71	; 0x47
 8009d6c:	e7f7      	b.n	8009d5e <__hexdig_fun+0xa>
 8009d6e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009d72:	2b05      	cmp	r3, #5
 8009d74:	d801      	bhi.n	8009d7a <__hexdig_fun+0x26>
 8009d76:	3827      	subs	r0, #39	; 0x27
 8009d78:	e7f1      	b.n	8009d5e <__hexdig_fun+0xa>
 8009d7a:	2000      	movs	r0, #0
 8009d7c:	4770      	bx	lr
	...

08009d80 <__gethex>:
 8009d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d84:	4617      	mov	r7, r2
 8009d86:	680a      	ldr	r2, [r1, #0]
 8009d88:	b085      	sub	sp, #20
 8009d8a:	f102 0b02 	add.w	fp, r2, #2
 8009d8e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009d92:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009d96:	4681      	mov	r9, r0
 8009d98:	468a      	mov	sl, r1
 8009d9a:	9302      	str	r3, [sp, #8]
 8009d9c:	32fe      	adds	r2, #254	; 0xfe
 8009d9e:	eb02 030b 	add.w	r3, r2, fp
 8009da2:	46d8      	mov	r8, fp
 8009da4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009da8:	9301      	str	r3, [sp, #4]
 8009daa:	2830      	cmp	r0, #48	; 0x30
 8009dac:	d0f7      	beq.n	8009d9e <__gethex+0x1e>
 8009dae:	f7ff ffd1 	bl	8009d54 <__hexdig_fun>
 8009db2:	4604      	mov	r4, r0
 8009db4:	2800      	cmp	r0, #0
 8009db6:	d138      	bne.n	8009e2a <__gethex+0xaa>
 8009db8:	49a7      	ldr	r1, [pc, #668]	; (800a058 <__gethex+0x2d8>)
 8009dba:	2201      	movs	r2, #1
 8009dbc:	4640      	mov	r0, r8
 8009dbe:	f7ff ff19 	bl	8009bf4 <strncmp>
 8009dc2:	4606      	mov	r6, r0
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	d169      	bne.n	8009e9c <__gethex+0x11c>
 8009dc8:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009dcc:	465d      	mov	r5, fp
 8009dce:	f7ff ffc1 	bl	8009d54 <__hexdig_fun>
 8009dd2:	2800      	cmp	r0, #0
 8009dd4:	d064      	beq.n	8009ea0 <__gethex+0x120>
 8009dd6:	465a      	mov	r2, fp
 8009dd8:	7810      	ldrb	r0, [r2, #0]
 8009dda:	2830      	cmp	r0, #48	; 0x30
 8009ddc:	4690      	mov	r8, r2
 8009dde:	f102 0201 	add.w	r2, r2, #1
 8009de2:	d0f9      	beq.n	8009dd8 <__gethex+0x58>
 8009de4:	f7ff ffb6 	bl	8009d54 <__hexdig_fun>
 8009de8:	2301      	movs	r3, #1
 8009dea:	fab0 f480 	clz	r4, r0
 8009dee:	0964      	lsrs	r4, r4, #5
 8009df0:	465e      	mov	r6, fp
 8009df2:	9301      	str	r3, [sp, #4]
 8009df4:	4642      	mov	r2, r8
 8009df6:	4615      	mov	r5, r2
 8009df8:	3201      	adds	r2, #1
 8009dfa:	7828      	ldrb	r0, [r5, #0]
 8009dfc:	f7ff ffaa 	bl	8009d54 <__hexdig_fun>
 8009e00:	2800      	cmp	r0, #0
 8009e02:	d1f8      	bne.n	8009df6 <__gethex+0x76>
 8009e04:	4994      	ldr	r1, [pc, #592]	; (800a058 <__gethex+0x2d8>)
 8009e06:	2201      	movs	r2, #1
 8009e08:	4628      	mov	r0, r5
 8009e0a:	f7ff fef3 	bl	8009bf4 <strncmp>
 8009e0e:	b978      	cbnz	r0, 8009e30 <__gethex+0xb0>
 8009e10:	b946      	cbnz	r6, 8009e24 <__gethex+0xa4>
 8009e12:	1c6e      	adds	r6, r5, #1
 8009e14:	4632      	mov	r2, r6
 8009e16:	4615      	mov	r5, r2
 8009e18:	3201      	adds	r2, #1
 8009e1a:	7828      	ldrb	r0, [r5, #0]
 8009e1c:	f7ff ff9a 	bl	8009d54 <__hexdig_fun>
 8009e20:	2800      	cmp	r0, #0
 8009e22:	d1f8      	bne.n	8009e16 <__gethex+0x96>
 8009e24:	1b73      	subs	r3, r6, r5
 8009e26:	009e      	lsls	r6, r3, #2
 8009e28:	e004      	b.n	8009e34 <__gethex+0xb4>
 8009e2a:	2400      	movs	r4, #0
 8009e2c:	4626      	mov	r6, r4
 8009e2e:	e7e1      	b.n	8009df4 <__gethex+0x74>
 8009e30:	2e00      	cmp	r6, #0
 8009e32:	d1f7      	bne.n	8009e24 <__gethex+0xa4>
 8009e34:	782b      	ldrb	r3, [r5, #0]
 8009e36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009e3a:	2b50      	cmp	r3, #80	; 0x50
 8009e3c:	d13d      	bne.n	8009eba <__gethex+0x13a>
 8009e3e:	786b      	ldrb	r3, [r5, #1]
 8009e40:	2b2b      	cmp	r3, #43	; 0x2b
 8009e42:	d02f      	beq.n	8009ea4 <__gethex+0x124>
 8009e44:	2b2d      	cmp	r3, #45	; 0x2d
 8009e46:	d031      	beq.n	8009eac <__gethex+0x12c>
 8009e48:	1c69      	adds	r1, r5, #1
 8009e4a:	f04f 0b00 	mov.w	fp, #0
 8009e4e:	7808      	ldrb	r0, [r1, #0]
 8009e50:	f7ff ff80 	bl	8009d54 <__hexdig_fun>
 8009e54:	1e42      	subs	r2, r0, #1
 8009e56:	b2d2      	uxtb	r2, r2
 8009e58:	2a18      	cmp	r2, #24
 8009e5a:	d82e      	bhi.n	8009eba <__gethex+0x13a>
 8009e5c:	f1a0 0210 	sub.w	r2, r0, #16
 8009e60:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009e64:	f7ff ff76 	bl	8009d54 <__hexdig_fun>
 8009e68:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8009e6c:	fa5f fc8c 	uxtb.w	ip, ip
 8009e70:	f1bc 0f18 	cmp.w	ip, #24
 8009e74:	d91d      	bls.n	8009eb2 <__gethex+0x132>
 8009e76:	f1bb 0f00 	cmp.w	fp, #0
 8009e7a:	d000      	beq.n	8009e7e <__gethex+0xfe>
 8009e7c:	4252      	negs	r2, r2
 8009e7e:	4416      	add	r6, r2
 8009e80:	f8ca 1000 	str.w	r1, [sl]
 8009e84:	b1dc      	cbz	r4, 8009ebe <__gethex+0x13e>
 8009e86:	9b01      	ldr	r3, [sp, #4]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	bf14      	ite	ne
 8009e8c:	f04f 0800 	movne.w	r8, #0
 8009e90:	f04f 0806 	moveq.w	r8, #6
 8009e94:	4640      	mov	r0, r8
 8009e96:	b005      	add	sp, #20
 8009e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e9c:	4645      	mov	r5, r8
 8009e9e:	4626      	mov	r6, r4
 8009ea0:	2401      	movs	r4, #1
 8009ea2:	e7c7      	b.n	8009e34 <__gethex+0xb4>
 8009ea4:	f04f 0b00 	mov.w	fp, #0
 8009ea8:	1ca9      	adds	r1, r5, #2
 8009eaa:	e7d0      	b.n	8009e4e <__gethex+0xce>
 8009eac:	f04f 0b01 	mov.w	fp, #1
 8009eb0:	e7fa      	b.n	8009ea8 <__gethex+0x128>
 8009eb2:	230a      	movs	r3, #10
 8009eb4:	fb03 0002 	mla	r0, r3, r2, r0
 8009eb8:	e7d0      	b.n	8009e5c <__gethex+0xdc>
 8009eba:	4629      	mov	r1, r5
 8009ebc:	e7e0      	b.n	8009e80 <__gethex+0x100>
 8009ebe:	eba5 0308 	sub.w	r3, r5, r8
 8009ec2:	3b01      	subs	r3, #1
 8009ec4:	4621      	mov	r1, r4
 8009ec6:	2b07      	cmp	r3, #7
 8009ec8:	dc0a      	bgt.n	8009ee0 <__gethex+0x160>
 8009eca:	4648      	mov	r0, r9
 8009ecc:	f7fe f92e 	bl	800812c <_Balloc>
 8009ed0:	4604      	mov	r4, r0
 8009ed2:	b940      	cbnz	r0, 8009ee6 <__gethex+0x166>
 8009ed4:	4b61      	ldr	r3, [pc, #388]	; (800a05c <__gethex+0x2dc>)
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	21e4      	movs	r1, #228	; 0xe4
 8009eda:	4861      	ldr	r0, [pc, #388]	; (800a060 <__gethex+0x2e0>)
 8009edc:	f7ff feb4 	bl	8009c48 <__assert_func>
 8009ee0:	3101      	adds	r1, #1
 8009ee2:	105b      	asrs	r3, r3, #1
 8009ee4:	e7ef      	b.n	8009ec6 <__gethex+0x146>
 8009ee6:	f100 0a14 	add.w	sl, r0, #20
 8009eea:	2300      	movs	r3, #0
 8009eec:	495a      	ldr	r1, [pc, #360]	; (800a058 <__gethex+0x2d8>)
 8009eee:	f8cd a004 	str.w	sl, [sp, #4]
 8009ef2:	469b      	mov	fp, r3
 8009ef4:	45a8      	cmp	r8, r5
 8009ef6:	d342      	bcc.n	8009f7e <__gethex+0x1fe>
 8009ef8:	9801      	ldr	r0, [sp, #4]
 8009efa:	f840 bb04 	str.w	fp, [r0], #4
 8009efe:	eba0 000a 	sub.w	r0, r0, sl
 8009f02:	1080      	asrs	r0, r0, #2
 8009f04:	6120      	str	r0, [r4, #16]
 8009f06:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8009f0a:	4658      	mov	r0, fp
 8009f0c:	f7fe fa00 	bl	8008310 <__hi0bits>
 8009f10:	683d      	ldr	r5, [r7, #0]
 8009f12:	eba8 0000 	sub.w	r0, r8, r0
 8009f16:	42a8      	cmp	r0, r5
 8009f18:	dd59      	ble.n	8009fce <__gethex+0x24e>
 8009f1a:	eba0 0805 	sub.w	r8, r0, r5
 8009f1e:	4641      	mov	r1, r8
 8009f20:	4620      	mov	r0, r4
 8009f22:	f7fe fd8f 	bl	8008a44 <__any_on>
 8009f26:	4683      	mov	fp, r0
 8009f28:	b1b8      	cbz	r0, 8009f5a <__gethex+0x1da>
 8009f2a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8009f2e:	1159      	asrs	r1, r3, #5
 8009f30:	f003 021f 	and.w	r2, r3, #31
 8009f34:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009f38:	f04f 0b01 	mov.w	fp, #1
 8009f3c:	fa0b f202 	lsl.w	r2, fp, r2
 8009f40:	420a      	tst	r2, r1
 8009f42:	d00a      	beq.n	8009f5a <__gethex+0x1da>
 8009f44:	455b      	cmp	r3, fp
 8009f46:	dd06      	ble.n	8009f56 <__gethex+0x1d6>
 8009f48:	f1a8 0102 	sub.w	r1, r8, #2
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	f7fe fd79 	bl	8008a44 <__any_on>
 8009f52:	2800      	cmp	r0, #0
 8009f54:	d138      	bne.n	8009fc8 <__gethex+0x248>
 8009f56:	f04f 0b02 	mov.w	fp, #2
 8009f5a:	4641      	mov	r1, r8
 8009f5c:	4620      	mov	r0, r4
 8009f5e:	f7ff fea7 	bl	8009cb0 <rshift>
 8009f62:	4446      	add	r6, r8
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	42b3      	cmp	r3, r6
 8009f68:	da41      	bge.n	8009fee <__gethex+0x26e>
 8009f6a:	4621      	mov	r1, r4
 8009f6c:	4648      	mov	r0, r9
 8009f6e:	f7fe f91d 	bl	80081ac <_Bfree>
 8009f72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f74:	2300      	movs	r3, #0
 8009f76:	6013      	str	r3, [r2, #0]
 8009f78:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009f7c:	e78a      	b.n	8009e94 <__gethex+0x114>
 8009f7e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009f82:	2a2e      	cmp	r2, #46	; 0x2e
 8009f84:	d014      	beq.n	8009fb0 <__gethex+0x230>
 8009f86:	2b20      	cmp	r3, #32
 8009f88:	d106      	bne.n	8009f98 <__gethex+0x218>
 8009f8a:	9b01      	ldr	r3, [sp, #4]
 8009f8c:	f843 bb04 	str.w	fp, [r3], #4
 8009f90:	f04f 0b00 	mov.w	fp, #0
 8009f94:	9301      	str	r3, [sp, #4]
 8009f96:	465b      	mov	r3, fp
 8009f98:	7828      	ldrb	r0, [r5, #0]
 8009f9a:	9303      	str	r3, [sp, #12]
 8009f9c:	f7ff feda 	bl	8009d54 <__hexdig_fun>
 8009fa0:	9b03      	ldr	r3, [sp, #12]
 8009fa2:	f000 000f 	and.w	r0, r0, #15
 8009fa6:	4098      	lsls	r0, r3
 8009fa8:	ea4b 0b00 	orr.w	fp, fp, r0
 8009fac:	3304      	adds	r3, #4
 8009fae:	e7a1      	b.n	8009ef4 <__gethex+0x174>
 8009fb0:	45a8      	cmp	r8, r5
 8009fb2:	d8e8      	bhi.n	8009f86 <__gethex+0x206>
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	9303      	str	r3, [sp, #12]
 8009fba:	f7ff fe1b 	bl	8009bf4 <strncmp>
 8009fbe:	4926      	ldr	r1, [pc, #152]	; (800a058 <__gethex+0x2d8>)
 8009fc0:	9b03      	ldr	r3, [sp, #12]
 8009fc2:	2800      	cmp	r0, #0
 8009fc4:	d1df      	bne.n	8009f86 <__gethex+0x206>
 8009fc6:	e795      	b.n	8009ef4 <__gethex+0x174>
 8009fc8:	f04f 0b03 	mov.w	fp, #3
 8009fcc:	e7c5      	b.n	8009f5a <__gethex+0x1da>
 8009fce:	da0b      	bge.n	8009fe8 <__gethex+0x268>
 8009fd0:	eba5 0800 	sub.w	r8, r5, r0
 8009fd4:	4621      	mov	r1, r4
 8009fd6:	4642      	mov	r2, r8
 8009fd8:	4648      	mov	r0, r9
 8009fda:	f7fe fb01 	bl	80085e0 <__lshift>
 8009fde:	eba6 0608 	sub.w	r6, r6, r8
 8009fe2:	4604      	mov	r4, r0
 8009fe4:	f100 0a14 	add.w	sl, r0, #20
 8009fe8:	f04f 0b00 	mov.w	fp, #0
 8009fec:	e7ba      	b.n	8009f64 <__gethex+0x1e4>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	42b3      	cmp	r3, r6
 8009ff2:	dd73      	ble.n	800a0dc <__gethex+0x35c>
 8009ff4:	1b9e      	subs	r6, r3, r6
 8009ff6:	42b5      	cmp	r5, r6
 8009ff8:	dc34      	bgt.n	800a064 <__gethex+0x2e4>
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2b02      	cmp	r3, #2
 8009ffe:	d023      	beq.n	800a048 <__gethex+0x2c8>
 800a000:	2b03      	cmp	r3, #3
 800a002:	d025      	beq.n	800a050 <__gethex+0x2d0>
 800a004:	2b01      	cmp	r3, #1
 800a006:	d115      	bne.n	800a034 <__gethex+0x2b4>
 800a008:	42b5      	cmp	r5, r6
 800a00a:	d113      	bne.n	800a034 <__gethex+0x2b4>
 800a00c:	2d01      	cmp	r5, #1
 800a00e:	d10b      	bne.n	800a028 <__gethex+0x2a8>
 800a010:	9a02      	ldr	r2, [sp, #8]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6013      	str	r3, [r2, #0]
 800a016:	2301      	movs	r3, #1
 800a018:	6123      	str	r3, [r4, #16]
 800a01a:	f8ca 3000 	str.w	r3, [sl]
 800a01e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a020:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a024:	601c      	str	r4, [r3, #0]
 800a026:	e735      	b.n	8009e94 <__gethex+0x114>
 800a028:	1e69      	subs	r1, r5, #1
 800a02a:	4620      	mov	r0, r4
 800a02c:	f7fe fd0a 	bl	8008a44 <__any_on>
 800a030:	2800      	cmp	r0, #0
 800a032:	d1ed      	bne.n	800a010 <__gethex+0x290>
 800a034:	4621      	mov	r1, r4
 800a036:	4648      	mov	r0, r9
 800a038:	f7fe f8b8 	bl	80081ac <_Bfree>
 800a03c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a03e:	2300      	movs	r3, #0
 800a040:	6013      	str	r3, [r2, #0]
 800a042:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a046:	e725      	b.n	8009e94 <__gethex+0x114>
 800a048:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d1f2      	bne.n	800a034 <__gethex+0x2b4>
 800a04e:	e7df      	b.n	800a010 <__gethex+0x290>
 800a050:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a052:	2b00      	cmp	r3, #0
 800a054:	d1dc      	bne.n	800a010 <__gethex+0x290>
 800a056:	e7ed      	b.n	800a034 <__gethex+0x2b4>
 800a058:	0800b104 	.word	0x0800b104
 800a05c:	0800af9d 	.word	0x0800af9d
 800a060:	0800b2ae 	.word	0x0800b2ae
 800a064:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800a068:	f1bb 0f00 	cmp.w	fp, #0
 800a06c:	d133      	bne.n	800a0d6 <__gethex+0x356>
 800a06e:	f1b8 0f00 	cmp.w	r8, #0
 800a072:	d004      	beq.n	800a07e <__gethex+0x2fe>
 800a074:	4641      	mov	r1, r8
 800a076:	4620      	mov	r0, r4
 800a078:	f7fe fce4 	bl	8008a44 <__any_on>
 800a07c:	4683      	mov	fp, r0
 800a07e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a082:	2301      	movs	r3, #1
 800a084:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a088:	f008 081f 	and.w	r8, r8, #31
 800a08c:	fa03 f308 	lsl.w	r3, r3, r8
 800a090:	4213      	tst	r3, r2
 800a092:	4631      	mov	r1, r6
 800a094:	4620      	mov	r0, r4
 800a096:	bf18      	it	ne
 800a098:	f04b 0b02 	orrne.w	fp, fp, #2
 800a09c:	1bad      	subs	r5, r5, r6
 800a09e:	f7ff fe07 	bl	8009cb0 <rshift>
 800a0a2:	687e      	ldr	r6, [r7, #4]
 800a0a4:	f04f 0802 	mov.w	r8, #2
 800a0a8:	f1bb 0f00 	cmp.w	fp, #0
 800a0ac:	d04a      	beq.n	800a144 <__gethex+0x3c4>
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2b02      	cmp	r3, #2
 800a0b2:	d016      	beq.n	800a0e2 <__gethex+0x362>
 800a0b4:	2b03      	cmp	r3, #3
 800a0b6:	d018      	beq.n	800a0ea <__gethex+0x36a>
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d109      	bne.n	800a0d0 <__gethex+0x350>
 800a0bc:	f01b 0f02 	tst.w	fp, #2
 800a0c0:	d006      	beq.n	800a0d0 <__gethex+0x350>
 800a0c2:	f8da 3000 	ldr.w	r3, [sl]
 800a0c6:	ea4b 0b03 	orr.w	fp, fp, r3
 800a0ca:	f01b 0f01 	tst.w	fp, #1
 800a0ce:	d10f      	bne.n	800a0f0 <__gethex+0x370>
 800a0d0:	f048 0810 	orr.w	r8, r8, #16
 800a0d4:	e036      	b.n	800a144 <__gethex+0x3c4>
 800a0d6:	f04f 0b01 	mov.w	fp, #1
 800a0da:	e7d0      	b.n	800a07e <__gethex+0x2fe>
 800a0dc:	f04f 0801 	mov.w	r8, #1
 800a0e0:	e7e2      	b.n	800a0a8 <__gethex+0x328>
 800a0e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0e4:	f1c3 0301 	rsb	r3, r3, #1
 800a0e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d0ef      	beq.n	800a0d0 <__gethex+0x350>
 800a0f0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a0f4:	f104 0214 	add.w	r2, r4, #20
 800a0f8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a0fc:	9301      	str	r3, [sp, #4]
 800a0fe:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a102:	2300      	movs	r3, #0
 800a104:	4694      	mov	ip, r2
 800a106:	f852 1b04 	ldr.w	r1, [r2], #4
 800a10a:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800a10e:	d01e      	beq.n	800a14e <__gethex+0x3ce>
 800a110:	3101      	adds	r1, #1
 800a112:	f8cc 1000 	str.w	r1, [ip]
 800a116:	f1b8 0f02 	cmp.w	r8, #2
 800a11a:	f104 0214 	add.w	r2, r4, #20
 800a11e:	d13d      	bne.n	800a19c <__gethex+0x41c>
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	3b01      	subs	r3, #1
 800a124:	42ab      	cmp	r3, r5
 800a126:	d10b      	bne.n	800a140 <__gethex+0x3c0>
 800a128:	1169      	asrs	r1, r5, #5
 800a12a:	2301      	movs	r3, #1
 800a12c:	f005 051f 	and.w	r5, r5, #31
 800a130:	fa03 f505 	lsl.w	r5, r3, r5
 800a134:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a138:	421d      	tst	r5, r3
 800a13a:	bf18      	it	ne
 800a13c:	f04f 0801 	movne.w	r8, #1
 800a140:	f048 0820 	orr.w	r8, r8, #32
 800a144:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a146:	601c      	str	r4, [r3, #0]
 800a148:	9b02      	ldr	r3, [sp, #8]
 800a14a:	601e      	str	r6, [r3, #0]
 800a14c:	e6a2      	b.n	8009e94 <__gethex+0x114>
 800a14e:	4290      	cmp	r0, r2
 800a150:	f842 3c04 	str.w	r3, [r2, #-4]
 800a154:	d8d6      	bhi.n	800a104 <__gethex+0x384>
 800a156:	68a2      	ldr	r2, [r4, #8]
 800a158:	4593      	cmp	fp, r2
 800a15a:	db17      	blt.n	800a18c <__gethex+0x40c>
 800a15c:	6861      	ldr	r1, [r4, #4]
 800a15e:	4648      	mov	r0, r9
 800a160:	3101      	adds	r1, #1
 800a162:	f7fd ffe3 	bl	800812c <_Balloc>
 800a166:	4682      	mov	sl, r0
 800a168:	b918      	cbnz	r0, 800a172 <__gethex+0x3f2>
 800a16a:	4b1b      	ldr	r3, [pc, #108]	; (800a1d8 <__gethex+0x458>)
 800a16c:	4602      	mov	r2, r0
 800a16e:	2184      	movs	r1, #132	; 0x84
 800a170:	e6b3      	b.n	8009eda <__gethex+0x15a>
 800a172:	6922      	ldr	r2, [r4, #16]
 800a174:	3202      	adds	r2, #2
 800a176:	f104 010c 	add.w	r1, r4, #12
 800a17a:	0092      	lsls	r2, r2, #2
 800a17c:	300c      	adds	r0, #12
 800a17e:	f7fd f846 	bl	800720e <memcpy>
 800a182:	4621      	mov	r1, r4
 800a184:	4648      	mov	r0, r9
 800a186:	f7fe f811 	bl	80081ac <_Bfree>
 800a18a:	4654      	mov	r4, sl
 800a18c:	6922      	ldr	r2, [r4, #16]
 800a18e:	1c51      	adds	r1, r2, #1
 800a190:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a194:	6121      	str	r1, [r4, #16]
 800a196:	2101      	movs	r1, #1
 800a198:	6151      	str	r1, [r2, #20]
 800a19a:	e7bc      	b.n	800a116 <__gethex+0x396>
 800a19c:	6921      	ldr	r1, [r4, #16]
 800a19e:	4559      	cmp	r1, fp
 800a1a0:	dd0b      	ble.n	800a1ba <__gethex+0x43a>
 800a1a2:	2101      	movs	r1, #1
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	f7ff fd83 	bl	8009cb0 <rshift>
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	3601      	adds	r6, #1
 800a1ae:	42b3      	cmp	r3, r6
 800a1b0:	f6ff aedb 	blt.w	8009f6a <__gethex+0x1ea>
 800a1b4:	f04f 0801 	mov.w	r8, #1
 800a1b8:	e7c2      	b.n	800a140 <__gethex+0x3c0>
 800a1ba:	f015 051f 	ands.w	r5, r5, #31
 800a1be:	d0f9      	beq.n	800a1b4 <__gethex+0x434>
 800a1c0:	9b01      	ldr	r3, [sp, #4]
 800a1c2:	441a      	add	r2, r3
 800a1c4:	f1c5 0520 	rsb	r5, r5, #32
 800a1c8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a1cc:	f7fe f8a0 	bl	8008310 <__hi0bits>
 800a1d0:	42a8      	cmp	r0, r5
 800a1d2:	dbe6      	blt.n	800a1a2 <__gethex+0x422>
 800a1d4:	e7ee      	b.n	800a1b4 <__gethex+0x434>
 800a1d6:	bf00      	nop
 800a1d8:	0800af9d 	.word	0x0800af9d

0800a1dc <L_shift>:
 800a1dc:	f1c2 0208 	rsb	r2, r2, #8
 800a1e0:	0092      	lsls	r2, r2, #2
 800a1e2:	b570      	push	{r4, r5, r6, lr}
 800a1e4:	f1c2 0620 	rsb	r6, r2, #32
 800a1e8:	6843      	ldr	r3, [r0, #4]
 800a1ea:	6804      	ldr	r4, [r0, #0]
 800a1ec:	fa03 f506 	lsl.w	r5, r3, r6
 800a1f0:	432c      	orrs	r4, r5
 800a1f2:	40d3      	lsrs	r3, r2
 800a1f4:	6004      	str	r4, [r0, #0]
 800a1f6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a1fa:	4288      	cmp	r0, r1
 800a1fc:	d3f4      	bcc.n	800a1e8 <L_shift+0xc>
 800a1fe:	bd70      	pop	{r4, r5, r6, pc}

0800a200 <__match>:
 800a200:	b530      	push	{r4, r5, lr}
 800a202:	6803      	ldr	r3, [r0, #0]
 800a204:	3301      	adds	r3, #1
 800a206:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a20a:	b914      	cbnz	r4, 800a212 <__match+0x12>
 800a20c:	6003      	str	r3, [r0, #0]
 800a20e:	2001      	movs	r0, #1
 800a210:	bd30      	pop	{r4, r5, pc}
 800a212:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a216:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a21a:	2d19      	cmp	r5, #25
 800a21c:	bf98      	it	ls
 800a21e:	3220      	addls	r2, #32
 800a220:	42a2      	cmp	r2, r4
 800a222:	d0f0      	beq.n	800a206 <__match+0x6>
 800a224:	2000      	movs	r0, #0
 800a226:	e7f3      	b.n	800a210 <__match+0x10>

0800a228 <__hexnan>:
 800a228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a22c:	680b      	ldr	r3, [r1, #0]
 800a22e:	6801      	ldr	r1, [r0, #0]
 800a230:	115e      	asrs	r6, r3, #5
 800a232:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a236:	f013 031f 	ands.w	r3, r3, #31
 800a23a:	b087      	sub	sp, #28
 800a23c:	bf18      	it	ne
 800a23e:	3604      	addne	r6, #4
 800a240:	2500      	movs	r5, #0
 800a242:	1f37      	subs	r7, r6, #4
 800a244:	4682      	mov	sl, r0
 800a246:	4690      	mov	r8, r2
 800a248:	9301      	str	r3, [sp, #4]
 800a24a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a24e:	46b9      	mov	r9, r7
 800a250:	463c      	mov	r4, r7
 800a252:	9502      	str	r5, [sp, #8]
 800a254:	46ab      	mov	fp, r5
 800a256:	784a      	ldrb	r2, [r1, #1]
 800a258:	1c4b      	adds	r3, r1, #1
 800a25a:	9303      	str	r3, [sp, #12]
 800a25c:	b342      	cbz	r2, 800a2b0 <__hexnan+0x88>
 800a25e:	4610      	mov	r0, r2
 800a260:	9105      	str	r1, [sp, #20]
 800a262:	9204      	str	r2, [sp, #16]
 800a264:	f7ff fd76 	bl	8009d54 <__hexdig_fun>
 800a268:	2800      	cmp	r0, #0
 800a26a:	d14f      	bne.n	800a30c <__hexnan+0xe4>
 800a26c:	9a04      	ldr	r2, [sp, #16]
 800a26e:	9905      	ldr	r1, [sp, #20]
 800a270:	2a20      	cmp	r2, #32
 800a272:	d818      	bhi.n	800a2a6 <__hexnan+0x7e>
 800a274:	9b02      	ldr	r3, [sp, #8]
 800a276:	459b      	cmp	fp, r3
 800a278:	dd13      	ble.n	800a2a2 <__hexnan+0x7a>
 800a27a:	454c      	cmp	r4, r9
 800a27c:	d206      	bcs.n	800a28c <__hexnan+0x64>
 800a27e:	2d07      	cmp	r5, #7
 800a280:	dc04      	bgt.n	800a28c <__hexnan+0x64>
 800a282:	462a      	mov	r2, r5
 800a284:	4649      	mov	r1, r9
 800a286:	4620      	mov	r0, r4
 800a288:	f7ff ffa8 	bl	800a1dc <L_shift>
 800a28c:	4544      	cmp	r4, r8
 800a28e:	d950      	bls.n	800a332 <__hexnan+0x10a>
 800a290:	2300      	movs	r3, #0
 800a292:	f1a4 0904 	sub.w	r9, r4, #4
 800a296:	f844 3c04 	str.w	r3, [r4, #-4]
 800a29a:	f8cd b008 	str.w	fp, [sp, #8]
 800a29e:	464c      	mov	r4, r9
 800a2a0:	461d      	mov	r5, r3
 800a2a2:	9903      	ldr	r1, [sp, #12]
 800a2a4:	e7d7      	b.n	800a256 <__hexnan+0x2e>
 800a2a6:	2a29      	cmp	r2, #41	; 0x29
 800a2a8:	d155      	bne.n	800a356 <__hexnan+0x12e>
 800a2aa:	3102      	adds	r1, #2
 800a2ac:	f8ca 1000 	str.w	r1, [sl]
 800a2b0:	f1bb 0f00 	cmp.w	fp, #0
 800a2b4:	d04f      	beq.n	800a356 <__hexnan+0x12e>
 800a2b6:	454c      	cmp	r4, r9
 800a2b8:	d206      	bcs.n	800a2c8 <__hexnan+0xa0>
 800a2ba:	2d07      	cmp	r5, #7
 800a2bc:	dc04      	bgt.n	800a2c8 <__hexnan+0xa0>
 800a2be:	462a      	mov	r2, r5
 800a2c0:	4649      	mov	r1, r9
 800a2c2:	4620      	mov	r0, r4
 800a2c4:	f7ff ff8a 	bl	800a1dc <L_shift>
 800a2c8:	4544      	cmp	r4, r8
 800a2ca:	d934      	bls.n	800a336 <__hexnan+0x10e>
 800a2cc:	f1a8 0204 	sub.w	r2, r8, #4
 800a2d0:	4623      	mov	r3, r4
 800a2d2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a2d6:	f842 1f04 	str.w	r1, [r2, #4]!
 800a2da:	429f      	cmp	r7, r3
 800a2dc:	d2f9      	bcs.n	800a2d2 <__hexnan+0xaa>
 800a2de:	1b3b      	subs	r3, r7, r4
 800a2e0:	f023 0303 	bic.w	r3, r3, #3
 800a2e4:	3304      	adds	r3, #4
 800a2e6:	3e03      	subs	r6, #3
 800a2e8:	3401      	adds	r4, #1
 800a2ea:	42a6      	cmp	r6, r4
 800a2ec:	bf38      	it	cc
 800a2ee:	2304      	movcc	r3, #4
 800a2f0:	4443      	add	r3, r8
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f843 2b04 	str.w	r2, [r3], #4
 800a2f8:	429f      	cmp	r7, r3
 800a2fa:	d2fb      	bcs.n	800a2f4 <__hexnan+0xcc>
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	b91b      	cbnz	r3, 800a308 <__hexnan+0xe0>
 800a300:	4547      	cmp	r7, r8
 800a302:	d126      	bne.n	800a352 <__hexnan+0x12a>
 800a304:	2301      	movs	r3, #1
 800a306:	603b      	str	r3, [r7, #0]
 800a308:	2005      	movs	r0, #5
 800a30a:	e025      	b.n	800a358 <__hexnan+0x130>
 800a30c:	3501      	adds	r5, #1
 800a30e:	2d08      	cmp	r5, #8
 800a310:	f10b 0b01 	add.w	fp, fp, #1
 800a314:	dd06      	ble.n	800a324 <__hexnan+0xfc>
 800a316:	4544      	cmp	r4, r8
 800a318:	d9c3      	bls.n	800a2a2 <__hexnan+0x7a>
 800a31a:	2300      	movs	r3, #0
 800a31c:	f844 3c04 	str.w	r3, [r4, #-4]
 800a320:	2501      	movs	r5, #1
 800a322:	3c04      	subs	r4, #4
 800a324:	6822      	ldr	r2, [r4, #0]
 800a326:	f000 000f 	and.w	r0, r0, #15
 800a32a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a32e:	6020      	str	r0, [r4, #0]
 800a330:	e7b7      	b.n	800a2a2 <__hexnan+0x7a>
 800a332:	2508      	movs	r5, #8
 800a334:	e7b5      	b.n	800a2a2 <__hexnan+0x7a>
 800a336:	9b01      	ldr	r3, [sp, #4]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d0df      	beq.n	800a2fc <__hexnan+0xd4>
 800a33c:	f1c3 0320 	rsb	r3, r3, #32
 800a340:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a344:	40da      	lsrs	r2, r3
 800a346:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a34a:	4013      	ands	r3, r2
 800a34c:	f846 3c04 	str.w	r3, [r6, #-4]
 800a350:	e7d4      	b.n	800a2fc <__hexnan+0xd4>
 800a352:	3f04      	subs	r7, #4
 800a354:	e7d2      	b.n	800a2fc <__hexnan+0xd4>
 800a356:	2004      	movs	r0, #4
 800a358:	b007      	add	sp, #28
 800a35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a35e <__ascii_mbtowc>:
 800a35e:	b082      	sub	sp, #8
 800a360:	b901      	cbnz	r1, 800a364 <__ascii_mbtowc+0x6>
 800a362:	a901      	add	r1, sp, #4
 800a364:	b142      	cbz	r2, 800a378 <__ascii_mbtowc+0x1a>
 800a366:	b14b      	cbz	r3, 800a37c <__ascii_mbtowc+0x1e>
 800a368:	7813      	ldrb	r3, [r2, #0]
 800a36a:	600b      	str	r3, [r1, #0]
 800a36c:	7812      	ldrb	r2, [r2, #0]
 800a36e:	1e10      	subs	r0, r2, #0
 800a370:	bf18      	it	ne
 800a372:	2001      	movne	r0, #1
 800a374:	b002      	add	sp, #8
 800a376:	4770      	bx	lr
 800a378:	4610      	mov	r0, r2
 800a37a:	e7fb      	b.n	800a374 <__ascii_mbtowc+0x16>
 800a37c:	f06f 0001 	mvn.w	r0, #1
 800a380:	e7f8      	b.n	800a374 <__ascii_mbtowc+0x16>

0800a382 <_realloc_r>:
 800a382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a386:	4680      	mov	r8, r0
 800a388:	4614      	mov	r4, r2
 800a38a:	460e      	mov	r6, r1
 800a38c:	b921      	cbnz	r1, 800a398 <_realloc_r+0x16>
 800a38e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a392:	4611      	mov	r1, r2
 800a394:	f7fd be3e 	b.w	8008014 <_malloc_r>
 800a398:	b92a      	cbnz	r2, 800a3a6 <_realloc_r+0x24>
 800a39a:	f7fd fdc7 	bl	8007f2c <_free_r>
 800a39e:	4625      	mov	r5, r4
 800a3a0:	4628      	mov	r0, r5
 800a3a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3a6:	f000 f842 	bl	800a42e <_malloc_usable_size_r>
 800a3aa:	4284      	cmp	r4, r0
 800a3ac:	4607      	mov	r7, r0
 800a3ae:	d802      	bhi.n	800a3b6 <_realloc_r+0x34>
 800a3b0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a3b4:	d812      	bhi.n	800a3dc <_realloc_r+0x5a>
 800a3b6:	4621      	mov	r1, r4
 800a3b8:	4640      	mov	r0, r8
 800a3ba:	f7fd fe2b 	bl	8008014 <_malloc_r>
 800a3be:	4605      	mov	r5, r0
 800a3c0:	2800      	cmp	r0, #0
 800a3c2:	d0ed      	beq.n	800a3a0 <_realloc_r+0x1e>
 800a3c4:	42bc      	cmp	r4, r7
 800a3c6:	4622      	mov	r2, r4
 800a3c8:	4631      	mov	r1, r6
 800a3ca:	bf28      	it	cs
 800a3cc:	463a      	movcs	r2, r7
 800a3ce:	f7fc ff1e 	bl	800720e <memcpy>
 800a3d2:	4631      	mov	r1, r6
 800a3d4:	4640      	mov	r0, r8
 800a3d6:	f7fd fda9 	bl	8007f2c <_free_r>
 800a3da:	e7e1      	b.n	800a3a0 <_realloc_r+0x1e>
 800a3dc:	4635      	mov	r5, r6
 800a3de:	e7df      	b.n	800a3a0 <_realloc_r+0x1e>

0800a3e0 <__ascii_wctomb>:
 800a3e0:	b149      	cbz	r1, 800a3f6 <__ascii_wctomb+0x16>
 800a3e2:	2aff      	cmp	r2, #255	; 0xff
 800a3e4:	bf85      	ittet	hi
 800a3e6:	238a      	movhi	r3, #138	; 0x8a
 800a3e8:	6003      	strhi	r3, [r0, #0]
 800a3ea:	700a      	strbls	r2, [r1, #0]
 800a3ec:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a3f0:	bf98      	it	ls
 800a3f2:	2001      	movls	r0, #1
 800a3f4:	4770      	bx	lr
 800a3f6:	4608      	mov	r0, r1
 800a3f8:	4770      	bx	lr
	...

0800a3fc <fiprintf>:
 800a3fc:	b40e      	push	{r1, r2, r3}
 800a3fe:	b503      	push	{r0, r1, lr}
 800a400:	4601      	mov	r1, r0
 800a402:	ab03      	add	r3, sp, #12
 800a404:	4805      	ldr	r0, [pc, #20]	; (800a41c <fiprintf+0x20>)
 800a406:	f853 2b04 	ldr.w	r2, [r3], #4
 800a40a:	6800      	ldr	r0, [r0, #0]
 800a40c:	9301      	str	r3, [sp, #4]
 800a40e:	f000 f83f 	bl	800a490 <_vfiprintf_r>
 800a412:	b002      	add	sp, #8
 800a414:	f85d eb04 	ldr.w	lr, [sp], #4
 800a418:	b003      	add	sp, #12
 800a41a:	4770      	bx	lr
 800a41c:	20000088 	.word	0x20000088

0800a420 <abort>:
 800a420:	b508      	push	{r3, lr}
 800a422:	2006      	movs	r0, #6
 800a424:	f000 fa0c 	bl	800a840 <raise>
 800a428:	2001      	movs	r0, #1
 800a42a:	f7f8 f81f 	bl	800246c <_exit>

0800a42e <_malloc_usable_size_r>:
 800a42e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a432:	1f18      	subs	r0, r3, #4
 800a434:	2b00      	cmp	r3, #0
 800a436:	bfbc      	itt	lt
 800a438:	580b      	ldrlt	r3, [r1, r0]
 800a43a:	18c0      	addlt	r0, r0, r3
 800a43c:	4770      	bx	lr

0800a43e <__sfputc_r>:
 800a43e:	6893      	ldr	r3, [r2, #8]
 800a440:	3b01      	subs	r3, #1
 800a442:	2b00      	cmp	r3, #0
 800a444:	b410      	push	{r4}
 800a446:	6093      	str	r3, [r2, #8]
 800a448:	da08      	bge.n	800a45c <__sfputc_r+0x1e>
 800a44a:	6994      	ldr	r4, [r2, #24]
 800a44c:	42a3      	cmp	r3, r4
 800a44e:	db01      	blt.n	800a454 <__sfputc_r+0x16>
 800a450:	290a      	cmp	r1, #10
 800a452:	d103      	bne.n	800a45c <__sfputc_r+0x1e>
 800a454:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a458:	f000 b934 	b.w	800a6c4 <__swbuf_r>
 800a45c:	6813      	ldr	r3, [r2, #0]
 800a45e:	1c58      	adds	r0, r3, #1
 800a460:	6010      	str	r0, [r2, #0]
 800a462:	7019      	strb	r1, [r3, #0]
 800a464:	4608      	mov	r0, r1
 800a466:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a46a:	4770      	bx	lr

0800a46c <__sfputs_r>:
 800a46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a46e:	4606      	mov	r6, r0
 800a470:	460f      	mov	r7, r1
 800a472:	4614      	mov	r4, r2
 800a474:	18d5      	adds	r5, r2, r3
 800a476:	42ac      	cmp	r4, r5
 800a478:	d101      	bne.n	800a47e <__sfputs_r+0x12>
 800a47a:	2000      	movs	r0, #0
 800a47c:	e007      	b.n	800a48e <__sfputs_r+0x22>
 800a47e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a482:	463a      	mov	r2, r7
 800a484:	4630      	mov	r0, r6
 800a486:	f7ff ffda 	bl	800a43e <__sfputc_r>
 800a48a:	1c43      	adds	r3, r0, #1
 800a48c:	d1f3      	bne.n	800a476 <__sfputs_r+0xa>
 800a48e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a490 <_vfiprintf_r>:
 800a490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a494:	460d      	mov	r5, r1
 800a496:	b09d      	sub	sp, #116	; 0x74
 800a498:	4614      	mov	r4, r2
 800a49a:	4698      	mov	r8, r3
 800a49c:	4606      	mov	r6, r0
 800a49e:	b118      	cbz	r0, 800a4a8 <_vfiprintf_r+0x18>
 800a4a0:	6a03      	ldr	r3, [r0, #32]
 800a4a2:	b90b      	cbnz	r3, 800a4a8 <_vfiprintf_r+0x18>
 800a4a4:	f7fc fd44 	bl	8006f30 <__sinit>
 800a4a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4aa:	07d9      	lsls	r1, r3, #31
 800a4ac:	d405      	bmi.n	800a4ba <_vfiprintf_r+0x2a>
 800a4ae:	89ab      	ldrh	r3, [r5, #12]
 800a4b0:	059a      	lsls	r2, r3, #22
 800a4b2:	d402      	bmi.n	800a4ba <_vfiprintf_r+0x2a>
 800a4b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4b6:	f7fc fea8 	bl	800720a <__retarget_lock_acquire_recursive>
 800a4ba:	89ab      	ldrh	r3, [r5, #12]
 800a4bc:	071b      	lsls	r3, r3, #28
 800a4be:	d501      	bpl.n	800a4c4 <_vfiprintf_r+0x34>
 800a4c0:	692b      	ldr	r3, [r5, #16]
 800a4c2:	b99b      	cbnz	r3, 800a4ec <_vfiprintf_r+0x5c>
 800a4c4:	4629      	mov	r1, r5
 800a4c6:	4630      	mov	r0, r6
 800a4c8:	f000 f93a 	bl	800a740 <__swsetup_r>
 800a4cc:	b170      	cbz	r0, 800a4ec <_vfiprintf_r+0x5c>
 800a4ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4d0:	07dc      	lsls	r4, r3, #31
 800a4d2:	d504      	bpl.n	800a4de <_vfiprintf_r+0x4e>
 800a4d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4d8:	b01d      	add	sp, #116	; 0x74
 800a4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4de:	89ab      	ldrh	r3, [r5, #12]
 800a4e0:	0598      	lsls	r0, r3, #22
 800a4e2:	d4f7      	bmi.n	800a4d4 <_vfiprintf_r+0x44>
 800a4e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4e6:	f7fc fe91 	bl	800720c <__retarget_lock_release_recursive>
 800a4ea:	e7f3      	b.n	800a4d4 <_vfiprintf_r+0x44>
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a4f0:	2320      	movs	r3, #32
 800a4f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4fa:	2330      	movs	r3, #48	; 0x30
 800a4fc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a6b0 <_vfiprintf_r+0x220>
 800a500:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a504:	f04f 0901 	mov.w	r9, #1
 800a508:	4623      	mov	r3, r4
 800a50a:	469a      	mov	sl, r3
 800a50c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a510:	b10a      	cbz	r2, 800a516 <_vfiprintf_r+0x86>
 800a512:	2a25      	cmp	r2, #37	; 0x25
 800a514:	d1f9      	bne.n	800a50a <_vfiprintf_r+0x7a>
 800a516:	ebba 0b04 	subs.w	fp, sl, r4
 800a51a:	d00b      	beq.n	800a534 <_vfiprintf_r+0xa4>
 800a51c:	465b      	mov	r3, fp
 800a51e:	4622      	mov	r2, r4
 800a520:	4629      	mov	r1, r5
 800a522:	4630      	mov	r0, r6
 800a524:	f7ff ffa2 	bl	800a46c <__sfputs_r>
 800a528:	3001      	adds	r0, #1
 800a52a:	f000 80a9 	beq.w	800a680 <_vfiprintf_r+0x1f0>
 800a52e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a530:	445a      	add	r2, fp
 800a532:	9209      	str	r2, [sp, #36]	; 0x24
 800a534:	f89a 3000 	ldrb.w	r3, [sl]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	f000 80a1 	beq.w	800a680 <_vfiprintf_r+0x1f0>
 800a53e:	2300      	movs	r3, #0
 800a540:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a544:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a548:	f10a 0a01 	add.w	sl, sl, #1
 800a54c:	9304      	str	r3, [sp, #16]
 800a54e:	9307      	str	r3, [sp, #28]
 800a550:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a554:	931a      	str	r3, [sp, #104]	; 0x68
 800a556:	4654      	mov	r4, sl
 800a558:	2205      	movs	r2, #5
 800a55a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a55e:	4854      	ldr	r0, [pc, #336]	; (800a6b0 <_vfiprintf_r+0x220>)
 800a560:	f7f5 fe36 	bl	80001d0 <memchr>
 800a564:	9a04      	ldr	r2, [sp, #16]
 800a566:	b9d8      	cbnz	r0, 800a5a0 <_vfiprintf_r+0x110>
 800a568:	06d1      	lsls	r1, r2, #27
 800a56a:	bf44      	itt	mi
 800a56c:	2320      	movmi	r3, #32
 800a56e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a572:	0713      	lsls	r3, r2, #28
 800a574:	bf44      	itt	mi
 800a576:	232b      	movmi	r3, #43	; 0x2b
 800a578:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a57c:	f89a 3000 	ldrb.w	r3, [sl]
 800a580:	2b2a      	cmp	r3, #42	; 0x2a
 800a582:	d015      	beq.n	800a5b0 <_vfiprintf_r+0x120>
 800a584:	9a07      	ldr	r2, [sp, #28]
 800a586:	4654      	mov	r4, sl
 800a588:	2000      	movs	r0, #0
 800a58a:	f04f 0c0a 	mov.w	ip, #10
 800a58e:	4621      	mov	r1, r4
 800a590:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a594:	3b30      	subs	r3, #48	; 0x30
 800a596:	2b09      	cmp	r3, #9
 800a598:	d94d      	bls.n	800a636 <_vfiprintf_r+0x1a6>
 800a59a:	b1b0      	cbz	r0, 800a5ca <_vfiprintf_r+0x13a>
 800a59c:	9207      	str	r2, [sp, #28]
 800a59e:	e014      	b.n	800a5ca <_vfiprintf_r+0x13a>
 800a5a0:	eba0 0308 	sub.w	r3, r0, r8
 800a5a4:	fa09 f303 	lsl.w	r3, r9, r3
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	9304      	str	r3, [sp, #16]
 800a5ac:	46a2      	mov	sl, r4
 800a5ae:	e7d2      	b.n	800a556 <_vfiprintf_r+0xc6>
 800a5b0:	9b03      	ldr	r3, [sp, #12]
 800a5b2:	1d19      	adds	r1, r3, #4
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	9103      	str	r1, [sp, #12]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	bfbb      	ittet	lt
 800a5bc:	425b      	neglt	r3, r3
 800a5be:	f042 0202 	orrlt.w	r2, r2, #2
 800a5c2:	9307      	strge	r3, [sp, #28]
 800a5c4:	9307      	strlt	r3, [sp, #28]
 800a5c6:	bfb8      	it	lt
 800a5c8:	9204      	strlt	r2, [sp, #16]
 800a5ca:	7823      	ldrb	r3, [r4, #0]
 800a5cc:	2b2e      	cmp	r3, #46	; 0x2e
 800a5ce:	d10c      	bne.n	800a5ea <_vfiprintf_r+0x15a>
 800a5d0:	7863      	ldrb	r3, [r4, #1]
 800a5d2:	2b2a      	cmp	r3, #42	; 0x2a
 800a5d4:	d134      	bne.n	800a640 <_vfiprintf_r+0x1b0>
 800a5d6:	9b03      	ldr	r3, [sp, #12]
 800a5d8:	1d1a      	adds	r2, r3, #4
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	9203      	str	r2, [sp, #12]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	bfb8      	it	lt
 800a5e2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a5e6:	3402      	adds	r4, #2
 800a5e8:	9305      	str	r3, [sp, #20]
 800a5ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a6c0 <_vfiprintf_r+0x230>
 800a5ee:	7821      	ldrb	r1, [r4, #0]
 800a5f0:	2203      	movs	r2, #3
 800a5f2:	4650      	mov	r0, sl
 800a5f4:	f7f5 fdec 	bl	80001d0 <memchr>
 800a5f8:	b138      	cbz	r0, 800a60a <_vfiprintf_r+0x17a>
 800a5fa:	9b04      	ldr	r3, [sp, #16]
 800a5fc:	eba0 000a 	sub.w	r0, r0, sl
 800a600:	2240      	movs	r2, #64	; 0x40
 800a602:	4082      	lsls	r2, r0
 800a604:	4313      	orrs	r3, r2
 800a606:	3401      	adds	r4, #1
 800a608:	9304      	str	r3, [sp, #16]
 800a60a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a60e:	4829      	ldr	r0, [pc, #164]	; (800a6b4 <_vfiprintf_r+0x224>)
 800a610:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a614:	2206      	movs	r2, #6
 800a616:	f7f5 fddb 	bl	80001d0 <memchr>
 800a61a:	2800      	cmp	r0, #0
 800a61c:	d03f      	beq.n	800a69e <_vfiprintf_r+0x20e>
 800a61e:	4b26      	ldr	r3, [pc, #152]	; (800a6b8 <_vfiprintf_r+0x228>)
 800a620:	bb1b      	cbnz	r3, 800a66a <_vfiprintf_r+0x1da>
 800a622:	9b03      	ldr	r3, [sp, #12]
 800a624:	3307      	adds	r3, #7
 800a626:	f023 0307 	bic.w	r3, r3, #7
 800a62a:	3308      	adds	r3, #8
 800a62c:	9303      	str	r3, [sp, #12]
 800a62e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a630:	443b      	add	r3, r7
 800a632:	9309      	str	r3, [sp, #36]	; 0x24
 800a634:	e768      	b.n	800a508 <_vfiprintf_r+0x78>
 800a636:	fb0c 3202 	mla	r2, ip, r2, r3
 800a63a:	460c      	mov	r4, r1
 800a63c:	2001      	movs	r0, #1
 800a63e:	e7a6      	b.n	800a58e <_vfiprintf_r+0xfe>
 800a640:	2300      	movs	r3, #0
 800a642:	3401      	adds	r4, #1
 800a644:	9305      	str	r3, [sp, #20]
 800a646:	4619      	mov	r1, r3
 800a648:	f04f 0c0a 	mov.w	ip, #10
 800a64c:	4620      	mov	r0, r4
 800a64e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a652:	3a30      	subs	r2, #48	; 0x30
 800a654:	2a09      	cmp	r2, #9
 800a656:	d903      	bls.n	800a660 <_vfiprintf_r+0x1d0>
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d0c6      	beq.n	800a5ea <_vfiprintf_r+0x15a>
 800a65c:	9105      	str	r1, [sp, #20]
 800a65e:	e7c4      	b.n	800a5ea <_vfiprintf_r+0x15a>
 800a660:	fb0c 2101 	mla	r1, ip, r1, r2
 800a664:	4604      	mov	r4, r0
 800a666:	2301      	movs	r3, #1
 800a668:	e7f0      	b.n	800a64c <_vfiprintf_r+0x1bc>
 800a66a:	ab03      	add	r3, sp, #12
 800a66c:	9300      	str	r3, [sp, #0]
 800a66e:	462a      	mov	r2, r5
 800a670:	4b12      	ldr	r3, [pc, #72]	; (800a6bc <_vfiprintf_r+0x22c>)
 800a672:	a904      	add	r1, sp, #16
 800a674:	4630      	mov	r0, r6
 800a676:	f7fb fdf9 	bl	800626c <_printf_float>
 800a67a:	4607      	mov	r7, r0
 800a67c:	1c78      	adds	r0, r7, #1
 800a67e:	d1d6      	bne.n	800a62e <_vfiprintf_r+0x19e>
 800a680:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a682:	07d9      	lsls	r1, r3, #31
 800a684:	d405      	bmi.n	800a692 <_vfiprintf_r+0x202>
 800a686:	89ab      	ldrh	r3, [r5, #12]
 800a688:	059a      	lsls	r2, r3, #22
 800a68a:	d402      	bmi.n	800a692 <_vfiprintf_r+0x202>
 800a68c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a68e:	f7fc fdbd 	bl	800720c <__retarget_lock_release_recursive>
 800a692:	89ab      	ldrh	r3, [r5, #12]
 800a694:	065b      	lsls	r3, r3, #25
 800a696:	f53f af1d 	bmi.w	800a4d4 <_vfiprintf_r+0x44>
 800a69a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a69c:	e71c      	b.n	800a4d8 <_vfiprintf_r+0x48>
 800a69e:	ab03      	add	r3, sp, #12
 800a6a0:	9300      	str	r3, [sp, #0]
 800a6a2:	462a      	mov	r2, r5
 800a6a4:	4b05      	ldr	r3, [pc, #20]	; (800a6bc <_vfiprintf_r+0x22c>)
 800a6a6:	a904      	add	r1, sp, #16
 800a6a8:	4630      	mov	r0, r6
 800a6aa:	f7fc f883 	bl	80067b4 <_printf_i>
 800a6ae:	e7e4      	b.n	800a67a <_vfiprintf_r+0x1ea>
 800a6b0:	0800b259 	.word	0x0800b259
 800a6b4:	0800b263 	.word	0x0800b263
 800a6b8:	0800626d 	.word	0x0800626d
 800a6bc:	0800a46d 	.word	0x0800a46d
 800a6c0:	0800b25f 	.word	0x0800b25f

0800a6c4 <__swbuf_r>:
 800a6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6c6:	460e      	mov	r6, r1
 800a6c8:	4614      	mov	r4, r2
 800a6ca:	4605      	mov	r5, r0
 800a6cc:	b118      	cbz	r0, 800a6d6 <__swbuf_r+0x12>
 800a6ce:	6a03      	ldr	r3, [r0, #32]
 800a6d0:	b90b      	cbnz	r3, 800a6d6 <__swbuf_r+0x12>
 800a6d2:	f7fc fc2d 	bl	8006f30 <__sinit>
 800a6d6:	69a3      	ldr	r3, [r4, #24]
 800a6d8:	60a3      	str	r3, [r4, #8]
 800a6da:	89a3      	ldrh	r3, [r4, #12]
 800a6dc:	071a      	lsls	r2, r3, #28
 800a6de:	d525      	bpl.n	800a72c <__swbuf_r+0x68>
 800a6e0:	6923      	ldr	r3, [r4, #16]
 800a6e2:	b31b      	cbz	r3, 800a72c <__swbuf_r+0x68>
 800a6e4:	6823      	ldr	r3, [r4, #0]
 800a6e6:	6922      	ldr	r2, [r4, #16]
 800a6e8:	1a98      	subs	r0, r3, r2
 800a6ea:	6963      	ldr	r3, [r4, #20]
 800a6ec:	b2f6      	uxtb	r6, r6
 800a6ee:	4283      	cmp	r3, r0
 800a6f0:	4637      	mov	r7, r6
 800a6f2:	dc04      	bgt.n	800a6fe <__swbuf_r+0x3a>
 800a6f4:	4621      	mov	r1, r4
 800a6f6:	4628      	mov	r0, r5
 800a6f8:	f7ff fa3a 	bl	8009b70 <_fflush_r>
 800a6fc:	b9e0      	cbnz	r0, 800a738 <__swbuf_r+0x74>
 800a6fe:	68a3      	ldr	r3, [r4, #8]
 800a700:	3b01      	subs	r3, #1
 800a702:	60a3      	str	r3, [r4, #8]
 800a704:	6823      	ldr	r3, [r4, #0]
 800a706:	1c5a      	adds	r2, r3, #1
 800a708:	6022      	str	r2, [r4, #0]
 800a70a:	701e      	strb	r6, [r3, #0]
 800a70c:	6962      	ldr	r2, [r4, #20]
 800a70e:	1c43      	adds	r3, r0, #1
 800a710:	429a      	cmp	r2, r3
 800a712:	d004      	beq.n	800a71e <__swbuf_r+0x5a>
 800a714:	89a3      	ldrh	r3, [r4, #12]
 800a716:	07db      	lsls	r3, r3, #31
 800a718:	d506      	bpl.n	800a728 <__swbuf_r+0x64>
 800a71a:	2e0a      	cmp	r6, #10
 800a71c:	d104      	bne.n	800a728 <__swbuf_r+0x64>
 800a71e:	4621      	mov	r1, r4
 800a720:	4628      	mov	r0, r5
 800a722:	f7ff fa25 	bl	8009b70 <_fflush_r>
 800a726:	b938      	cbnz	r0, 800a738 <__swbuf_r+0x74>
 800a728:	4638      	mov	r0, r7
 800a72a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a72c:	4621      	mov	r1, r4
 800a72e:	4628      	mov	r0, r5
 800a730:	f000 f806 	bl	800a740 <__swsetup_r>
 800a734:	2800      	cmp	r0, #0
 800a736:	d0d5      	beq.n	800a6e4 <__swbuf_r+0x20>
 800a738:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a73c:	e7f4      	b.n	800a728 <__swbuf_r+0x64>
	...

0800a740 <__swsetup_r>:
 800a740:	b538      	push	{r3, r4, r5, lr}
 800a742:	4b2a      	ldr	r3, [pc, #168]	; (800a7ec <__swsetup_r+0xac>)
 800a744:	4605      	mov	r5, r0
 800a746:	6818      	ldr	r0, [r3, #0]
 800a748:	460c      	mov	r4, r1
 800a74a:	b118      	cbz	r0, 800a754 <__swsetup_r+0x14>
 800a74c:	6a03      	ldr	r3, [r0, #32]
 800a74e:	b90b      	cbnz	r3, 800a754 <__swsetup_r+0x14>
 800a750:	f7fc fbee 	bl	8006f30 <__sinit>
 800a754:	89a3      	ldrh	r3, [r4, #12]
 800a756:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a75a:	0718      	lsls	r0, r3, #28
 800a75c:	d422      	bmi.n	800a7a4 <__swsetup_r+0x64>
 800a75e:	06d9      	lsls	r1, r3, #27
 800a760:	d407      	bmi.n	800a772 <__swsetup_r+0x32>
 800a762:	2309      	movs	r3, #9
 800a764:	602b      	str	r3, [r5, #0]
 800a766:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a76a:	81a3      	strh	r3, [r4, #12]
 800a76c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a770:	e034      	b.n	800a7dc <__swsetup_r+0x9c>
 800a772:	0758      	lsls	r0, r3, #29
 800a774:	d512      	bpl.n	800a79c <__swsetup_r+0x5c>
 800a776:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a778:	b141      	cbz	r1, 800a78c <__swsetup_r+0x4c>
 800a77a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a77e:	4299      	cmp	r1, r3
 800a780:	d002      	beq.n	800a788 <__swsetup_r+0x48>
 800a782:	4628      	mov	r0, r5
 800a784:	f7fd fbd2 	bl	8007f2c <_free_r>
 800a788:	2300      	movs	r3, #0
 800a78a:	6363      	str	r3, [r4, #52]	; 0x34
 800a78c:	89a3      	ldrh	r3, [r4, #12]
 800a78e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a792:	81a3      	strh	r3, [r4, #12]
 800a794:	2300      	movs	r3, #0
 800a796:	6063      	str	r3, [r4, #4]
 800a798:	6923      	ldr	r3, [r4, #16]
 800a79a:	6023      	str	r3, [r4, #0]
 800a79c:	89a3      	ldrh	r3, [r4, #12]
 800a79e:	f043 0308 	orr.w	r3, r3, #8
 800a7a2:	81a3      	strh	r3, [r4, #12]
 800a7a4:	6923      	ldr	r3, [r4, #16]
 800a7a6:	b94b      	cbnz	r3, 800a7bc <__swsetup_r+0x7c>
 800a7a8:	89a3      	ldrh	r3, [r4, #12]
 800a7aa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a7ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7b2:	d003      	beq.n	800a7bc <__swsetup_r+0x7c>
 800a7b4:	4621      	mov	r1, r4
 800a7b6:	4628      	mov	r0, r5
 800a7b8:	f000 f884 	bl	800a8c4 <__smakebuf_r>
 800a7bc:	89a0      	ldrh	r0, [r4, #12]
 800a7be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7c2:	f010 0301 	ands.w	r3, r0, #1
 800a7c6:	d00a      	beq.n	800a7de <__swsetup_r+0x9e>
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	60a3      	str	r3, [r4, #8]
 800a7cc:	6963      	ldr	r3, [r4, #20]
 800a7ce:	425b      	negs	r3, r3
 800a7d0:	61a3      	str	r3, [r4, #24]
 800a7d2:	6923      	ldr	r3, [r4, #16]
 800a7d4:	b943      	cbnz	r3, 800a7e8 <__swsetup_r+0xa8>
 800a7d6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a7da:	d1c4      	bne.n	800a766 <__swsetup_r+0x26>
 800a7dc:	bd38      	pop	{r3, r4, r5, pc}
 800a7de:	0781      	lsls	r1, r0, #30
 800a7e0:	bf58      	it	pl
 800a7e2:	6963      	ldrpl	r3, [r4, #20]
 800a7e4:	60a3      	str	r3, [r4, #8]
 800a7e6:	e7f4      	b.n	800a7d2 <__swsetup_r+0x92>
 800a7e8:	2000      	movs	r0, #0
 800a7ea:	e7f7      	b.n	800a7dc <__swsetup_r+0x9c>
 800a7ec:	20000088 	.word	0x20000088

0800a7f0 <_raise_r>:
 800a7f0:	291f      	cmp	r1, #31
 800a7f2:	b538      	push	{r3, r4, r5, lr}
 800a7f4:	4604      	mov	r4, r0
 800a7f6:	460d      	mov	r5, r1
 800a7f8:	d904      	bls.n	800a804 <_raise_r+0x14>
 800a7fa:	2316      	movs	r3, #22
 800a7fc:	6003      	str	r3, [r0, #0]
 800a7fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a802:	bd38      	pop	{r3, r4, r5, pc}
 800a804:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a806:	b112      	cbz	r2, 800a80e <_raise_r+0x1e>
 800a808:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a80c:	b94b      	cbnz	r3, 800a822 <_raise_r+0x32>
 800a80e:	4620      	mov	r0, r4
 800a810:	f000 f830 	bl	800a874 <_getpid_r>
 800a814:	462a      	mov	r2, r5
 800a816:	4601      	mov	r1, r0
 800a818:	4620      	mov	r0, r4
 800a81a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a81e:	f000 b817 	b.w	800a850 <_kill_r>
 800a822:	2b01      	cmp	r3, #1
 800a824:	d00a      	beq.n	800a83c <_raise_r+0x4c>
 800a826:	1c59      	adds	r1, r3, #1
 800a828:	d103      	bne.n	800a832 <_raise_r+0x42>
 800a82a:	2316      	movs	r3, #22
 800a82c:	6003      	str	r3, [r0, #0]
 800a82e:	2001      	movs	r0, #1
 800a830:	e7e7      	b.n	800a802 <_raise_r+0x12>
 800a832:	2400      	movs	r4, #0
 800a834:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a838:	4628      	mov	r0, r5
 800a83a:	4798      	blx	r3
 800a83c:	2000      	movs	r0, #0
 800a83e:	e7e0      	b.n	800a802 <_raise_r+0x12>

0800a840 <raise>:
 800a840:	4b02      	ldr	r3, [pc, #8]	; (800a84c <raise+0xc>)
 800a842:	4601      	mov	r1, r0
 800a844:	6818      	ldr	r0, [r3, #0]
 800a846:	f7ff bfd3 	b.w	800a7f0 <_raise_r>
 800a84a:	bf00      	nop
 800a84c:	20000088 	.word	0x20000088

0800a850 <_kill_r>:
 800a850:	b538      	push	{r3, r4, r5, lr}
 800a852:	4d07      	ldr	r5, [pc, #28]	; (800a870 <_kill_r+0x20>)
 800a854:	2300      	movs	r3, #0
 800a856:	4604      	mov	r4, r0
 800a858:	4608      	mov	r0, r1
 800a85a:	4611      	mov	r1, r2
 800a85c:	602b      	str	r3, [r5, #0]
 800a85e:	f7f7 fdfd 	bl	800245c <_kill>
 800a862:	1c43      	adds	r3, r0, #1
 800a864:	d102      	bne.n	800a86c <_kill_r+0x1c>
 800a866:	682b      	ldr	r3, [r5, #0]
 800a868:	b103      	cbz	r3, 800a86c <_kill_r+0x1c>
 800a86a:	6023      	str	r3, [r4, #0]
 800a86c:	bd38      	pop	{r3, r4, r5, pc}
 800a86e:	bf00      	nop
 800a870:	20004698 	.word	0x20004698

0800a874 <_getpid_r>:
 800a874:	f7f7 bdf0 	b.w	8002458 <_getpid>

0800a878 <__swhatbuf_r>:
 800a878:	b570      	push	{r4, r5, r6, lr}
 800a87a:	460c      	mov	r4, r1
 800a87c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a880:	2900      	cmp	r1, #0
 800a882:	b096      	sub	sp, #88	; 0x58
 800a884:	4615      	mov	r5, r2
 800a886:	461e      	mov	r6, r3
 800a888:	da0d      	bge.n	800a8a6 <__swhatbuf_r+0x2e>
 800a88a:	89a3      	ldrh	r3, [r4, #12]
 800a88c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a890:	f04f 0100 	mov.w	r1, #0
 800a894:	bf0c      	ite	eq
 800a896:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a89a:	2340      	movne	r3, #64	; 0x40
 800a89c:	2000      	movs	r0, #0
 800a89e:	6031      	str	r1, [r6, #0]
 800a8a0:	602b      	str	r3, [r5, #0]
 800a8a2:	b016      	add	sp, #88	; 0x58
 800a8a4:	bd70      	pop	{r4, r5, r6, pc}
 800a8a6:	466a      	mov	r2, sp
 800a8a8:	f000 f848 	bl	800a93c <_fstat_r>
 800a8ac:	2800      	cmp	r0, #0
 800a8ae:	dbec      	blt.n	800a88a <__swhatbuf_r+0x12>
 800a8b0:	9901      	ldr	r1, [sp, #4]
 800a8b2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a8b6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a8ba:	4259      	negs	r1, r3
 800a8bc:	4159      	adcs	r1, r3
 800a8be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8c2:	e7eb      	b.n	800a89c <__swhatbuf_r+0x24>

0800a8c4 <__smakebuf_r>:
 800a8c4:	898b      	ldrh	r3, [r1, #12]
 800a8c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a8c8:	079d      	lsls	r5, r3, #30
 800a8ca:	4606      	mov	r6, r0
 800a8cc:	460c      	mov	r4, r1
 800a8ce:	d507      	bpl.n	800a8e0 <__smakebuf_r+0x1c>
 800a8d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a8d4:	6023      	str	r3, [r4, #0]
 800a8d6:	6123      	str	r3, [r4, #16]
 800a8d8:	2301      	movs	r3, #1
 800a8da:	6163      	str	r3, [r4, #20]
 800a8dc:	b002      	add	sp, #8
 800a8de:	bd70      	pop	{r4, r5, r6, pc}
 800a8e0:	ab01      	add	r3, sp, #4
 800a8e2:	466a      	mov	r2, sp
 800a8e4:	f7ff ffc8 	bl	800a878 <__swhatbuf_r>
 800a8e8:	9900      	ldr	r1, [sp, #0]
 800a8ea:	4605      	mov	r5, r0
 800a8ec:	4630      	mov	r0, r6
 800a8ee:	f7fd fb91 	bl	8008014 <_malloc_r>
 800a8f2:	b948      	cbnz	r0, 800a908 <__smakebuf_r+0x44>
 800a8f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8f8:	059a      	lsls	r2, r3, #22
 800a8fa:	d4ef      	bmi.n	800a8dc <__smakebuf_r+0x18>
 800a8fc:	f023 0303 	bic.w	r3, r3, #3
 800a900:	f043 0302 	orr.w	r3, r3, #2
 800a904:	81a3      	strh	r3, [r4, #12]
 800a906:	e7e3      	b.n	800a8d0 <__smakebuf_r+0xc>
 800a908:	89a3      	ldrh	r3, [r4, #12]
 800a90a:	6020      	str	r0, [r4, #0]
 800a90c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a910:	81a3      	strh	r3, [r4, #12]
 800a912:	9b00      	ldr	r3, [sp, #0]
 800a914:	6163      	str	r3, [r4, #20]
 800a916:	9b01      	ldr	r3, [sp, #4]
 800a918:	6120      	str	r0, [r4, #16]
 800a91a:	b15b      	cbz	r3, 800a934 <__smakebuf_r+0x70>
 800a91c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a920:	4630      	mov	r0, r6
 800a922:	f000 f81d 	bl	800a960 <_isatty_r>
 800a926:	b128      	cbz	r0, 800a934 <__smakebuf_r+0x70>
 800a928:	89a3      	ldrh	r3, [r4, #12]
 800a92a:	f023 0303 	bic.w	r3, r3, #3
 800a92e:	f043 0301 	orr.w	r3, r3, #1
 800a932:	81a3      	strh	r3, [r4, #12]
 800a934:	89a3      	ldrh	r3, [r4, #12]
 800a936:	431d      	orrs	r5, r3
 800a938:	81a5      	strh	r5, [r4, #12]
 800a93a:	e7cf      	b.n	800a8dc <__smakebuf_r+0x18>

0800a93c <_fstat_r>:
 800a93c:	b538      	push	{r3, r4, r5, lr}
 800a93e:	4d07      	ldr	r5, [pc, #28]	; (800a95c <_fstat_r+0x20>)
 800a940:	2300      	movs	r3, #0
 800a942:	4604      	mov	r4, r0
 800a944:	4608      	mov	r0, r1
 800a946:	4611      	mov	r1, r2
 800a948:	602b      	str	r3, [r5, #0]
 800a94a:	f7f7 fdb5 	bl	80024b8 <_fstat>
 800a94e:	1c43      	adds	r3, r0, #1
 800a950:	d102      	bne.n	800a958 <_fstat_r+0x1c>
 800a952:	682b      	ldr	r3, [r5, #0]
 800a954:	b103      	cbz	r3, 800a958 <_fstat_r+0x1c>
 800a956:	6023      	str	r3, [r4, #0]
 800a958:	bd38      	pop	{r3, r4, r5, pc}
 800a95a:	bf00      	nop
 800a95c:	20004698 	.word	0x20004698

0800a960 <_isatty_r>:
 800a960:	b538      	push	{r3, r4, r5, lr}
 800a962:	4d06      	ldr	r5, [pc, #24]	; (800a97c <_isatty_r+0x1c>)
 800a964:	2300      	movs	r3, #0
 800a966:	4604      	mov	r4, r0
 800a968:	4608      	mov	r0, r1
 800a96a:	602b      	str	r3, [r5, #0]
 800a96c:	f7f7 fdaa 	bl	80024c4 <_isatty>
 800a970:	1c43      	adds	r3, r0, #1
 800a972:	d102      	bne.n	800a97a <_isatty_r+0x1a>
 800a974:	682b      	ldr	r3, [r5, #0]
 800a976:	b103      	cbz	r3, 800a97a <_isatty_r+0x1a>
 800a978:	6023      	str	r3, [r4, #0]
 800a97a:	bd38      	pop	{r3, r4, r5, pc}
 800a97c:	20004698 	.word	0x20004698

0800a980 <_init>:
 800a980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a982:	bf00      	nop
 800a984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a986:	bc08      	pop	{r3}
 800a988:	469e      	mov	lr, r3
 800a98a:	4770      	bx	lr

0800a98c <_fini>:
 800a98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a98e:	bf00      	nop
 800a990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a992:	bc08      	pop	{r3}
 800a994:	469e      	mov	lr, r3
 800a996:	4770      	bx	lr
